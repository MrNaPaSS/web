#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Signal Generator - –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ Twelvedata API
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã

–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""

import asyncio
import time
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import logging

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
from twelvedata_analyzer import TwelvedataAnalyzer
from technical_analyzer import TechnicalAnalyzer
from market_data_fetcher import MarketDataFetcher
from api_optimizer import APIOptimizer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class ForexSignal:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª–∞ (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ)"""
    
    def __init__(self, pair: str, direction: str, confidence: float, 
                 entry_price: float, indicators: Dict = None, timestamp: datetime = None, memory_boost: bool = False, duration: int = 1):
        self.pair = pair
        self.direction = direction  # "BUY" –∏–ª–∏ "SELL"
        self.confidence = confidence  # 0.0 - 1.0
        self.entry_price = entry_price
        self.indicators = indicators or {}
        self.timestamp = timestamp or datetime.now()
        self.memory_boost = memory_boost
        self.duration = duration  # –í—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º final_score –ë–ï–ó –±–æ–Ω—É—Å–æ–≤ - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.final_score = confidence
        # –£–±–∏—Ä–∞–µ–º memory_boost –±–æ–Ω—É—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∫–æ—Ä—ã
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
        self.expiration_minutes = duration
        self.technical_analysis = self._generate_technical_analysis()
        
    def _generate_technical_analysis(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        analysis_parts = []
        
        if 'rsi' in self.indicators:
            rsi = self.indicators['rsi']
            if rsi > 70:
                analysis_parts.append("RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
            elif rsi < 30:
                analysis_parts.append("RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
            else:
                analysis_parts.append("RSI –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ")
        
        if 'macd' in self.indicators:
            macd = self.indicators['macd']
            if macd > 0:
                analysis_parts.append("MACD –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π")
            else:
                analysis_parts.append("MACD –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π")
        
        if 'trend' in self.indicators:
            trend = self.indicators['trend']
            analysis_parts.append(f"–¢—Ä–µ–Ω–¥: {trend}")
        
        return ". ".join(analysis_parts) if analysis_parts else "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω"
        
    def to_dict(self) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'pair': self.pair,
            'direction': self.direction,
            'confidence': self.confidence,
            'final_score': self.final_score,
            'entry_price': self.entry_price,
            'indicators': self.indicators,
            'timestamp': self.timestamp.isoformat(),
            'memory_boost': self.memory_boost,
            'duration': self.duration,
            'expiration_minutes': self.expiration_minutes,
            'technical_analysis': self.technical_analysis
        }
    
    def __str__(self) -> str:
        boost_info = " üß†" if self.memory_boost else ""
        return f"{self.pair} {self.direction} @ {self.entry_price:.5f} (Score: {self.final_score:.2f}){boost_info}"


class SignalGenerator:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, twelvedata_api_key: str):
        self.twelvedata_api_key = twelvedata_api_key
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.twelvedata_analyzer = TwelvedataAnalyzer(twelvedata_api_key)
        self.technical_analyzer = TechnicalAnalyzer(twelvedata_api_key)
        self.market_data_fetcher = MarketDataFetcher()
        self.api_optimizer = APIOptimizer()
        
        # –î–æ–±–∞–≤–ª—è–µ–º market_schedule –¥–ª—è LITE —Ä–µ–∂–∏–º–∞
        from market_schedule import MarketSchedule
        self.market_schedule = MarketSchedule()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–µ
        self.api_optimizer.api_keys['twelvedata'] = twelvedata_api_key
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä - —Ç–æ–ª—å–∫–æ 6 –æ—Å–Ω–æ–≤–Ω—ã—Ö
        self.supported_pairs = [
            "EUR/USD", "GBP/USD", "USD/JPY", 
            "USD/CHF", "AUD/USD", "USD/CAD"
        ]
        
        # –ö—ç—à —Å–∏–≥–Ω–∞–ª–æ–≤ (–û–¢–ö–õ–Æ–ß–ï–ù)
        self.signals_cache = {}
        self.cache_duration = 0
        
        logger.info("‚úÖ SignalGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _generate_test_market_data(self, pair: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∫–æ–≥–¥–∞ —Ä—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç)"""
        import random
        
        # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä
        base_prices = {
            "EUR/USD": 1.0950,
            "GBP/USD": 1.2630,
            "USD/JPY": 149.85,
            "USD/CHF": 0.9180,
            "AUD/USD": 0.6720,
            "USD/CAD": 1.3580
        }
        
        base_price = base_prices.get(pair, 1.1000)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        price_variation = random.uniform(-0.002, 0.002)  # ¬±0.2%
        current_price = base_price * (1 + price_variation)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        rsi = random.uniform(25, 75)  # RSI –æ—Ç 25 –¥–æ 75
        ema_21 = current_price * random.uniform(0.998, 1.002)
        bb_upper = current_price * 1.01
        bb_lower = current_price * 0.99
        
        logger.info(f"üé≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {pair} (—Ä—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç)")
        
        return {
            'close': current_price,
            'ema_8': ema_21 * 0.999,
            'ema_21': ema_21,
            'ema_50': ema_21 * 1.001,
            'rsi_14': rsi,
            'bb_upper': bb_upper,
            'bb_lower': bb_lower,
            'volume': 1000000,
            'volume_sma_10': 1000000,
            'volatility_20': 0.5,
            'timestamp': int(datetime.now().timestamp())
        }
    
    def _generate_basic_tech_signal(self, market_data: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            rsi = float(market_data.get('rsi_14', 50))
            current_price = float(market_data.get('close', 1.1000))
            ema_21 = float(market_data.get('ema_21', current_price))
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI –∏ EMA
            signals = []
            confidences = []
            
            # RSI –∞–Ω–∞–ª–∏–∑
            if rsi < 30:
                signals.append("BUY")
                confidences.append(0.7)
            elif rsi > 70:
                signals.append("SELL")
                confidences.append(0.7)
            else:
                signals.append("NEUTRAL")
                confidences.append(0.4)
            
            # EMA –∞–Ω–∞–ª–∏–∑
            if current_price > ema_21 * 1.001:
                signals.append("BUY")
                confidences.append(0.6)
            elif current_price < ema_21 * 0.999:
                signals.append("SELL")
                confidences.append(0.6)
            else:
                signals.append("NEUTRAL")
                confidences.append(0.4)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            buy_count = signals.count("BUY")
            sell_count = signals.count("SELL")
            
            if buy_count > sell_count:
                final_signal = "BUY"
                final_confidence = sum(confidences) / len(confidences) * (buy_count / len(signals))
            elif sell_count > buy_count:
                final_signal = "SELL"
                final_confidence = sum(confidences) / len(confidences) * (sell_count / len(signals))
            else:
                final_signal = "NEUTRAL"
                final_confidence = 0.4
            
            return {
                "signal": final_signal,
                "confidence": final_confidence,
                "reason": f"–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑: RSI={rsi:.1f}, EMA —Ç—Ä–µ–Ω–¥",
                "indicators": {
                    "rsi": rsi,
                    "current_price": current_price,
                    "ema_21": ema_21
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {
                "signal": "NEUTRAL",
                "confidence": 0.5,
                "reason": "–ë–∞–∑–æ–≤—ã–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª",
                "indicators": {}
            }
    
    async def generate_signal_lite(self, pair: str) -> Optional[ForexSignal]:
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ API –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        logger.info(f"‚ö° LITE –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair}...")
        
        try:
            # –ö—ç—à –æ—Ç–∫–ª—é—á–µ–Ω ‚Äî –≤—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (1 API –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ 5-6)
            if self.market_schedule.is_market_open():
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ñ–æ—Ä–µ–∫—Å —Ä—ã–Ω–∫–∞
                if not self.market_schedule.is_forex_available():
                    logger.warning(f"‚ö†Ô∏è –§–æ—Ä–µ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å 22:00 –¥–æ 6:00 –ø–æ –±—É–¥–Ω—è–º –¥–ª—è {pair}")
                    return None
                
                try:
                    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã + RSI
                    market_data = await self.market_data_fetcher.get_basic_data(pair)
                except:
                    market_data = self._generate_test_market_data(pair)
            else:
                market_data = self._generate_test_market_data(pair)
            
            if not market_data:
                return None
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            current_price = float(market_data.get('close', 1.1000))
            rsi = float(market_data.get('rsi_14', 50))
            
            # –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if rsi < 35:
                direction = "BUY"
                confidence = min(0.85, 0.6 + (35 - rsi) / 50)  # –ß–µ–º –Ω–∏–∂–µ RSI, —Ç–µ–º –≤—ã—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            elif rsi > 65:
                direction = "SELL"  
                confidence = min(0.85, 0.6 + (rsi - 65) / 50)  # –ß–µ–º –≤—ã—à–µ RSI, —Ç–µ–º –≤—ã—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            else:
                return None  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ - –Ω–µ —Ç–æ—Ä–≥—É–µ–º
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–ª–µ–≥—á–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal = ForexSignal(
                pair=pair,
                direction=direction,
                confidence=confidence,
                entry_price=current_price,
                indicators={'rsi': rsi, 'current_price': current_price},
                memory_boost=False  # –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∫–æ—Ä—ã
            )
            
            # –ö—ç—à –æ—Ç–∫–ª—é—á–µ–Ω ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            
            logger.info(f"‚ö° LITE —Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: {pair} {direction} ({confidence:.1%}) - 1 API –∑–∞–ø—Ä–æ—Å")
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ LITE –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {pair}: {e}")
            return None
    
    async def generate_signal(self, pair: str) -> Optional[ForexSignal]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª –¥–ª—è –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—è FixedComprehensiveAnalysis –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ"""
        from config import BotConfig
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LITE —Ä–µ–∂–∏–º –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if BotConfig.SIGNAL_SETTINGS.get("lite_mode", False):
            return await self.generate_signal_lite(pair)
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ FULL —Ä–µ–∂–∏–º–µ
        if not self.market_schedule.is_market_open():
            logger.warning(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç –¥–ª—è {pair}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            # –û–ø—Ü–∏—è 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–∫—É—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
            market_data = self._generate_test_market_data(pair)
        elif not self.market_schedule.is_forex_available():
            logger.warning(f"‚ö†Ô∏è –§–æ—Ä–µ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å 22:00 –¥–æ 6:00 –¥–ª—è {pair}")
            return None
        
        try:
            logger.info(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ü–û–õ–ù–û–ì–û —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair}...")
            
            # –ö—ç—à –æ—Ç–∫–ª—é—á–µ–Ω ‚Äî –≤—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
            
            # –ò–°–ü–û–õ–¨–ó–£–ï–ú FixedComprehensiveAnalysis –ö–ê–ö –í –û–°–ù–û–í–ù–û–ú –ë–û–¢–ï
            try:
                from fixed_comprehensive_analysis import FixedComprehensiveAnalysis
                
                # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
                if not hasattr(self, '_comprehensive_analyzer'):
                    self._comprehensive_analyzer = FixedComprehensiveAnalysis(
                        asset_type="forex",
                        twelvedata_api_key=self.twelvedata_analyzer.api_key,
                        finnhub_api_key="d2s4r39r01qiq7a2l940d2s4r39r01qiq7a2l94g",
                        settings=None
                    )
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —á–µ—Ä–µ–∑ FixedComprehensiveAnalysis
                all_signals = await self._comprehensive_analyzer.generate_ultra_precise_signals([pair], max_signals=2)
                
                if all_signals:
                    best_signal = all_signals[0]  # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ForexSignal
                    signal = ForexSignal(
                        pair=pair,
                        direction=best_signal.get('direction', 'NEUTRAL'),
                        confidence=best_signal.get('confidence', 0.5),
                        entry_price=best_signal.get('entry_price', best_signal.get('current_price', 1.0)),
                        indicators=best_signal.get('indicators', {}),
                        timestamp=datetime.now(),
                        memory_boost=best_signal.get('memory_boost', False),
                        duration=best_signal.get('duration', random.choice([1, 2, 3, 4, 5]))
                    )
                    
                    # –ö—ç—à –æ—Ç–∫–ª—é—á–µ–Ω ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                    logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {pair}: {signal}")
                    return signal
                    
            except ImportError:
                logger.warning("‚ùå FixedComprehensiveAnalysis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            except Exception as e:
                logger.error(f"‚ùå –ü–û–î–†–û–ë–ù–ê–Ø –û–®–ò–ë–ö–ê FixedComprehensiveAnalysis: {type(e).__name__}: {e}")
                import traceback
                logger.error(f"‚ùå –¢–†–ê–°–°–ò–†–û–í–ö–ê: {traceback.format_exc()}")
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ FixedComprehensiveAnalysis: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            
            # FALLBACK: —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –µ—Å–ª–∏ FixedComprehensiveAnalysis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = self.twelvedata_analyzer.get_market_data(pair)
            if not market_data:
                logger.warning(f"‚ùå –ù–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pair}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∫–æ–≥–¥–∞ —Ä—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç)
                market_data = self._generate_test_market_data(pair)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            tech_df = self.technical_analyzer.get_technical_analysis(pair, "5min")
            if tech_df.empty:
                logger.warning(f"‚ùå –ù–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pair}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
                tech_signal = self._generate_basic_tech_signal(market_data)
            else:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                tech_signal = self.technical_analyzer.analyze_signal(tech_df)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑—ã
            signal = self._combine_analyses(pair, market_data, tech_signal)
            
            # –ö—ç—à –æ—Ç–∫–ª—é—á–µ–Ω ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {pair}: {signal}")
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair}: {e}")
            return None
    
    def _combine_analyses(self, pair: str, market_data: Dict, tech_signal: Dict) -> Optional[ForexSignal]:
        """–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–∞
            current_price = float(market_data.get('close', 1.1700))
            rsi = float(market_data.get('rsi_14', 50))
            ema_21 = float(market_data.get('ema_21', current_price))
            bb_upper = float(market_data.get('bb_upper', current_price * 1.01))
            bb_lower = float(market_data.get('bb_lower', current_price * 0.99))
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª
            tech_direction = tech_signal.get('signal', 'NEUTRAL')
            tech_confidence = tech_signal.get('confidence', 0.0)
            
            # –ê–Ω–∞–ª–∏–∑ RSI
            rsi_signal = "NEUTRAL"
            rsi_confidence = 0.3
            if rsi < 30:
                rsi_signal = "BUY"
                rsi_confidence = 0.8
            elif rsi > 70:
                rsi_signal = "SELL"
                rsi_confidence = 0.8
            
            # –ê–Ω–∞–ª–∏–∑ EMA
            ema_signal = "NEUTRAL"
            ema_confidence = 0.3
            if current_price > ema_21 * 1.001:
                ema_signal = "BUY"
                ema_confidence = 0.6
            elif current_price < ema_21 * 0.999:
                ema_signal = "SELL"
                ema_confidence = 0.6
            
            # –ê–Ω–∞–ª–∏–∑ Bollinger Bands
            bb_signal = "NEUTRAL"
            bb_confidence = 0.3
            if current_price <= bb_lower:
                bb_signal = "BUY"
                bb_confidence = 0.7
            elif current_price >= bb_upper:
                bb_signal = "SELL"
                bb_confidence = 0.7
            
            # –ü–æ–¥—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            signals = [tech_direction, rsi_signal, ema_signal, bb_signal]
            confidences = [tech_confidence, rsi_confidence, ema_confidence, bb_confidence]
            
            buy_count = signals.count("BUY")
            sell_count = signals.count("SELL")
            neutral_count = signals.count("NEUTRAL")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if buy_count > sell_count and buy_count > neutral_count:
                final_direction = "BUY"
                final_confidence = sum(confidences) / len(confidences) * (buy_count / len(signals))
            elif sell_count > buy_count and sell_count > neutral_count:
                final_direction = "SELL"
                final_confidence = sum(confidences) / len(confidences) * (sell_count / len(signals))
            else:
                final_direction = "NEUTRAL"
                final_confidence = 0.3
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ (–ø–æ–Ω–∏–∂–µ–Ω –¥–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞)
            if final_confidence < 0.3:
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
            indicators_data = {
                'rsi': rsi,
                'ema_21': ema_21,
                'bb_upper': bb_upper,
                'bb_lower': bb_lower,
                'current_price': current_price,
                'tech_signal': tech_direction,
                'tech_confidence': tech_confidence
            }
            
            signal = ForexSignal(
                pair=pair,
                direction=final_direction,
                confidence=min(final_confidence, 1.0),
                entry_price=current_price,
                indicators=indicators_data,
                memory_boost=False  # –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∫–æ—Ä—ã
            )
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è {pair}: {e}")
            return None
    
    async def generate_signals_bulk(self, pairs: List[str] = None) -> List[ForexSignal]:
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä"""
        from config import BotConfig
        
        if pairs is None:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API
            max_pairs = BotConfig.SIGNAL_SETTINGS.get("max_bulk_pairs", 3)
            pairs = self.supported_pairs[:max_pairs]
        
        logger.info(f"‚ö° –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è {len(pairs)} –ø–∞—Ä...")
        
        signals = []
        delay = BotConfig.SIGNAL_SETTINGS.get("request_delay", 2.0)
        
        for pair in pairs:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º LITE —Ä–µ–∂–∏–º –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                if BotConfig.SIGNAL_SETTINGS.get("lite_mode", False):
                    signal = await self.generate_signal_lite(pair)
                else:
                    signal = await self.generate_signal(pair)
                    
                if signal:
                    signals.append(signal)
                
                # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API
                await asyncio.sleep(delay)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {pair}: {e}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ final_score (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ)
        signals.sort(key=lambda s: s.final_score, reverse=True)
        
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Å–∫–æ—Ä—É")
        return signals
    
    async def get_best_signals(self, limit: int = 3) -> List[ForexSignal]:
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        from config import BotConfig
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API
        actual_limit = min(limit, BotConfig.SIGNAL_SETTINGS.get("max_bulk_pairs", 3))
        logger.info(f"‚ö° –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–æ–∏—Å–∫ {actual_limit} –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä
        all_signals = await self.generate_signals_bulk()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å —É—á–µ—Ç–æ–º LITE —Ä–µ–∂–∏–º–∞
        if BotConfig.SIGNAL_SETTINGS.get("lite_mode", False):
            # –í LITE —Ä–µ–∂–∏–º–µ –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            high_score_signals = [s for s in all_signals if s.final_score >= 0.65]
        else:
            # –í –ø–æ–ª–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å—Ç—Ä–æ–≥–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            high_score_signals = [s for s in all_signals if s.final_score >= 0.75]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã
        best_signals = high_score_signals[:actual_limit]
        
        logger.info(f"üèÜ –ù–∞–π–¥–µ–Ω–æ {len(best_signals)} –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        for i, signal in enumerate(best_signals, 1):
            confidence_color = "üü¢" if signal.final_score > 0.8 else "üü°" if signal.final_score > 0.7 else "üî¥"
            boost_info = " üß†" if signal.memory_boost else ""
            logger.info(f"   {i}. {confidence_color} {signal.pair} {signal.direction} (Score: {signal.final_score:.2f}){boost_info}")
        
        return best_signals
    
    def get_supported_pairs(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
        return self.supported_pairs.copy()
    
    def get_api_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å API"""
        return self.api_optimizer.get_api_status()
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.signals_cache.clear()
        self.twelvedata_analyzer.data_cache.clear()
        self.technical_analyzer.cache.clear()
        logger.info("üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 60)
    
    # API –∫–ª—é—á (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    api_key = "demo"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        generator = SignalGenerator(api_key)
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è EUR/USD:")
        signal = await generator.generate_signal("EUR/USD")
        
        if signal:
            print(f"   ‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {signal}")
            print(f"   üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: RSI={signal.indicators.get('rsi', 'N/A'):.1f}, "
                  f"EMA={signal.indicators.get('ema_21', 'N/A'):.5f}")
        else:
            print("   ‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:")
        test_pairs = ["EUR/USD", "GBP/USD", "USD/JPY"]
        signals = await generator.generate_signals_bulk(test_pairs)
        
        if signals:
            print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤:")
            for sig in signals:
                print(f"      {sig}")
        else:
            print("   ‚ùå –°–∏–≥–Ω–∞–ª—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°—Ç–∞—Ç—É—Å API
        print("\n3Ô∏è‚É£ –°—Ç–∞—Ç—É—Å API:")
        api_status = generator.get_api_status()
        for api_name, status in api_status.items():
            print(f"   {api_name}: {status['minute_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())
