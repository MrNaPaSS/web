#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import json
import os
import logging
from datetime import datetime
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict

logger = logging.getLogger(__name__)

@dataclass
class SignalFeedback:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ —Å–∏–≥–Ω–∞–ª—É"""
    signal_id: str
    user_id: int
    pair: str
    direction: str
    confidence: float
    entry_price: float
    expiration: int
    signal_type: str  # "forex" –∏–ª–∏ "otc"
    timestamp: str
    feedback: str  # "success" –∏–ª–∏ "failure"
    feedback_time: str

class SignalStatistics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, stats_file: str = "signal_stats.json"):
        self.stats_file = stats_file
        self.feedback_data = []
        self.load_statistics()
        logger.info("‚úÖ SignalStatistics –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.stats_file):
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.feedback_data = data.get('feedback', [])
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.feedback_data)} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            else:
                self.feedback_data = []
                logger.info("üìä –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            self.feedback_data = []
    
    def save_statistics(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'feedback': self.feedback_data,
                'last_updated': datetime.now().isoformat()
            }
            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ({len(self.feedback_data)} –∑–∞–ø–∏—Å–µ–π)")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def add_feedback(self, signal_id: str, user_id: int, pair: str, direction: str,
                    confidence: float, entry_price: float, expiration: int,
                    signal_type: str, timestamp: str, feedback: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —Å–∏–≥–Ω–∞–ª—É"""
        try:
            feedback_entry = SignalFeedback(
                signal_id=signal_id,
                user_id=user_id,
                pair=pair,
                direction=direction,
                confidence=confidence,
                entry_price=entry_price,
                expiration=expiration,
                signal_type=signal_type,
                timestamp=timestamp,
                feedback=feedback,
                feedback_time=datetime.now().isoformat()
            )
            
            self.feedback_data.append(asdict(feedback_entry))
            self.save_statistics()
            
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {pair} {direction} - {feedback}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            return False
    
    def get_overall_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            if not self.feedback_data:
                return {
                    'total_signals': 0,
                    'successful': 0,
                    'failed': 0,
                    'success_rate': 0.0,
                    'forex_stats': {'total': 0, 'successful': 0, 'success_rate': 0.0},
                    'otc_stats': {'total': 0, 'successful': 0, 'success_rate': 0.0}
                }
            
            total_signals = len(self.feedback_data)
            successful = len([f for f in self.feedback_data if f['feedback'] == 'success'])
            failed = len([f for f in self.feedback_data if f['feedback'] == 'failure'])
            success_rate = (successful / total_signals * 100) if total_signals > 0 else 0.0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            forex_feedback = [f for f in self.feedback_data if f['signal_type'] == 'forex']
            otc_feedback = [f for f in self.feedback_data if f['signal_type'] == 'otc']
            
            forex_successful = len([f for f in forex_feedback if f['feedback'] == 'success'])
            otc_successful = len([f for f in otc_feedback if f['feedback'] == 'success'])
            
            forex_success_rate = (forex_successful / len(forex_feedback) * 100) if forex_feedback else 0.0
            otc_success_rate = (otc_successful / len(otc_feedback) * 100) if otc_feedback else 0.0
            
            return {
                'total_signals': total_signals,
                'successful': successful,
                'failed': failed,
                'success_rate': success_rate,
                'forex_stats': {
                    'total': len(forex_feedback),
                    'successful': forex_successful,
                    'success_rate': forex_success_rate
                },
                'otc_stats': {
                    'total': len(otc_feedback),
                    'successful': otc_successful,
                    'success_rate': otc_success_rate
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total_signals': 0, 'successful': 0, 'failed': 0, 'success_rate': 0.0}
    
    def get_pair_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞—Ä–∞–º"""
        try:
            pair_stats = {}
            
            for feedback in self.feedback_data:
                pair = feedback['pair']
                if pair not in pair_stats:
                    pair_stats[pair] = {'total': 0, 'successful': 0, 'success_rate': 0.0}
                
                pair_stats[pair]['total'] += 1
                if feedback['feedback'] == 'success':
                    pair_stats[pair]['successful'] += 1
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            for pair in pair_stats:
                total = pair_stats[pair]['total']
                successful = pair_stats[pair]['successful']
                pair_stats[pair]['success_rate'] = (successful / total * 100) if total > 0 else 0.0
            
            return pair_stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–∞—Ä–∞–º: {e}")
            return {}
    
    def get_recent_feedback(self, limit: int = 10) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã"""
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            sorted_feedback = sorted(self.feedback_data, 
                                   key=lambda x: x['feedback_time'], 
                                   reverse=True)
            return sorted_feedback[:limit]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {e}")
            return []


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
signal_statistics = SignalStatistics()


def test_statistics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    stats = SignalStatistics("test_stats.json")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_feedbacks = [
        ("sig1", 123, "EUR/USD (OTC)", "BUY", 0.75, 1.18500, 3, "otc", "2025-09-19T01:00:00", "success"),
        ("sig2", 123, "GBP/USD", "SELL", 0.68, 1.30250, 1, "forex", "2025-09-19T01:05:00", "failure"),
        ("sig3", 456, "USD/JPY (OTC)", "BUY", 0.82, 146.50, 5, "otc", "2025-09-19T01:10:00", "success"),
    ]
    
    for feedback in test_feedbacks:
        stats.add_feedback(*feedback)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    overall = stats.get_overall_statistics()
    print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {overall['total_signals']}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {overall['successful']}")
    print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {overall['failed']}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {overall['success_rate']:.1f}%")
    
    print(f"\nüí± –§–æ—Ä–µ–∫—Å: {overall['forex_stats']['success_rate']:.1f}% ({overall['forex_stats']['successful']}/{overall['forex_stats']['total']})")
    print(f"‚ö° –û–¢–°: {overall['otc_stats']['success_rate']:.1f}% ({overall['otc_stats']['successful']}/{overall['otc_stats']['total']})")
    
    pair_stats = stats.get_pair_statistics()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º:")
    for pair, stat in pair_stats.items():
        print(f"   {pair}: {stat['success_rate']:.1f}% ({stat['successful']}/{stat['total']})")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    if os.path.exists("test_stats.json"):
        os.remove("test_stats.json")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    test_statistics()
