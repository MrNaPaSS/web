#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–û–©–ù–´–ô –û–¢–° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç FixedComprehensiveAnalysis –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –∏ 22+ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
"""

import asyncio
import logging
import random
from datetime import datetime
from typing import Dict, List, Optional, Any

logger = logging.getLogger(__name__)

class PowerfulOTCSignal:
    """–ú–æ—â–Ω—ã–π –û–¢–° —Å–∏–≥–Ω–∞–ª —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    def __init__(self, pair: str, direction: str, confidence: float, 
                 entry_price: float, indicators: Dict = None, timestamp: datetime = None,
                 trend: str = None, score: float = None):
        self.pair = pair
        self.direction = direction  # "BUY" –∏–ª–∏ "SELL"
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º confidence –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0-1
        self.confidence = confidence if confidence <= 1.0 else confidence / 100.0
        
        self.entry_price = entry_price
        self.indicators = indicators or {}
        self.timestamp = timestamp or datetime.now()
        self.trend = trend or "neutral"
        self.duration = random.choice([1, 2, 3, 4, 5])  # –ü–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
        
        # Final score –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ (–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-1)
        raw_score = score or self.confidence
        self.final_score = raw_score if raw_score <= 1.0 else raw_score / 100.0
        
    def __str__(self):
        return f"{self.pair} {self.direction} @ {self.entry_price:.5f} (Score: {self.final_score:.2f}) [OTC]"
        
    def to_dict(self) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'pair': self.pair,
            'direction': self.direction,
            'confidence': self.confidence,
            'final_score': self.final_score,
            'entry_price': self.entry_price,
            'indicators': self.indicators,
            'timestamp': self.timestamp.isoformat(),
            'duration': self.duration,
            'trend': self.trend,
            'type': 'OTC_POWERFUL'
        }


class PowerfulOTCGenerator:
    """–ú–û–©–ù–´–ô –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º (24/7)"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ—â–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞
        try:
            from fixed_comprehensive_analysis import FixedComprehensiveAnalysis
            self.comprehensive_analyzer = FixedComprehensiveAnalysis(
                asset_type="otc",
                twelvedata_api_key="135a5040fb4642d6be0dda33fdf12232", 
                finnhub_api_key="d2s4r39r01qiq7a2l940d2s4r39r01qiq7a2l94g"
            )
            self.analyzer_available = True
            logger.info("‚úÖ FixedComprehensiveAnalysis –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ—â–Ω—ã—Ö –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FixedComprehensiveAnalysis: {e}")
            self.comprehensive_analyzer = None
            self.analyzer_available = False
        
        # 5 –û–¢–° –ø–∞—Ä –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ (–±–µ–∑ OTC –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞)
        self.otc_pairs_for_analysis = ["EUR/USD", "NZD/USD", "USD/CHF", "GBP/USD", "USD/CAD"]
        
        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ—Ç–µ
        self.supported_otc_pairs = [
            "EUR/USD (OTC)",
            "NZD/USD (OTC)", 
            "USD/CHF (OTC)",
            "GBP/USD (OTC)",
            "USD/CAD (OTC)"
        ]
        
        # –ö—ç—à –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ (–û–¢–ö–õ–Æ–ß–ï–ù)
        self.signals_cache = {}
        self.cache_timeout = 0
        
        logger.info("‚úÖ PowerfulOTCGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (24/7 —Ä–µ–∂–∏–º —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º)")
    
    def get_supported_pairs(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –û–¢–° –ø–∞—Ä"""
        return self.supported_otc_pairs.copy()
    
    async def generate_otc_signal(self, pair: str) -> Optional[PowerfulOTCSignal]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ—â–Ω—ã–π –û–¢–° —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã"""
        try:
            if not self.analyzer_available:
                logger.error("‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
            
            # –£–±–∏—Ä–∞–µ–º " (OTC)" –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            clean_pair = pair.replace(" (OTC)", "")
            
            if clean_pair not in self.otc_pairs_for_analysis:
                logger.error(f"‚ùå –ü–∞—Ä–∞ {clean_pair} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                return None
            
            logger.info(f"üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—â–Ω–æ–≥–æ –û–¢–° —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –º–æ—â–Ω—É—é —Å–∏—Å—Ç–µ–º—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤)
            signals = await self.comprehensive_analyzer.generate_ultra_precise_signals(
                symbols=[clean_pair], 
                max_signals=2  # BUY –∏ SELL
            )
            
            if not signals:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è {clean_pair}")
                return None
            
            # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª (–ø–µ—Ä–≤—ã–π –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ)
            best_signal = signals[0] if signals else None
            
            if not best_signal:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è {clean_pair}")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –º–æ—â–Ω—ã–π –û–¢–° —Å–∏–≥–Ω–∞–ª
            # –ë–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            indicators = best_signal.get('indicators', {})
            
            # –û—Ç–ª–∞–¥–∫–∞ - —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å –≤ —Å–∏–≥–Ω–∞–ª–µ
            logger.info(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ —Å–∏–≥–Ω–∞–ª–µ: {list(best_signal.keys())}")
            logger.info(f"üîç Indicators: {list(indicators.keys()) if indicators else 'None'}")
            
            real_price = (
                best_signal.get('entry_price') or 
                best_signal.get('current_price') or
                indicators.get('current_price') or 
                indicators.get('close') or
                best_signal.get('price') or
                1.18500  # Fallback –¥–ª—è EUR/USD
            )
            
            logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è {clean_pair}: {real_price}")
            
            otc_signal = PowerfulOTCSignal(
                pair=pair,  # –° (OTC)
                direction=best_signal.get('direction', 'BUY'),
                confidence=best_signal.get('confidence', 0.5),
                entry_price=float(real_price),
                indicators=best_signal.get('indicators', {}),
                trend=best_signal.get('trend', 'neutral'),
                score=best_signal.get('confidence', 0.5)
            )
            
            logger.info(f"‚úÖ –ú–æ—â–Ω—ã–π –û–¢–° —Å–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {otc_signal}")
            return otc_signal
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ—â–Ω–æ–≥–æ –û–¢–° —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair}: {e}")
            return None
    
    async def get_best_otc_signals(self, limit: int = 5) -> List[PowerfulOTCSignal]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¢–û–ü –º–æ—â–Ω—ã—Ö –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            if not self.analyzer_available:
                logger.error("‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                return []
            
            logger.info(f"üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {limit} –ª—É—á—à–∏—Ö –º–æ—â–Ω—ã—Ö –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ –º–æ—â–Ω—É—é —Å–∏—Å—Ç–µ–º—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤)
            signals = await self.comprehensive_analyzer.generate_ultra_precise_signals(
                symbols=self.otc_pairs_for_analysis, 
                max_signals=10  # –ë–æ–ª—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–∏—Ö
            )
            
            if not signals:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–æ–≤—ã–µ –û–¢–° —Å–∏–≥–Ω–∞–ª—ã")
                return []
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PowerfulOTCSignal –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            otc_signals = []
            
            for signal in signals:
                try:
                    signal_symbol = signal.get('symbol', '')
                    signal_pair = signal.get('pair', '')
                    clean_pair = signal_symbol or signal_pair
                    
                    if clean_pair in self.otc_pairs_for_analysis:
                        # –î–æ–±–∞–≤–ª—è–µ–º (OTC) –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–∞—Ä—ã
                        display_pair = f"{clean_pair} (OTC)"
                        
                        otc_signal = PowerfulOTCSignal(
                            pair=display_pair,
                            direction=signal.get('direction', 'BUY'),
                            confidence=signal.get('confidence', 0.5),
                            entry_price=signal.get('entry_price', 1.0),
                            indicators=signal.get('indicators', {}),
                            trend=signal.get('trend', 'neutral'),
                            score=signal.get('confidence', 0.5)
                        )
                        otc_signals.append(otc_signal)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ final_score –∏ –±–µ—Ä–µ–º –ª—É—á—à–∏–µ
            otc_signals.sort(key=lambda x: x.final_score, reverse=True)
            top_signals = otc_signals[:limit]
            
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(top_signals)} –ª—É—á—à–∏—Ö –º–æ—â–Ω—ã—Ö –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤")
            for i, signal in enumerate(top_signals, 1):
                logger.info(f"   {i}. {signal}")
            
            return top_signals
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Å—Å–æ–≤—ã—Ö –º–æ—â–Ω—ã—Ö –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []


async def test_powerful_otc_generator():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—â–Ω–æ–≥–æ –û–¢–° –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–©–ù–û–ì–û –û–¢–° –ì–ï–ù–ï–†–ê–¢–û–†–ê")
    print("=" * 60)
    
    generator = PowerfulOTCGenerator()
    
    if not generator.analyzer_available:
        print("‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç–µ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
        return
    
    # –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –º–æ—â–Ω–æ–≥–æ –û–¢–° —Å–∏–≥–Ω–∞–ª–∞:")
    signal = await generator.generate_otc_signal("EUR/USD (OTC)")
    if signal:
        print(f"‚úÖ –°–∏–≥–Ω–∞–ª: {signal}")
        print(f"   –¢—Ä–µ–Ω–¥: {signal.trend}")
        print(f"   –°–∫–æ—Ä: {signal.final_score:.1%}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª")
    
    # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–û–ü-5 –º–æ—â–Ω—ã—Ö –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤:")
    top_signals = await generator.get_best_otc_signals(5)
    if top_signals:
        for i, signal in enumerate(top_signals, 1):
            print(f"   {i}. {signal} (–¢—Ä–µ–Ω–¥: {signal.trend})")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
    
    print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")


if __name__ == "__main__":
    asyncio.run(test_powerful_otc_generator())
