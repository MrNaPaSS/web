#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
"""

import requests
import logging
import time
from typing import Optional, Dict, Any
from datetime import datetime, timedelta
import json
import os

logger = logging.getLogger(__name__)

class ChartGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, api_key: str = None):
        self.api_key = api_key or "demo_chart_api_key"
        self.base_url = "https://api.charts.com/v1"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json'
        })
        
        # –ö—ç—à –¥–ª—è –ª–∏–º–∏—Ç–æ–≤
        self.limits_cache = {}
        self.limits_cache_time = None
        self.cache_duration = 300  # 5 –º–∏–Ω—É—Ç
        
        logger.info("‚úÖ ChartGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_api_limits(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (self.limits_cache_time and 
                time.time() - self.limits_cache_time < self.cache_duration):
                return self.limits_cache
            
            # –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
            response = self.session.get(f"{self.base_url}/limits")
            
            if response.status_code == 200:
                limits_data = response.json()
                self.limits_cache = {
                    'daily_limit': limits_data.get('daily_limit', 1000),
                    'daily_used': limits_data.get('daily_used', 0),
                    'monthly_limit': limits_data.get('monthly_limit', 30000),
                    'monthly_used': limits_data.get('monthly_used', 0),
                    'remaining_today': limits_data.get('daily_limit', 1000) - limits_data.get('daily_used', 0),
                    'remaining_monthly': limits_data.get('monthly_limit', 30000) - limits_data.get('monthly_used', 0),
                    'reset_time': limits_data.get('reset_time', '00:00 UTC'),
                    'status': 'active' if limits_data.get('daily_used', 0) < limits_data.get('daily_limit', 1000) else 'limited'
                }
                self.limits_cache_time = time.time()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ª–∏–º–∏—Ç—ã Chart API: {self.limits_cache['remaining_today']}/{self.limits_cache['daily_limit']} —Å–µ–≥–æ–¥–Ω—è")
                return self.limits_cache
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Chart API: {response.status_code}")
                return self._get_demo_limits()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Chart API: {e}")
            return self._get_demo_limits()
    
    def _get_demo_limits(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–º–æ –ª–∏–º–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            'daily_limit': 100,
            'daily_used': 23,
            'monthly_limit': 3000,
            'monthly_used': 456,
            'remaining_today': 77,
            'remaining_monthly': 2544,
            'reset_time': '00:00 UTC',
            'status': 'demo'
        }
    
    def generate_chart(self, pair: str, signal_data: Dict[str, Any], chart_type: str = "candlestick") -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ë–´–°–¢–†–´–ô –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        """
        try:
            logger.info(f"‚ö° –ë–´–°–¢–†–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {pair}...")
            
            # –°—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –±–µ–∑ API –∑–∞–ø—Ä–æ—Å–æ–≤
            return self._generate_fast_chart(pair, signal_data)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {pair}: {e}")
            return None
    
    def _generate_fast_chart(self, pair: str, signal_data: Dict[str, Any]) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –†–ï–ê–õ–¨–ù–´–ô –≥—Ä–∞—Ñ–∏–∫ —Å —è–ø–æ–Ω—Å–∫–∏–º–∏ —Å–≤–µ—á–∞–º–∏ (1 –º–∏–Ω—É—Ç–∞)"""
        try:
            import matplotlib.pyplot as plt
            import matplotlib.patches as patches
            import numpy as np
            from datetime import datetime, timedelta
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            plt.style.use('dark_background')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 30 –º–∏–Ω—É—Ç –¥–∞–Ω–Ω—ã—Ö (30 —Å–≤–µ—á–µ–π)
            minutes = 30
            base_price = float(signal_data.get('current_price', 1.18500))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OHLC –¥–∞–Ω–Ω—ã–µ –¥–ª—è —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–µ–π
            ohlc_data = []
            current_price = base_price * 0.999  # –ù–∞—á–∏–Ω–∞–µ–º —á—É—Ç—å –Ω–∏–∂–µ
            
            for i in range(minutes):
                # –û—Ç–∫—Ä—ã—Ç–∏–µ = –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                open_price = current_price
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã—Å–æ–∫—É—é –∏ –Ω–∏–∑–∫—É—é —Ü–µ–Ω—ã
                volatility = 0.0005  # 0.05% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                high_price = open_price * (1 + np.random.uniform(0, volatility * 2))
                low_price = open_price * (1 - np.random.uniform(0, volatility * 2))
                
                # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å —Ç—Ä–µ–Ω–¥–æ–º
                trend_direction = 1 if signal_data.get('direction') == 'BUY' else -1
                close_price = open_price * (1 + trend_direction * np.random.uniform(0, volatility))
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º high/low
                high_price = max(high_price, open_price, close_price)
                low_price = min(low_price, open_price, close_price)
                
                ohlc_data.append({
                    'open': open_price,
                    'high': high_price,
                    'low': low_price,
                    'close': close_price
                })
                
                current_price = close_price
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ - —Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞
            ohlc_data[-1]['close'] = base_price
            ohlc_data[-1]['high'] = max(ohlc_data[-1]['high'], base_price)
            ohlc_data[-1]['low'] = min(ohlc_data[-1]['low'], base_price)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(figsize=(12, 7))
            
            # –†–∏—Å—É–µ–º —è–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏
            for i, candle in enumerate(ohlc_data):
                open_price = candle['open']
                high_price = candle['high']
                low_price = candle['low']
                close_price = candle['close']
                
                # –¶–≤–µ—Ç —Å–≤–µ—á–∏
                color = '#00FF88' if close_price > open_price else '#FF4444'
                
                # –¢–µ–ª–æ —Å–≤–µ—á–∏
                body_height = abs(close_price - open_price)
                body_bottom = min(open_price, close_price)
                
                rect = patches.Rectangle((i - 0.3, body_bottom), 0.6, body_height,
                                       linewidth=1, edgecolor=color, facecolor=color, alpha=0.8)
                ax.add_patch(rect)
                
                # –¢–µ–Ω–∏ —Å–≤–µ—á–∏
                ax.plot([i, i], [low_price, high_price], color=color, linewidth=1, alpha=0.7)
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç–æ—á–∫—É —Å–∏–≥–Ω–∞–ª–∞
            signal_color = '#00FF00' if signal_data.get('direction') == 'BUY' else '#FF0000'
            ax.scatter([minutes-1], [base_price], color=signal_color, 
                      s=200, zorder=10, marker='*', 
                      label=f"–°–ò–ì–ù–ê–õ {signal_data.get('direction', 'BUY')}")
            
            # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
            ax.set_title(f"{pair} - –Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏ (1 –º–∏–Ω)", fontsize=16, color='white', pad=20)
            ax.set_ylabel("–¶–µ–Ω–∞", fontsize=14, color='white')
            ax.set_xlabel("–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)", fontsize=14, color='white')
            ax.legend(loc='upper left', fontsize=12)
            ax.grid(True, alpha=0.2)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–∏
            ax.tick_params(colors='white', labelsize=10)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            filename = f"candlestick_{pair.replace('/', '_')}_{int(time.time())}.png"
            filepath = os.path.join("charts", filename)
            os.makedirs("charts", exist_ok=True)
            
            plt.savefig(filepath, dpi=120, bbox_inches='tight', facecolor='#1a1a1a')
            plt.close()
            
            logger.info(f"üïØÔ∏è –ì—Ä–∞—Ñ–∏–∫ —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return filepath
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–µ–π: {e}")
            return None
    
    def _generate_demo_chart(self, pair: str, signal_data: Dict[str, Any]) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–º–æ—â—å—é matplotlib"""
        try:
            import matplotlib.pyplot as plt
            import numpy as np
            from datetime import datetime, timedelta
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
            hours = 24
            times = [datetime.now() - timedelta(hours=i) for i in range(hours, 0, -1)]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
            base_price = signal_data.get('current_price', 1.0)
            try:
                base_price = float(base_price) if base_price is not None else 1.0
                if base_price <= 0 or not np.isfinite(base_price):
                    base_price = 1.0
            except (ValueError, TypeError):
                base_price = 1.0
                
            prices = []
            current_price = base_price * 0.995  # –ù–∞—á–∏–Ω–∞–µ–º —á—É—Ç—å –Ω–∏–∂–µ
            
            for i in range(hours):
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
                    change = float(np.random.normal(0, 0.001))  # 0.1% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                    current_price *= (1 + change)
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
                    if current_price <= 0 or not np.isfinite(current_price):
                        current_price = base_price
                    prices.append(float(current_price))
                except:
                    prices.append(float(base_price))
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–ª–∏–∑–∫–∞ –∫ —Ç–µ–∫—É—â–µ–π
            prices[-1] = float(base_price)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ü–µ–Ω
            prices = [float(p) if np.isfinite(float(p)) else base_price for p in prices]
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8), 
                                         gridspec_kw={'height_ratios': [3, 1]})
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
            ax1.plot(times, prices, color='#00D4AA', linewidth=2, label=pair)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤)
            if 'ema_21' in signal_data and signal_data['ema_21'] is not None:
                ema_value = float(signal_data['ema_21'])
                if ema_value > 0:
                    ema_line = [ema_value] * len(times)
                    ax1.plot(times, ema_line, color='#FF6B6B', linewidth=1, 
                            linestyle='--', label='EMA(21)', alpha=0.8)
            
            if ('bb_upper' in signal_data and 'bb_lower' in signal_data and 
                signal_data['bb_upper'] is not None and signal_data['bb_lower'] is not None):
                bb_upper_val = float(signal_data['bb_upper'])
                bb_lower_val = float(signal_data['bb_lower'])
                if bb_upper_val > 0 and bb_lower_val > 0:
                    bb_upper = [bb_upper_val] * len(times)
                    bb_lower = [bb_lower_val] * len(times)
                    ax1.fill_between(times, bb_upper, bb_lower, 
                                   color='#4ECDC4', alpha=0.2, label='Bollinger Bands')
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç–æ—á–∫—É —Å–∏–≥–Ω–∞–ª–∞
            signal_color = '#00FF00' if signal_data.get('direction') == 'BUY' else '#FF0000'
            ax1.scatter([times[-1]], [base_price], color=signal_color, 
                       s=100, zorder=5, label=f"–°–∏–≥–Ω–∞–ª: {signal_data.get('direction', 'NEUTRAL')}")
            
            ax1.set_title(f"{pair} - –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª", fontsize=16, color='white')
            ax1.set_ylabel("–¶–µ–Ω–∞", fontsize=12, color='white')
            ax1.legend(loc='upper left')
            ax1.grid(True, alpha=0.3)
            
            # RSI –≥—Ä–∞—Ñ–∏–∫ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤)
            if 'rsi' in signal_data and signal_data['rsi'] is not None:
                rsi_base = float(signal_data['rsi'])
                if 0 <= rsi_base <= 100:
                    rsi_values = []
                    for _ in times:
                        rsi_val = rsi_base + np.random.normal(0, 2)
                        rsi_val = max(0, min(100, rsi_val))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-100
                        rsi_values.append(float(rsi_val))
                    rsi_values[-1] = float(rsi_base)  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–µ
                    
                    ax2.plot(times, rsi_values, color='#FFD93D', linewidth=2)
                    ax2.axhline(y=70, color='red', linestyle='--', alpha=0.7)
                    ax2.axhline(y=30, color='green', linestyle='--', alpha=0.7)
                    ax2.set_ylabel("RSI", fontsize=12, color='white')
                    ax2.set_ylim(0, 100)
                    ax2.grid(True, alpha=0.3)
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
            fig.patch.set_facecolor('#1E1E1E')
            for ax in [ax1, ax2]:
                ax.set_facecolor('#2D2D2D')
                ax.tick_params(colors='white')
                ax.spines['bottom'].set_color('white')
                ax.spines['top'].set_color('white')
                ax.spines['right'].set_color('white')
                ax.spines['left'].set_color('white')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            filename = f"demo_chart_{pair.replace('/', '_')}_{int(time.time())}.png"
            filepath = os.path.join("charts", filename)
            os.makedirs("charts", exist_ok=True)
            
            plt.savefig(filepath, facecolor='#1E1E1E', dpi=150, bbox_inches='tight')
            plt.close()
            
            logger.info(f"‚úÖ –î–µ–º–æ –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return filepath
            
        except ImportError:
            logger.error("‚ùå matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ –≥—Ä–∞—Ñ–∏–∫")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return None
    
    def cleanup_old_charts(self, max_age_hours: int = 24):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            charts_dir = "charts"
            if not os.path.exists(charts_dir):
                return
            
            cutoff_time = time.time() - (max_age_hours * 3600)
            deleted_count = 0
            
            for filename in os.listdir(charts_dir):
                filepath = os.path.join(charts_dir, filename)
                if os.path.isfile(filepath) and filename.endswith('.png'):
                    if os.path.getmtime(filepath) < cutoff_time:
                        os.remove(filepath)
                        deleted_count += 1
            
            if deleted_count > 0:
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")


def test_chart_generator():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    
    chart_gen = ChartGenerator()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
    print("\nüìà –õ–∏–º–∏—Ç—ã Chart API:")
    limits = chart_gen.get_api_limits()
    for key, value in limits.items():
        print(f"   {key}: {value}")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    print("\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ –≥—Ä–∞—Ñ–∏–∫–∞...")
    test_signal_data = {
        'current_price': 1.18500,
        'direction': 'BUY',
        'rsi': 65.2,
        'ema_21': 1.18200,
        'bb_upper': 1.18800,
        'bb_lower': 1.18000,
        'bb_middle': 1.18400,
        'macd': 0.0012,
        'macd_signal': 0.0008
    }
    
    chart_path = chart_gen.generate_chart("EUR/USD", test_signal_data)
    if chart_path:
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω: {chart_path}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    test_chart_generator()
