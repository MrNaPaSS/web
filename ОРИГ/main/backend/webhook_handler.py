"""
Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è CryptoBot
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

from flask import Flask, request, jsonify
import json
import logging
from crypto_bot_payment import CryptoBotPayment, MLModelSubscription

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CRYPTO_BOT_TOKEN = "YOUR_CRYPTO_BOT_TOKEN_HERE"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
crypto_bot = CryptoBotPayment(CRYPTO_BOT_TOKEN)
subscription_manager = MLModelSubscription(crypto_bot)


@app.route('/webhook/cryptobot', methods=['POST'])
def cryptobot_webhook():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç CryptoBot
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        signature = request.headers.get('crypto-pay-api-signature')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = request.get_data(as_text=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if not crypto_bot.verify_webhook(signature, body):
            logger.error("–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
            return jsonify({"error": "Invalid signature"}), 403
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        data = request.get_json()
        update_type = data.get('update_type')
        payload = data.get('payload')
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {update_type}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if update_type == 'invoice_paid':
            # –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω
            handle_invoice_paid(payload)
        
        elif update_type == 'invoice_expired':
            # –ò–Ω–≤–æ–π—Å –∏—Å—Ç—ë–∫
            handle_invoice_expired(payload)
        
        return jsonify({"ok": True}), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({"error": str(e)}), 500


def handle_invoice_paid(invoice_data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    """
    try:
        invoice_id = invoice_data.get('invoice_id')
        amount = invoice_data.get('amount')
        asset = invoice_data.get('asset')
        payload = invoice_data.get('payload', '')
        
        logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω: {invoice_id}, {amount} {asset}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ subscription_manager
        result = subscription_manager.process_payment(invoice_data)
        
        if result.get('ok'):
            user_id = result['user_id']
            model_id = result['model_id']
            subscription_type = result['subscription_type']
            
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: User {user_id}, Model {model_id}")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
            # - –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            # - –û—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            # - –û—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
            # - –ê–∫—Ç–∏–≤–∞—Ü–∏—é –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª–∏
            
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {result.get('error')}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")


def handle_invoice_expired(invoice_data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç—ë–∫—à–µ–≥–æ –∏–Ω–≤–æ–π—Å–∞
    """
    try:
        invoice_id = invoice_data.get('invoice_id')
        logger.info(f"‚è∞ –ò–Ω–≤–æ–π—Å –∏—Å—Ç—ë–∫: {invoice_id}")
        
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç—ë–∫—à–µ–≥–æ –∏–Ω–≤–æ–π—Å–∞: {e}")


@app.route('/health', methods=['GET'])
def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    """
    return jsonify({"status": "ok", "service": "CryptoBot Webhook Handler"}), 200


@app.route('/test', methods=['GET'])
def test_connection():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CryptoBot
    """
    try:
        me = crypto_bot.get_me()
        if me.get('ok'):
            return jsonify({
                "status": "connected",
                "app_id": me['result']['app_id'],
                "name": me['result']['name']
            }), 200
        else:
            return jsonify({
                "status": "error",
                "error": me.get('error')
            }), 500
    except Exception as e:
        return jsonify({
            "status": "error",
            "error": str(e)
        }), 500


if __name__ == '__main__':
    # –í–ê–ñ–ù–û: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Gunicorn –∏–ª–∏ uWSGI
    # gunicorn -w 4 -b 0.0.0.0:5000 webhook_handler:app
    
    logger.info("üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    app.run(host='0.0.0.0', port=5000, debug=False)

