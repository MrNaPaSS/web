#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç OTC –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
"""

import asyncio
from fixed_comprehensive_analysis import FixedComprehensiveAnalysis

async def test_otc_generator():
    """–¢–µ—Å—Ç OTC –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OTC –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è OTC
        analyzer = FixedComprehensiveAnalysis(asset_type="otc")
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
        symbols = ["EUR/USD OTC", "GBP/USD OTC"]
        signals = await analyzer.generate_ultra_precise_signals(symbols, max_signals=1)
        
        if signals:
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤:")
            for signal in signals:
                print(f"   {signal['pair']} {signal['direction']}: {signal['composite_score']:.1f}%")
        else:
            print("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    result = asyncio.run(test_otc_generator())
    if result:
        print("üéâ OTC –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("üí• OTC –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
