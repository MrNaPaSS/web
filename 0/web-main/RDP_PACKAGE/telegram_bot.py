#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª–æ–≤
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ Twelvedata API
"""

import asyncio
import logging
import json
import time
from datetime import datetime
from typing import List, Dict
import os

# Telegram Bot API
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
from signal_generator import SignalGenerator, ForexSignal
from config import BotConfig
from market_schedule import MarketSchedule
from access_requests import access_manager, AccessRequest
from powerful_otc_generator import PowerfulOTCGenerator, PowerfulOTCSignal
from chart_generator import ChartGenerator
from signal_statistics import signal_statistics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramSignalBot:
    """Telegram –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, bot_token: str, twelvedata_api_key: str):
        self.bot_token = bot_token
        self.twelvedata_api_key = twelvedata_api_key
        self.web_app_url = "https://app.nomoneynohoney.online"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_generator = SignalGenerator(twelvedata_api_key)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ú–û–©–ù–û–ì–û –û–¢–° –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (24/7)
        self.otc_generator = PowerfulOTCGenerator()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.chart_generator = ChartGenerator()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä—ã–Ω–∫–∞
        self.market_schedule = MarketSchedule()
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
        self.last_signal_time = {}  # {user_id: timestamp}
        self.last_bulk_signal_time = {}  # {user_id: timestamp} –¥–ª—è –¢–û–ü-3 —Å–∏–≥–Ω–∞–ª–æ–≤
        self.last_top3_generation = {}  # {user_id: timestamp} –¥–ª—è –¢–û–ü-3 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (10 –º–∏–Ω—É—Ç)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
        self.active_signals = {}  # {user_id: {signal_data, message_id}}
        
        # –†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ (–±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é)
        self.pending_trade_results = {}  # {user_id: [signal_ids]} - –æ–∂–∏–¥–∞—é—â–∏–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ô –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        self.pending_trade_timers = {}  # {user_id: {signal_id: expiry_time}} - –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (–æ–±—â–∞—è)
        self.signal_stats = {
            'forex_single': 0,      # –û–¥–∏–Ω–æ—á–Ω—ã–µ –§–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª—ã
            'forex_bulk': 0,        # –¢–û–ü-3 –§–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª—ã
            'otc_single': 0,        # –û–¥–∏–Ω–æ—á–Ω—ã–µ –û–¢–° —Å–∏–≥–Ω–∞–ª—ã  
            'otc_bulk': 0,          # –¢–û–ü-3 –û–¢–° —Å–∏–≥–Ω–∞–ª—ã
            'total': 0              # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        self.user_signal_stats = {}  # {user_id: {forex_single: 0, forex_bulk: 0, otc_single: 0, otc_bulk: 0, total: 0}}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        self.user_trade_results = {}  # {user_id: {success: 0, failure: 0, total_trades: 0, win_rate: 0.0}}
        
        # –ö—É–ª–¥–∞—É–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ (3 —Å–µ–∫—É–Ω–¥—ã)
        self.last_timer_update = {}  # {user_id: timestamp}
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤
        self.auto_update_active = {}  # {user_id: {signal_id, message_id, chat_id}}
        
        # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.authorized_users = BotConfig.AUTHORIZED_USERS
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._setup_handlers()
        
        logger.info("‚úÖ TelegramSignalBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("market", self.market_command))
        self.application.add_handler(CommandHandler("adduser", self.add_user_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self._commands_set = False
    
    async def _set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        commands = [
            BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("help", "‚ùì –ü–æ–º–æ—â—å"),
            BotCommand("market", "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"),
        ]
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å
        admin_commands = [
            BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("help", "‚ùì –ü–æ–º–æ—â—å"),
            BotCommand("market", "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"),
            BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
            BotCommand("adduser", "üë• –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        ]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö (–±–∞–∑–æ–≤—ã–µ)
        await self.application.bot.set_my_commands(commands)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∞—Å
        try:
            await self.application.bot.set_my_commands(
                admin_commands,
                scope={"type": "chat", "chat_id": BotConfig.ADMIN_ID}
            )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    def _check_authorization(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user_id in self.authorized_users
    
    def _check_expired_trades(self, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫ - –æ–Ω–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ —É–¥–∞–ª—è–µ—Ç —Å–¥–µ–ª–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        # –°–¥–µ–ª–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–∞—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        pass
    
    def _is_signal_ready_for_feedback(self, user_id: int, signal_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤ –ª–∏ —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏)"""
        if user_id not in self.pending_trade_timers:
            return False
        
        if signal_id not in self.pending_trade_timers[user_id]:
            return False
            
        current_time = time.time()
        expiry_time = self.pending_trade_timers[user_id][signal_id]
        
        # –°–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
        return current_time >= expiry_time
    
    def _increment_signal_stats(self, signal_type: str, user_id: int, count: int = 1):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (–æ–±—â–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ)"""
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if signal_type in self.signal_stats:
            self.signal_stats[signal_type] += count
            self.signal_stats['total'] += count
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if user_id not in self.user_signal_stats:
            self.user_signal_stats[user_id] = {
                'forex_single': 0,
                'forex_bulk': 0,
                'otc_single': 0,
                'otc_bulk': 0,
                'total': 0
            }
        
        if signal_type in self.user_signal_stats[user_id]:
            self.user_signal_stats[user_id][signal_type] += count
            self.user_signal_stats[user_id]['total'] += count
    
    def _add_trade_result(self, user_id: int, feedback: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_trade_results:
            self.user_trade_results[user_id] = {
                'success': 0,
                'failure': 0,
                'total_trades': 0,
                'win_rate': 0.0
            }
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç—á–∏–∫
        if feedback == "success":
            self.user_trade_results[user_id]['success'] += 1
        elif feedback == "failure":
            self.user_trade_results[user_id]['failure'] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        self.user_trade_results[user_id]['total_trades'] += 1
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥
        total = self.user_trade_results[user_id]['total_trades']
        success = self.user_trade_results[user_id]['success']
        self.user_trade_results[user_id]['win_rate'] = (success / total * 100) if total > 0 else 0.0
    
    async def _start_auto_timer_update(self, user_id: int, signal_id: str, chat_id: int, message_id: int):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
        self.auto_update_active[user_id] = {
            'signal_id': signal_id,
            'message_id': message_id,
            'chat_id': chat_id
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        asyncio.create_task(self._auto_update_timer_loop(user_id))
    
    async def _auto_update_timer_loop(self, user_id: int):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞"""
        try:
            while user_id in self.auto_update_active:
                await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞
                if user_id not in self.pending_trade_results:
                    break
                
                update_info = self.auto_update_active[user_id]
                signal_id = update_info['signal_id']
                message_id = update_info['message_id']
                chat_id = update_info['chat_id']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ —Å–∏–≥–Ω–∞–ª –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                if self._is_signal_ready_for_feedback(user_id, signal_id):
                    # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                    if signal_id in self.pending_signals:
                        signal_data = self.pending_signals[signal_id]
                        
                        try:
                            await self.application.bot.edit_message_text(
                                chat_id=chat_id,
                                message_id=message_id,
                                text=(
                                    f"‚úÖ <b>–í–†–ï–ú–Ø –ò–°–¢–ï–ö–õ–û - –£–ö–ê–ñ–ò–¢–ï –†–ï–ó–£–õ–¨–¢–ê–¢</b>\n\n"
                                    f"üìä <b>–ü–∞—Ä–∞:</b> {signal_data['pair']}\n"
                                    f"üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {signal_data['direction']}\n"
                                    f"üéØ <b>–°–∫–æ—Ä:</b> {signal_data['confidence'] * 100 if signal_data['confidence'] <= 1 else signal_data['confidence']:.1f}%\n"
                                    f"‚è∞ <b>–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è:</b> {signal_data['expiration']} –º–∏–Ω\n\n"
                                    f"üéØ <b>–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>"
                                ),
                                parse_mode=ParseMode.HTML,
                                reply_markup=InlineKeyboardMarkup([
                                    [
                                        InlineKeyboardButton("‚úÖ –í–´–ò–ì–†–ê–®", callback_data=f"feedback_success_{signal_id}"),
                                        InlineKeyboardButton("‚ùå –ü–†–û–ò–ì–†–ê–®", callback_data=f"feedback_failure_{signal_id}")
                                    ]
                                ])
                            )
                        except:
                            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    break
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
                    if (user_id in self.pending_trade_timers and 
                        signal_id in self.pending_trade_timers[user_id] and
                        signal_id in self.pending_signals):
                        
                        signal_data = self.pending_signals[signal_id]
                        expiry_time = self.pending_trade_timers[user_id][signal_id]
                        current_time = time.time()
                        remaining_seconds = max(0, int(expiry_time - current_time))
                        remaining_minutes = remaining_seconds // 60
                        remaining_seconds = remaining_seconds % 60
                        
                        expiry_datetime = datetime.fromtimestamp(expiry_time)
                        expiry_time_str = expiry_datetime.strftime('%H:%M:%S')
                        
                        try:
                            await self.application.bot.edit_message_text(
                                chat_id=chat_id,
                                message_id=message_id,
                                text=(
                                    f"üîí <b>–°–î–ï–õ–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê</b>\n\n"
                                    f"üìä <b>–ü–∞—Ä–∞:</b> {signal_data['pair']}\n"
                                    f"üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {signal_data['direction']}\n"
                                    f"üéØ <b>–°–∫–æ—Ä:</b> {signal_data['confidence'] * 100 if signal_data['confidence'] <= 1 else signal_data['confidence']:.1f}%\n"
                                    f"‚è∞ <b>–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è:</b> {signal_data['expiration']} –º–∏–Ω\n\n"
                                    f"üö´ <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {expiry_time_str}</b>\n"
                                    f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å: {remaining_minutes}–º {remaining_seconds}—Å</b>\n\n"
                                    f"üîò <b>–ö–Ω–æ–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç–∞–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤ {expiry_time_str}</b>\n"
                                    f"üí° –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏"
                                ),
                                parse_mode=ParseMode.HTML,
                                reply_markup=InlineKeyboardMarkup([
                                    [
                                        InlineKeyboardButton("‚ö™ –í—ã–∏–≥—Ä–∞—à (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data=f"feedback_success_{signal_id}"),
                                        InlineKeyboardButton("‚ö™ –ü—Ä–æ–∏–≥—Ä–∞—à (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data=f"feedback_failure_{signal_id}")
                                    ],
                                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="show_pending_trades")]
                                ])
                            )
                        except:
                            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è {user_id}: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if user_id in self.auto_update_active:
                del self.auto_update_active[user_id]

    def _remove_pending_trade(self, user_id: int, signal_id: str):
        """–£–¥–∞–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        if user_id in self.pending_trade_results:
            if signal_id in self.pending_trade_results[user_id]:
                self.pending_trade_results[user_id].remove(signal_id)
        
        if user_id in self.pending_trade_timers:
            if signal_id in self.pending_trade_timers[user_id]:
                del self.pending_trade_timers[user_id][signal_id]
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        if user_id in self.auto_update_active:
            del self.auto_update_active[user_id]
        
        # –ï—Å–ª–∏ –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        if user_id in self.pending_trade_results and not self.pending_trade_results[user_id]:
            del self.pending_trade_results[user_id]
            
        if user_id in self.pending_trade_timers and not self.pending_trade_timers[user_id]:
            del self.pending_trade_timers[user_id]
    
    def _add_pending_trade(self, user_id: int, signal_id: str, expiration_minutes: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ —Ä–µ–∂–∏–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ô –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é)"""
        if user_id not in self.pending_trade_results:
            self.pending_trade_results[user_id] = []
        if user_id not in self.pending_trade_timers:
            self.pending_trade_timers[user_id] = {}
            
        self.pending_trade_results[user_id].append(signal_id)
        
        # –í—Ä–µ–º—è –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å = —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
        expiry_time = time.time() + (expiration_minutes * 60)
        self.pending_trade_timers[user_id][signal_id] = expiry_time
    
    async def _handle_show_pending_trades(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–æ–∫ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        user_id = query.from_user.id
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ (3 —Å–µ–∫—É–Ω–¥—ã)
        if user_id in self.last_timer_update:
            time_passed = current_time - self.last_timer_update[user_id]
            if time_passed < 3:  # 3 —Å–µ–∫—É–Ω–¥—ã –∫—É–ª–¥–∞—É–Ω
                remaining = 3 - time_passed
                await query.answer(
                    f"‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining:.0f}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º",
                    show_alert=True
                )
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
        self.last_timer_update[user_id] = current_time
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —ç–∫—Ä–∞–Ω —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º
        if (user_id in self.pending_trade_results and 
            len(self.pending_trade_results[user_id]) == 1):
            
            signal_id = self.pending_trade_results[user_id][0]
            
            if signal_id in self.pending_signals:
                signal_data = self.pending_signals[signal_id]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                if self._is_signal_ready_for_feedback(user_id, signal_id):
                    # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                    await query.edit_message_text(
                        f"‚úÖ <b>–í–†–ï–ú–Ø –ò–°–¢–ï–ö–õ–û - –£–ö–ê–ñ–ò–¢–ï –†–ï–ó–£–õ–¨–¢–ê–¢</b>\n\n"
                        f"üìä <b>–ü–∞—Ä–∞:</b> {signal_data['pair']}\n"
                        f"üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {signal_data['direction']}\n"
                        f"üéØ <b>–°–∫–æ—Ä:</b> {signal_data['confidence'] * 100 if signal_data['confidence'] <= 1 else signal_data['confidence']:.1f}%\n"
                        f"‚è∞ <b>–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è:</b> {signal_data['expiration']} –º–∏–Ω\n\n"
                        f"üéØ <b>–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>",
                        parse_mode=ParseMode.HTML,
                        reply_markup=InlineKeyboardMarkup([
                            [
                                InlineKeyboardButton("‚úÖ –í–´–ò–ì–†–ê–®", callback_data=f"feedback_success_{signal_id}"),
                                InlineKeyboardButton("‚ùå –ü–†–û–ò–ì–†–ê–®", callback_data=f"feedback_failure_{signal_id}")
                            ],
                            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_pending_trades")]
                        ])
                    )
                    return
                else:
                    # –í—Ä–µ–º—è –µ—â—ë –Ω–µ –∏—Å—Ç–µ–∫–ª–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä
                    if user_id in self.pending_trade_timers and signal_id in self.pending_trade_timers[user_id]:
                        expiry_time = self.pending_trade_timers[user_id][signal_id]
                        current_time = time.time()
                        remaining_seconds = max(0, int(expiry_time - current_time))
                        remaining_minutes = remaining_seconds // 60
                        remaining_seconds = remaining_seconds % 60
                        
                        expiry_datetime = datetime.fromtimestamp(expiry_time)
                        expiry_time_str = expiry_datetime.strftime('%H:%M:%S')
                        
                        await query.edit_message_text(
                            f"üîí <b>–°–î–ï–õ–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê</b>\n\n"
                            f"üìä <b>–ü–∞—Ä–∞:</b> {signal_data['pair']}\n"
                            f"üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {signal_data['direction']}\n"
                            f"üéØ <b>–°–∫–æ—Ä:</b> {signal_data['confidence'] * 100 if signal_data['confidence'] <= 1 else signal_data['confidence']:.1f}%\n"
                            f"‚è∞ <b>–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è:</b> {signal_data['expiration']} –º–∏–Ω\n\n"
                            f"üö´ <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {expiry_time_str}</b>\n"
                            f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å: {remaining_minutes}–º {remaining_seconds}—Å</b>\n\n"
                            f"üîò <b>–ö–Ω–æ–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç–∞–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤ {expiry_time_str}</b>\n"
                            f"üí° –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏",
                            parse_mode=ParseMode.HTML,
                            reply_markup=InlineKeyboardMarkup([
                                [
                                    InlineKeyboardButton("‚ö™ –í—ã–∏–≥—Ä–∞—à (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data=f"feedback_success_{signal_id}"),
                                    InlineKeyboardButton("‚ö™ –ü—Ä–æ–∏–≥—Ä–∞—à (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data=f"feedback_failure_{signal_id}")
                                ],
                                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="show_pending_trades")]
                            ])
                        )
                        return
        
        if user_id not in self.pending_trade_results or not self.pending_trade_results[user_id]:
            try:
                await query.edit_message_text(
                    "‚úÖ <b>–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–¥–µ–ª–æ–∫</b>\n\n"
                    "–í—Å–µ –≤–∞—à–∏ —Å–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.\n"
                    "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –±–æ—Ç—É.",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '–Ω–µ—Ç —Å–¥–µ–ª–æ–∫': {e}")
                try:
                    await query.message.reply_text(
                        "‚úÖ <b>–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–¥–µ–ª–æ–∫</b>\n\n"
                        "–í—Å–µ –≤–∞—à–∏ —Å–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.\n"
                        "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –±–æ—Ç—É.",
                        parse_mode=ParseMode.HTML,
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                        ])
                    )
                except:
                    pass
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–¥–µ–ª–æ–∫
        pending_text = "‚è≥ <b>–°–¥–µ–ª–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏:</b>\n\n"
        current_time = time.time()
        ready_count = 0
        
        for i, signal_id in enumerate(self.pending_trade_results[user_id], 1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–≥–Ω–∞–ª–µ
            if hasattr(self, 'pending_signals') and signal_id in self.pending_signals:
                signal_data = self.pending_signals[signal_id]
                pair = signal_data['pair']
                direction = signal_data['direction']
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
                if user_id in self.pending_trade_timers and signal_id in self.pending_trade_timers[user_id]:
                    expiry_time = self.pending_trade_timers[user_id][signal_id]
                    remaining_seconds = max(0, int(expiry_time - current_time))
                    
                    if remaining_seconds > 0:
                        remaining_minutes = remaining_seconds // 60
                        remaining_seconds = remaining_seconds % 60
                        
                        pending_text += f"{i}. ‚è∞ <b>{pair}</b> - {direction}\n"
                        pending_text += f"   üïí –î–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {remaining_minutes}–º {remaining_seconds}—Å\n\n"
                    else:
                        pending_text += f"{i}. ‚úÖ <b>{pair}</b> - {direction}\n"
                        pending_text += f"   üéØ –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!\n\n"
                        ready_count += 1
                else:
                    pending_text += f"{i}. üìä <b>{pair}</b> - {direction}\n"
                    pending_text += f"   ‚è∞ –û–∂–∏–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\n"
            else:
                pending_text += f"{i}. üìä –°–∏–≥–Ω–∞–ª #{signal_id[-8:]}\n"
                pending_text += f"   ‚è∞ –û–∂–∏–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        keyboard_buttons = []
        
        if ready_count > 0:
            pending_text += f"üéØ <b>{ready_count} —Å–∏–≥–Ω–∞–ª–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!</b>\n"
            pending_text += "–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫:"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            for signal_id in self.pending_trade_results[user_id]:
                if self._is_signal_ready_for_feedback(user_id, signal_id):
                    if hasattr(self, 'pending_signals') and signal_id in self.pending_signals:
                        signal_data = self.pending_signals[signal_id]
                        pair = signal_data['pair']
                        direction = signal_data['direction']
                        
                        keyboard_buttons.append([
                            InlineKeyboardButton(f"‚úÖ {pair} {direction} - –£–°–ü–ï–•", callback_data=f"feedback_success_{signal_id}"),
                            InlineKeyboardButton(f"‚ùå {pair} {direction} - –ü–†–û–í–ê–õ", callback_data=f"feedback_failure_{signal_id}")
                        ])
        else:
            pending_text += "‚è∞ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
        keyboard_buttons.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_pending_trades")])
        
        try:
            await query.edit_message_text(
                pending_text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard_buttons)
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Ç–æ –∂–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–¥–µ–ª–æ–∫: {e}")
            try:
                await query.message.reply_text(
                    pending_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup(keyboard_buttons)
                )
            except:
                pass

    async def _handle_refresh_signal_cooldown(self, query):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∫—É–ª–¥–∞—É–Ω–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π —Ñ–æ—Ä–µ–∫—Å-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (30 —Å–µ–∫)"""
        try:
            user_id = query.from_user.id
            current_time = time.time()
            cooldown = BotConfig.SIGNAL_SETTINGS.get("signal_cooldown", 30)

            remaining = 0
            if user_id in self.last_signal_time:
                time_passed = current_time - self.last_signal_time[user_id]
                if time_passed < cooldown:
                    remaining = cooldown - time_passed

            if remaining > 0:
                minutes = int(remaining // 60)
                seconds = int(remaining % 60)
                await query.edit_message_text(
                    f"‚è∞ <b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–∞—Ä—É</b>\n\n"
                    f"üïí –û—Å—Ç–∞–ª–æ—Å—å: {minutes}–º {seconds}—Å\n\n"
                    f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                    f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É\n"
                    f"‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π\n\n"
                    f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É —Å –ª—É—á—à–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="refresh_signal_cooldown")],
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
            else:
                # –ö—É–ª–¥–∞—É–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã
                await query.edit_message_text(
                    "‚úÖ <b>–ö—É–ª–¥–∞—É–Ω –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–∞—Ä—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞:",
                    parse_mode=ParseMode.HTML,
                    reply_markup=self._get_pairs_keyboard()
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        if not self._check_authorization(user_id):
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø
            user = update.effective_user
            request_created = access_manager.add_request(
                user_id=user_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            if request_created:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                await self._notify_admin_new_request(user)
                
                await update.message.reply_text(
                    "üìù <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                    "üîÑ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n"
                    "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.\n\n"
                    "üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @kaktotakxm",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    "‚è≥ <b>–í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏</b>\n\n"
                    "üîÑ –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ.\n"
                    "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.\n\n"
                    "üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @kaktotakxm",
                    parse_mode=ParseMode.HTML
                )
            return
        
        welcome_text = BotConfig.MESSAGES["welcome"]
        
        keyboard = self._get_main_keyboard(user_id)
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_id = update.effective_user.id
        
        if not self._check_authorization(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        help_text = (
            "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
            "üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ <code>üìä –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª</code> - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã\n"
            "‚Ä¢ <code>üìà –ú–∞—Å—Å–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã</code> - —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä\n"
            "‚Ä¢ <code>üí± –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã</code> - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä\n"
            "‚Ä¢ <code>‚öôÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</code> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ API\n\n"
            "üîπ <b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:</b>\n"
            "‚Ä¢ <b>BUY</b> üü¢ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞\n"
            "‚Ä¢ <b>SELL</b> üî¥ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–∞–∂–∞\n"
            "‚Ä¢ <b>Confidence</b> - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–∏–≥–Ω–∞–ª–µ (0-100%)\n\n"
            "üîπ <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>\n"
            "‚Ä¢ RSI - –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã\n"
            "‚Ä¢ EMA - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è\n"
            "‚Ä¢ Bollinger Bands - –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞\n"
            "‚Ä¢ MACD - —Å—Ö–æ–∂–¥–µ–Ω–∏–µ-—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö\n\n"
            "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –°–∏–≥–Ω–∞–ª—ã –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. "
            "–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ.\n\n"
            "üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @kaktotakxm"
        )
        
        keyboard = self._get_main_keyboard(user_id)
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        
        if not self._check_authorization(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        if user_id != BotConfig.ADMIN_ID:
            await update.message.reply_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç—É—Å—É —Å–∏—Å—Ç–µ–º—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å API
            api_status = self.signal_generator.get_api_status()
            supported_pairs = self.signal_generator.get_supported_pairs()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
            request_stats = access_manager.get_statistics()
            
            status_text = (
                "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤</b>\n\n"
                f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"üí± <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä:</b> {len(supported_pairs)}\n"
                f"üë• <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(BotConfig.AUTHORIZED_USERS)}\n\n"
                f"üìù <b>–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ—Å—Ç—É–ø:</b>\n"
                f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {request_stats['pending']}\n"
                f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {request_stats['approved']}\n"
                f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {request_stats['rejected']}\n\n"
                "üîó <b>–°—Ç–∞—Ç—É—Å API:</b>\n"
            )
            
            for api_name, status in api_status.items():
                status_emoji = "‚úÖ" if status['can_request'] else "‚ùå"
                status_text += (
                    f"{status_emoji} <b>{api_name.upper()}</b>\n"
                    f"   –ó–∞–ø—Ä–æ—Å—ã –≤ –º–∏–Ω—É—Ç—É: {status['minute_requests']}\n"
                    f"   –ó–∞–ø—Ä–æ—Å—ã –≤ –¥–µ–Ω—å: {status['day_requests']}\n\n"
                )
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
            keyboard = []
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            if request_stats['pending'] > 0:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã ({request_stats['pending']})", 
                        callback_data="show_all_requests"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                status_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def pairs_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pairs"""
        user_id = update.effective_user.id
        
        if not self._check_authorization(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        try:
            supported_pairs = self.signal_generator.get_supported_pairs()
            
            pairs_text = (
                "üí± <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã</b>\n\n"
                f"üìä –í—Å–µ–≥–æ –ø–∞—Ä: {len(supported_pairs)}\n\n"
            )
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            major_pairs = ["EUR/USD", "GBP/USD", "USD/JPY", "USD/CHF"]
            minor_pairs = ["AUD/USD", "USD/CAD", "NZD/USD"]
            cross_pairs = ["EUR/GBP", "GBP/JPY", "AUD/CAD", "EUR/JPY", "CHF/JPY"]
            
            pairs_text += "üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã:</b>\n"
            for pair in major_pairs:
                if pair in supported_pairs:
                    pairs_text += f"‚Ä¢ {pair}\n"
            
            pairs_text += "\nüî∏ <b>–í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã:</b>\n"
            for pair in minor_pairs:
                if pair in supported_pairs:
                    pairs_text += f"‚Ä¢ {pair}\n"
            
            pairs_text += "\nüîπ <b>–ö—Ä–æ—Å—Å-–ø–∞—Ä—ã:</b>\n"
            for pair in cross_pairs:
                if pair in supported_pairs:
                    pairs_text += f"‚Ä¢ {pair}\n"
            
            keyboard = self._get_main_keyboard()
            
            await update.message.reply_text(
                pairs_text,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def market_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /market"""
        user_id = update.effective_user.id
        
        if not self._check_authorization(user_id):
            await update.message.reply_text(BotConfig.MESSAGES["unauthorized"])
            return
        
        try:
            market_message = self.market_schedule.get_market_message()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏–≥–Ω–∞–ª–∞–º
            if self.market_schedule.is_market_open():
                keyboard = [
                    [InlineKeyboardButton("üèÜ –ü–æ–ª—É—á–∏—Ç—å –¢–û–ü-3 —Å–∏–≥–Ω–∞–ª–∞", callback_data="bulk_signals")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
            else:
                keyboard = [
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                market_message,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä—ã–Ω–∫–∞: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä—ã–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def add_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        if user_id != BotConfig.ADMIN_ID:
            await update.message.reply_text(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text(
                "üìù <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "<code>/adduser 123456789</code>\n\n"
                "üí° <b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
                "1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "2. –í –ª–æ–≥–∞—Ö –ø–æ—è–≤–∏—Ç—Å—è –µ–≥–æ ID\n"
                "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –≤ –∫–æ–º–∞–Ω–¥–µ",
                parse_mode=ParseMode.HTML
            )
            return
        
        try:
            new_user_id = int(context.args[0])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            BotConfig.AUTHORIZED_USERS.add(new_user_id)
            
            await update.message.reply_text(
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üë§ ID: <code>{new_user_id}</code>\n"
                f"üë• –í—Å–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö: {len(BotConfig.AUTHORIZED_USERS)}\n\n"
                f"üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.\n"
                f"‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤—É—é—Ç –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.",
                parse_mode=ParseMode.HTML
            )
            
            logger.info(f"üë• –ê–¥–º–∏–Ω {user_id} –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_user_id}")
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/adduser 123456789</code>",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _notify_admin_new_request(self, user):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
        try:
            user_display = f"{user.first_name or ''} {user.last_name or ''}".strip()
            if not user_display:
                user_display = "–ë–µ–∑ –∏–º–µ–Ω–∏"
            
            username_info = f"@{user.username}" if user.username else "–ù–µ—Ç username"
            
            notification_text = (
                f"üîî <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø!</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_display}\n"
                f"üÜî <b>Username:</b> {username_info}\n"
                f"üî¢ <b>ID:</b> <code>{user.id}</code>\n"
                f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{user.id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user.id}")
                ],
                [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="show_all_requests")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.application.bot.send_message(
                chat_id=BotConfig.ADMIN_ID,
                text=notification_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
            
            logger.info(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ {user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    
    async def _handle_approve_request(self, query, request_user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        if query.from_user.id != BotConfig.ADMIN_ID:
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
            request = access_manager.get_request(request_user_id)
            if not request:
                await query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –û–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
            access_manager.approve_request(request_user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
            BotConfig.AUTHORIZED_USERS.add(request_user_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
            await self._notify_user_approved(request_user_id, request.get_user_display_name())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await query.edit_message_text(
                f"‚úÖ <b>–ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.get_user_display_name()}\n"
                f"üî¢ ID: <code>{request_user_id}</code>\n"
                f"üïí –í—Ä–µ–º—è –æ–¥–æ–±—Ä–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.",
                parse_mode=ParseMode.HTML
            )
            
            logger.info(f"‚úÖ –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä–∏–ª –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request_user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.")
    
    async def _handle_reject_request(self, query, request_user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        if query.from_user.id != BotConfig.ADMIN_ID:
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
            request = access_manager.get_request(request_user_id)
            if not request:
                await query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            access_manager.reject_request(request_user_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            await self._notify_user_rejected(request_user_id, request.get_user_display_name())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await query.edit_message_text(
                f"‚ùå <b>–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω!</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.get_user_display_name()}\n"
                f"üî¢ ID: <code>{request_user_id}</code>\n"
                f"üïí –í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.",
                parse_mode=ParseMode.HTML
            )
            
            logger.info(f"‚ùå –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request_user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.")
    
    async def _notify_user_approved(self, user_id: int, user_name: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏"""
        try:
            await self.application.bot.send_message(
                chat_id=user_id,
                text=(
                    f"üéâ <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!</b>\n\n"
                    f"‚úÖ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª–æ–≤.\n"
                    f"üöÄ –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.\n\n"
                    f"üí° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
                ),
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def _notify_user_rejected(self, user_id: int, user_name: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏"""
        try:
            await self.application.bot.send_message(
                chat_id=user_id,
                text=(
                    f"‚ùå <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
                    f"üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.\n"
                    f"üìû –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å: @kaktotakxm\n\n"
                    f"üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
                ),
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def _handle_show_all_requests(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        if query.from_user.id != BotConfig.ADMIN_ID:
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            pending_requests = access_manager.get_pending_requests()
            
            if not pending_requests:
                await query.edit_message_text(
                    "üìã <b>–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ—Å—Ç—É–ø</b>\n\n"
                    "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                    "üí° –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="show_status")
                    ]])
                )
                return
            
            requests_text = f"üìã <b>–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã ({len(pending_requests)})</b>\n\n"
            
            keyboard = []
            for i, request in enumerate(pending_requests, 1):
                requests_text += (
                    f"{i}. üë§ <b>{request.get_user_display_name()}</b>\n"
                    f"   üî¢ ID: <code>{request.user_id}</code>\n"
                    f"   üïí –í—Ä–µ–º—è: {request.get_request_time_str()}\n\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                keyboard.append([
                    InlineKeyboardButton(f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å #{i}", callback_data=f"approve_{request.user_id}"),
                    InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å #{i}", callback_data=f"reject_{request.user_id}")
                ])
            
            keyboard.append([InlineKeyboardButton("üîô –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="show_status")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                requests_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="show_status")
                ]])
            )
    
    async def _handle_show_users(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        if query.from_user.id != BotConfig.ADMIN_ID:
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            authorized_users = list(BotConfig.AUTHORIZED_USERS)
            
            if not authorized_users:
                await query.edit_message_text(
                    "üë• <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
                    "‚ùå –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="show_status")
                    ]])
                )
                return
            
            users_text = f"üë• <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(authorized_users)})</b>\n\n"
            
            keyboard = []
            
            for i, user_id in enumerate(authorized_users, 1):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
                if user_id == BotConfig.ADMIN_ID:
                    role = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                    users_text += f"{i}. üëë <b>ID:</b> <code>{user_id}</code> (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)\n"
                else:
                    role = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    users_text += f"{i}. üë§ <b>ID:</b> <code>{user_id}</code>\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
                    keyboard.append([
                        InlineKeyboardButton(
                            f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #{i}", 
                            callback_data=f"remove_user_{user_id}"
                        )
                    ])
            
            users_text += f"\nüí° –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—Ä–æ–º–µ —Å–µ–±—è."
            
            keyboard.append([InlineKeyboardButton("üîô –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="show_status")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                users_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="show_status")
                ]])
            )
    
    async def _handle_remove_user(self, query, user_to_remove: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        if query.from_user.id != BotConfig.ADMIN_ID:
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if user_to_remove == BotConfig.ADMIN_ID:
            await query.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if user_to_remove not in BotConfig.AUTHORIZED_USERS:
                await query.edit_message_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="show_users")
                    ]])
                )
                return
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            BotConfig.AUTHORIZED_USERS.remove(user_to_remove)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._notify_user_removed(user_to_remove)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await query.edit_message_text(
                f"üóëÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"üî¢ <b>ID:</b> <code>{user_to_remove}</code>\n"
                f"üïí <b>–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è:</b> {datetime.now().strftime('%H:%M:%S')}\n"
                f"üë• <b>–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(BotConfig.AUTHORIZED_USERS)}\n\n"
                f"üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± —É–¥–∞–ª–µ–Ω–∏–∏.",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üë• –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="show_users"),
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="show_status")
                ]])
            )
            
            logger.info(f"üóëÔ∏è –ê–¥–º–∏–Ω —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_remove}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="show_users")
                ]])
            )
    
    async def _notify_user_removed(self, user_id: int):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏"""
        try:
            await self.application.bot.send_message(
                chat_id=user_id,
                text=(
                    f"üö´ <b>–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–æ–∑–≤–∞–Ω</b>\n\n"
                    f"‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–æ–∑–≤–∞–ª –≤–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.\n"
                    f"üìû –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å: @kaktotakxm\n\n"
                    f"üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø."
                ),
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    async def _handle_forex_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª–æ–≤"""
        user_id = query.from_user.id
        
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –º–µ–Ω—é —Ñ–æ—Ä–µ–∫—Å
        if user_id in self.active_signals:
            del self.active_signals[user_id]
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –§–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal"),
                InlineKeyboardButton("üèÜ –¢–û–ü-3 —Ñ–æ—Ä–µ–∫—Å", callback_data="bulk_signals")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        
        text = "üìä <b>–§–û–†–ï–ö–° –°–ò–ì–ù–ê–õ–´</b>\n\n"
        if self.market_schedule.is_market_open():
            text += "üü¢ <b>–†—ã–Ω–æ–∫ –û–¢–ö–†–´–¢</b>\n"
            text += "üí° –î–æ—Å—Ç—É–ø–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –∂–∏–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
        else:
            text += "üî¥ <b>–†—ã–Ω–æ–∫ –ó–ê–ö–†–´–¢</b>\n"
            text += "üí° –î–æ—Å—Ç—É–ø–Ω—ã –¥–µ–º–æ-—Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def _handle_otc_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤"""
        user_id = query.from_user.id
        
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –º–µ–Ω—é OTC
        if user_id in self.active_signals:
            del self.active_signals[user_id]
        
        keyboard = [
            [
                InlineKeyboardButton("‚ö° –û–¢–° —Å–∏–≥–Ω–∞–ª", callback_data="get_otc_signal"),
                InlineKeyboardButton("üèÜ –¢–û–ü-3 –û–¢–°", callback_data="bulk_otc_signals")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        
        text = "‚ö° <b>–û–¢–° –°–ò–ì–ù–ê–õ–´</b>\n\n"
        text += "üü¢ <b>–û–¢–° —Ä—ã–Ω–æ–∫ –û–¢–ö–†–´–¢ 24/7</b>\n"
        text += "üí° –î–æ—Å—Ç—É–ø–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ\n"
        text += "üìä 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö –û–¢–° –ø–∞—Ä"
            
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def _handle_get_otc_signal(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –û–¢–° –ø–∞—Ä—ã"""
        keyboard = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –û–¢–° –ø–∞—Ä (–ø–æ 2 –≤ —Ä—è–¥—É)
        otc_pairs = self.otc_generator.supported_otc_pairs
        for i in range(0, len(otc_pairs), 2):
            row = []
            for j in range(2):
                if i + j < len(otc_pairs):
                    pair = otc_pairs[i + j]
                    display_name = pair.replace(" (OTC)", "")
                    callback_data = f"otc_signal_{pair.replace('/', '_').replace(' (OTC)', '')}"
                    row.append(InlineKeyboardButton(display_name, callback_data=callback_data))
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="otc_menu")])
        
        text = "‚ö° <b>–í—ã–±–µ—Ä–∏—Ç–µ –û–¢–° –ø–∞—Ä—É:</b>\n\n"
        text += "üí° –û–¢–° –ø–∞—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç 24/7\n"
        text += "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def _handle_generate_otc_signal(self, query, pair: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –û–¢–° —Å–∏–≥–Ω–∞–ª"""
        try:
            user_id = query.from_user.id
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown (–∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏)
            if user_id in self.last_signal_time:
                time_passed = current_time - self.last_signal_time[user_id]
                cooldown = BotConfig.SIGNAL_SETTINGS["signal_cooldown"]
                
                if time_passed < cooldown:
                    remaining = cooldown - time_passed
                    minutes = int(remaining // 60)
                    seconds = int(remaining % 60)
                    
                    await query.edit_message_text(
                        f"‚è∞ <b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–∞—Ä—É</b>\n\n"
                        f"üïí –û—Å—Ç–∞–ª–æ—Å—å: {minutes}–º {seconds}—Å\n\n"
                        f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                        f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –û–¢–° –ø–∞—Ä—É\n"
                        f"‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π\n\n"
                        f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É —Å –ª—É—á—à–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!",
                        parse_mode='HTML',
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="show_pending_trades")],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –û–¢–° –º–µ–Ω—é", callback_data="otc_menu")]
                        ])
                    )
                    return
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await query.answer()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
            wait_message = await query.message.reply_text(
                "‚è≥ <b>–û–∂–∏–¥–∞–π—Ç–µ...</b>\n\n"
                "üîç –ò—â–µ–º –Ω–∞–∏–ª—É—á—à—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –¥–ª—è –û–¢–° –ø–∞—Ä—ã\n"
                "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                "üéØ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª\n\n"
                "üí° –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
                parse_mode='HTML'
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = await self.otc_generator.generate_otc_signal(pair)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏ –õ–Æ–ë–û–ô –ø–æ–ø—ã—Ç–∫–µ OTC –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–∞–∂–µ –Ω–µ—É–¥–∞—á–Ω–æ–π)
            self.last_signal_time[user_id] = current_time
            self.last_bulk_signal_time[user_id] = current_time
            
            if signal:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –°–†–ê–ó–£
                confidence_value = signal.confidence if signal.confidence <= 1 else signal.confidence / 100
                if confidence_value < 0.60:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ 60% –¥–ª—è –û–¢–°
                    await query.message.reply_text(
                        f"‚ö†Ô∏è <b>–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è {pair}</b>\n\n"
                        f"üìä –¢–µ–∫—É—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence * 100 if signal.confidence <= 1 else signal.confidence:.1f}%\n"
                        f"üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º: 60%\n\n"
                        f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                        f"‚Ä¢ –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä—É\n"
                        f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\n"
                        f"‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –ª—É—á—à–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –ø–∞—Ä–∞", callback_data="get_otc_signal")],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –û–¢–° –º–µ–Ω—é", callback_data="otc_menu")]
                        ]),
                        parse_mode='HTML'
                    )
                else:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                    signal_text = self._format_otc_signal_detailed(signal)
                    
                    # –ö–Ω–æ–ø–∫–∏ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                    signal_id = f"otc_{pair.replace('/', '_').replace(' (OTC)', '')}_{int(time.time())}"
                    keyboard = [
                        [
                            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="show_pending_trades")
                        ]
                    ]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    self._store_signal_for_feedback(signal_id, query.from_user.id, signal, "otc")
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤
                    self._increment_signal_stats('otc_single', query.from_user.id)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤)
                    confidence_value = signal.confidence if signal.confidence <= 1 else signal.confidence / 100
                    if confidence_value >= 0.60:  # –ü–æ—Ä–æ–≥ –¥–ª—è –û–¢–° 60%
                        self._add_pending_trade(query.from_user.id, signal_id, signal.duration)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π OTC —Å–∏–≥–Ω–∞–ª –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ)
                    self.active_signals[user_id] = {
                        'text': signal_text,
                        'keyboard': InlineKeyboardMarkup(keyboard),
                        'signal_data': signal,
                        'timestamp': current_time
                    }
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                    await query.message.reply_text(
                        text=signal_text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='HTML'
                    )
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                await wait_message.delete()
            else:
                await wait_message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –û–¢–° —Å–∏–≥–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="otc_menu")
                    ]]),
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –û–¢–° —Å–∏–≥–Ω–∞–ª–∞: {e}")
            try:
                await query.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="otc_menu")
                    ]])
                )
            except:
                pass

    def _format_otc_signal_detailed(self, signal: PowerfulOTCSignal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –û–¢–° —Å–∏–≥–Ω–∞–ª"""
        direction_emoji = {
            'BUY': 'üü¢',
            'SELL': 'üî¥', 
            'NEUTRAL': 'üü°'
        }
        
        emoji = direction_emoji.get(signal.direction, '‚ùì')
        
        text = f"{emoji} <b>–ú–û–©–ù–´–ô –û–¢–° –°–ò–ì–ù–ê–õ</b>\n\n"
        text += f"üí± <b>–ü–∞—Ä–∞:</b> {signal.pair}\n"
        text += f"üìä <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {signal.direction}\n"
        text += f"üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal.confidence * 100 if signal.confidence <= 1 else signal.confidence:.1f}%\n"
        text += f"üìà <b>–¢—Ä–µ–Ω–¥:</b> {signal.trend.upper()}\n"
        text += f"üïí <b>–í—Ä–µ–º—è:</b> {signal.timestamp.strftime('%H:%M:%S')}\n"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
        text += f"‚è∞ <b>–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è:</b> {signal.duration} –º–∏–Ω\n\n"
        
        text += "üî¨ <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (22+ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤):</b>\n"
        if hasattr(signal, 'indicators') and signal.indicators:
            if 'rsi' in signal.indicators:
                text += f"‚Ä¢ RSI: {signal.indicators['rsi']:.1f}\n"
            if 'ema_21' in signal.indicators:
                text += f"‚Ä¢ EMA(21): {signal.indicators['ema_21']:.5f}\n"
            if 'macd' in signal.indicators:
                text += f"‚Ä¢ MACD: {signal.indicators['macd']:.6f}\n"
        else:
            text += "‚Ä¢ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω\n"
        
        text += f"\n‚ö° <b>–û–¢–° —Ä–µ–∂–∏–º:</b> 24/7 —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —Ç—Ä–µ–Ω–¥–æ–≤"
        
        return text
    
    def _get_time_range(self, duration: int) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏"""
        time_ranges = {
            1: "1-2",
            2: "2-3", 
            3: "2-3",
            4: "4-5",
            5: "4-5"
        }
        return time_ranges.get(duration, f"{duration}-{duration+1}")
    
    def _store_signal_for_feedback(self, signal_id: str, user_id: int, signal, signal_type: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            if not hasattr(self, 'pending_signals'):
                self.pending_signals = {}
            
            self.pending_signals[signal_id] = {
                'user_id': user_id,
                'pair': signal.pair,
                'direction': signal.direction,
                'confidence': signal.confidence,
                'entry_price': signal.entry_price,
                'expiration': signal.duration,
                'signal_type': signal_type,
                'timestamp': signal.timestamp.isoformat()
            }
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {signal_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
    
    async def _handle_feedback(self, query, signal_id: str, feedback: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ —Å–∏–≥–Ω–∞–ª –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            if not self._is_signal_ready_for_feedback(user_id, signal_id):
                if user_id in self.pending_trade_timers and signal_id in self.pending_trade_timers[user_id]:
                    expiry_time = self.pending_trade_timers[user_id][signal_id]
                    current_time = time.time()
                    remaining_seconds = max(0, int(expiry_time - current_time))
                    remaining_minutes = remaining_seconds // 60
                    remaining_seconds = remaining_seconds % 60
                    
                    await query.answer(
                        f"‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ! –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ {remaining_minutes}–º {remaining_seconds}—Å",
                        show_alert=True
                    )
                else:
                    await query.answer("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö", show_alert=True)
                return
            
            await query.answer()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
            if not hasattr(self, 'pending_signals') or signal_id not in self.pending_signals:
                await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            signal_data = self.pending_signals[signal_id]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            success = signal_statistics.add_feedback(
                signal_id=signal_id,
                user_id=signal_data['user_id'],
                pair=signal_data['pair'],
                direction=signal_data['direction'],
                confidence=signal_data['confidence'],
                entry_price=signal_data['entry_price'],
                expiration=signal_data['expiration'],
                signal_type=signal_data['signal_type'],
                timestamp=signal_data['timestamp'],
                feedback=feedback
            )
            
            if success:
                feedback_emoji = "‚úÖ" if feedback == "success" else "‚ùå"
                feedback_text = "—É—Å–ø–µ—à–Ω–æ–π" if feedback == "success" else "–Ω–µ—É–¥–∞—á–Ω–æ–π"
                
                # –£–¥–∞–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                user_id = query.from_user.id
                self._remove_pending_trade(user_id, signal_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
                self._add_trade_result(user_id, feedback)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' —Ä–∞–±–æ—Ç–∞–ª–∞
                if user_id in self.active_signals:
                    active_signal = self.active_signals[user_id]
                    feedback_info = f"\n\n{feedback_emoji} <b>–í–∞—à –æ—Ç–∑—ã–≤:</b> {feedback_text} —Å–¥–µ–ª–∫–∞"
                    updated_text = active_signal['text'] + feedback_info
                    signal_type = signal_data.get('signal_type', 'forex')
                    back_button = InlineKeyboardButton("‚¨ÖÔ∏è –û–¢–° –º–µ–Ω—é", callback_data="otc_menu") if signal_type == 'otc' else InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                    await query.edit_message_text(
                        updated_text,
                        reply_markup=InlineKeyboardMarkup([[back_button]]),
                        parse_mode='HTML'
                    )
                    # –û—á–∏—Å—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª, —á—Ç–æ–±—ã back_to_main –±–æ–ª—å—à–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–ª —Å—Ç–∞—Ä—ã–π —ç–∫—Ä–∞–Ω
                    try:
                        del self.active_signals[user_id]
                    except KeyError:
                        pass
                else:
                    await query.edit_message_text(
                        f"{feedback_emoji} <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!</b>\n\n"
                        f"üìä –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ {feedback_text} —Å–¥–µ–ª–∫–∞.\n"
                        f"üí° –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤.\n\n"
                        f"üìà –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å!",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                        ]]),
                        parse_mode='HTML'
                    )
                    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                    try:
                        if user_id in self.active_signals:
                            del self.active_signals[user_id]
                    except Exception:
                        pass
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
                del self.pending_signals[signal_id]
                
                logger.info(f"‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {signal_data['pair']} - {feedback}")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")
    
    def _get_main_keyboard(self, user_id: int = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        keyboard = [
            [
                InlineKeyboardButton("üìä –§–æ—Ä–µ–∫—Å", callback_data="forex_menu"),
                InlineKeyboardButton("‚ö° –û–¢–°", callback_data="otc_menu")
            ],
            [
                InlineKeyboardButton("üåê Web App", web_app={'url': self.web_app_url})
            ],
            [
                InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã", callback_data="show_market"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")
            ]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if user_id and user_id in self.active_signals:
            keyboard.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="clear_signal")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if user_id == BotConfig.ADMIN_ID:
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="show_status")])
        
        return InlineKeyboardMarkup(keyboard)
    
    def _get_pairs_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
        supported_pairs = self.signal_generator.get_supported_pairs()
        
        keyboard = []
        # –ü–æ 2 –ø–∞—Ä—ã –≤ —Ä—è–¥
        for i in range(0, len(supported_pairs), 2):
            row = []
            for j in range(2):
                if i + j < len(supported_pairs):
                    pair = supported_pairs[i + j]
                    row.append(InlineKeyboardButton(
                        pair, 
                        callback_data=f"signal_{pair.replace('/', '_')}"
                    ))
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        return InlineKeyboardMarkup(keyboard)
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        
        if not self._check_authorization(user_id):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        await query.answer()
        
        data = query.data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        if not self._check_authorization(user_id):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫—Ä–æ–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏)
        if user_id in self.pending_trade_results and not data.startswith("feedback_") and not data.startswith("select_") and data != "show_pending_trades":
            pending_count = len(self.pending_trade_results[user_id])
            
            try:
                await query.edit_message_text(
                    f"üîí <b>–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨</b>\n\n"
                    f"‚ùó –ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\n"
                    f"üìä –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ {pending_count} —Å–∏–≥–Ω–∞–ª–∞–º\n"
                    f"üéØ –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –í–°–ï–• —Å–¥–µ–ª–æ–∫ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n\n"
                    f"üí° <b>–ü–æ—á–µ–º—É —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ?</b>\n"
                    f"‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                    f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
                    f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n"
                    f"‚ö†Ô∏è –ë–µ–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="show_pending_trades")]
                    ])
                )
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ –∂–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ), –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return
        
        try:
            if data == "get_signal":
                await self._handle_get_signal(query)
            elif data == "bulk_signals":
                await self._handle_bulk_signals(query)
            elif data == "show_status":
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
                if user_id != BotConfig.ADMIN_ID:
                    await query.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    return
                logger.info("üîç –í–´–ó–û–í _handle_show_status - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
                await self._handle_show_new_status(query)
            elif data == "show_help":
                await self._handle_show_help(query)
            elif data == "show_market":
                await self._handle_show_market(query)
            elif data == "back_to_main":
                await self._handle_back_to_main(query)
            elif data.startswith("signal_"):
                pair = data.replace("signal_", "").replace("_", "/")
                await self._handle_generate_signal(query, pair)
            elif data.startswith("approve_"):
                request_user_id = int(data.replace("approve_", ""))
                await self._handle_approve_request(query, request_user_id)
            elif data.startswith("reject_"):
                request_user_id = int(data.replace("reject_", ""))
                await self._handle_reject_request(query, request_user_id)
            elif data == "show_all_requests":
                await self._handle_show_all_requests(query)
            elif data == "show_users":
                await self._handle_show_users(query)
            elif data.startswith("remove_user_"):
                user_to_remove = int(data.replace("remove_user_", ""))
                await self._handle_remove_user(query, user_to_remove)
            # –ù–æ–≤—ã–µ –º–µ–Ω—é
            elif data == "forex_menu":
                await self._handle_forex_menu(query)
            elif data == "otc_menu":
                await self._handle_otc_menu(query)
            elif data == "get_otc_signal":
                await self._handle_get_otc_signal(query)
            elif data == "bulk_otc_signals":
                await self._handle_bulk_otc_signals(query)
            elif data.startswith("otc_signal_"):
                pair = data.replace("otc_signal_", "").replace("_", "/") + " (OTC)"
                await self._handle_generate_otc_signal(query, pair)
            elif data.startswith("select_otc_pair_"):
                signal_id = data.replace("select_otc_pair_", "")
                logger.info(f"üéØ –í–´–ë–û–† –û–¢–° –ü–ê–†–´: signal_id = {signal_id}")
                await self._handle_select_otc_pair(query, signal_id)
            elif data.startswith("select_forex_pair_"):
                signal_id = data.replace("select_forex_pair_", "")
                await self._handle_select_forex_pair(query, signal_id)
            elif data == "show_pending_trades":
                await self._handle_show_pending_trades(query)
            elif data == "refresh_signal_cooldown":
                await self._handle_refresh_signal_cooldown(query)
            elif data == "show_user_stats":
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
                if user_id != BotConfig.ADMIN_ID:
                    await query.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    return
                await self._handle_show_user_stats(query)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            elif data.startswith("feedback_success_"):
                signal_id = data.replace("feedback_success_", "")
                await self._handle_feedback(query, signal_id, "success")
            elif data.startswith("feedback_failure_"):
                signal_id = data.replace("feedback_failure_", "")
                await self._handle_feedback(query, signal_id, "failure")
            elif data == "clear_signal":
                await self._handle_clear_signal(query)
            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ {data}: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self._get_main_keyboard(query.from_user.id)
            )
    
    async def _handle_get_signal(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
        user_id = query.from_user.id
        
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞—Ä
        if user_id in self.active_signals:
            del self.active_signals[user_id]
        
        text = (
            "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:"
        )
        
        keyboard = self._get_pairs_keyboard()
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    async def _handle_bulk_signals(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –º–∞—Å—Å–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤"""
        user_id = query.from_user.id
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–ü-3 –∫—É–ª–¥–∞—É–Ω (10 –º–∏–Ω—É—Ç)
        top3_cooldown = 600  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        if user_id in self.last_top3_generation:
            time_passed = current_time - self.last_top3_generation[user_id]
            if time_passed < top3_cooldown:
                remaining = top3_cooldown - time_passed
                minutes = int(remaining // 60)
                seconds = int(remaining % 60)
                
                await query.edit_message_text(
                    f"‚è∞ <b>–¢–û–ü-3 –§–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç</b>\n\n"
                    f"üïí –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {minutes}–º {seconds}—Å\n\n"
                    f"üí° <b>–ü–æ—á–µ–º—É —Ç–∞–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ?</b>\n"
                    f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏\n"
                    f"‚Ä¢ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ø–∞–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                    f"‚Ä¢ –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n\n"
                    f"üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤!",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –§–æ—Ä–µ–∫—Å –º–µ–Ω—é", callback_data="forex_menu")]
                    ])
                )
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (4 –º–∏–Ω—É—Ç—ã) –ò–õ–ò –ª—é–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (2 –º–∏–Ω—É—Ç—ã)
        bulk_cooldown = BotConfig.SIGNAL_SETTINGS["bulk_signal_cooldown"]
        single_cooldown = BotConfig.SIGNAL_SETTINGS["signal_cooldown"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Å—Å–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        bulk_blocked = False
        if user_id in self.last_bulk_signal_time:
            time_passed = current_time - self.last_bulk_signal_time[user_id]
            if time_passed < bulk_cooldown:
                bulk_blocked = True
                remaining = bulk_cooldown - time_passed
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª  
        single_blocked = False
        if user_id in self.last_signal_time:
            time_passed = current_time - self.last_signal_time[user_id]
            if time_passed < single_cooldown:
                single_blocked = True
                remaining = max(remaining if bulk_blocked else 0, single_cooldown - time_passed)
        
        # –ï—Å–ª–∏ –ª—é–±–æ–π —Ç–∏–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        if bulk_blocked or single_blocked:
            minutes = int(remaining // 60)
            seconds = int(remaining % 60)
            
            block_type = "–º–∞—Å—Å–æ–≤—ã—Ö" if bulk_blocked else "–æ–¥–∏–Ω–æ—á–Ω—ã—Ö"
            
            await query.edit_message_text(
                f"‚è∞ <b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –¢–û–ü-3 —Å–∏–≥–Ω–∞–ª–∞–º–∏</b>\n\n"
                f"üïí –û—Å—Ç–∞–ª–æ—Å—å: {minutes}–º {seconds}—Å\n\n"
                f"üí° –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ {block_type} —Å–∏–≥–Ω–∞–ª–æ–≤:\n"
                f"‚Ä¢ –¢–æ–ª—å–∫–æ —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª\n"
                f"‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è API –ª–∏–º–∏—Ç–æ–≤\n"
                f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏\n\n"
                f"üéØ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞!",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ä—ã–Ω–∫–∞
        market_status = self.market_schedule.get_market_status()
        
        if not market_status['is_open']:
            market_message = self.market_schedule.get_market_message()
            await query.edit_message_text(
                f"{market_message}\n\n"
                f"‚ùå <b>–§–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>\n"
                f"‚è∞ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä—ã–Ω–∫–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n\n"
                f"üí° –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –û–¢–° —Å–∏–≥–Ω–∞–ª—ã (—Ä–∞–±–æ—Ç–∞—é—Ç 24/7)",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ö° –û–¢–° —Å–∏–≥–Ω–∞–ª—ã", callback_data="otc_menu")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        await query.edit_message_text(
            "‚è≥ <b>–ê–Ω–∞–ª–∏–∑ 6 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ä–µ–∫—Å –ø–∞—Ä...</b>\n\n"
            "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏ –∏—â–µ–º –ª—É—á—à–∏–µ –ø–æ —Å–∫–æ—Ä—É...",
            parse_mode=ParseMode.HTML
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Å–∫–æ—Ä—É (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ)
            best_signals = await self.signal_generator.get_best_signals(limit=3)
            
            if best_signals:
                signals_text = "üèÜ <b>–¢–û–ü-3 —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —Å–∫–æ—Ä—É</b>\n\n"
                
                for i, signal in enumerate(best_signals, 1):
                    direction_emoji = "üü¢" if signal.direction == "BUY" else "üî¥"
                    confidence_color = "üü¢" if signal.final_score > 0.8 else "üü°" if signal.final_score > 0.7 else "üî¥"
                    boost_info = " üß†" if signal.memory_boost else ""
                    
                    signals_text += (
                        f"{i}. {confidence_color} <b>{signal.pair}</b>: {signal.direction}\n"
                        f"   üìä –°–∫–æ—Ä: <b>{signal.final_score * 100 if signal.final_score <= 1 else signal.final_score:.1f}%</b>{boost_info}\n"
                        f"   ‚è∞ –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: <b>{signal.duration} –º–∏–Ω</b>\n\n"
                    )
                
                signals_text += f"üîç <b>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:</b> 6 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä\n"
                signals_text += f"üïí <b>–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b> {datetime.now().strftime('%H:%M:%S')}\n\n"
                signals_text += "üí° –°–∏–≥–Ω–∞–ª—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å–∫–æ—Ä—É (–ª—É—á—à–∏–µ —Å–≤–µ—Ä—Ö—É)"
            else:
                signals_text = (
                    "‚ö†Ô∏è <b>–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Å–∫–æ—Ä–æ–º</b>\n\n"
                    "–í—Å–µ 6 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ:\n"
                    "‚Ä¢ –°–∫–æ—Ä –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ < 75%\n"
                    "‚Ä¢ –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã\n"
                    "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä—ã."
                )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤–æ—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if best_signals:
                feedback_keyboard = []
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª–∞
                for i, signal in enumerate(best_signals, 1):
                    pair_name = signal.pair
                    signal_id = f"bulk_forex_{pair_name.replace('/', '_')}_{int(current_time)}"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                    self._store_signal_for_feedback(signal_id, user_id, signal, "bulk_forex")
                    
                    # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã
                    
                    feedback_keyboard.append([
                        InlineKeyboardButton(f"üìä {i}. {pair_name}", callback_data=f"select_forex_pair_{signal_id}")
                    ])
                
                # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –î–û–õ–ñ–ï–ù –≤—ã–±—Ä–∞—Ç—å –ø–∞—Ä—É
                
                keyboard = InlineKeyboardMarkup(feedback_keyboard)
                
                signals_text += "\n\nüëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—ã –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤–æ—à–ª–∏:</b>"
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ - –ù–ï –î–ê–ï–ú –≤—ã–π—Ç–∏, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—É–ª–¥–∞—É–Ω
                self.last_top3_generation[user_id] = current_time  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—É–ª–¥–∞—É–Ω –¥–∞–∂–µ –±–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω", callback_data="bulk_signals")]
                ])
            
            await query.edit_message_text(
                signals_text,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö)
            if best_signals:
                self.last_bulk_signal_time[user_id] = current_time
                # –¢–∞–∫–∂–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤—ã—Ö
                self.last_signal_time[user_id] = current_time
                # –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º last_top3_generation –∑–¥–µ—Å—å - —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã!
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–ü-3 –§–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª–æ–≤
                self._increment_signal_stats('forex_bulk', user_id, len(best_signals))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Å–∫–æ—Ä—É: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self._get_main_keyboard()
            )
    
    async def _handle_bulk_otc_signals(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –º–∞—Å—Å–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤"""
        user_id = query.from_user.id
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–ü-3 –∫—É–ª–¥–∞—É–Ω (10 –º–∏–Ω—É—Ç)
        top3_cooldown = 600  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        if user_id in self.last_top3_generation:
            time_passed = current_time - self.last_top3_generation[user_id]
            if time_passed < top3_cooldown:
                remaining = top3_cooldown - time_passed
                minutes = int(remaining // 60)
                seconds = int(remaining % 60)
                
                await query.edit_message_text(
                    f"‚è∞ <b>–¢–û–ü-3 –û–¢–° —Å–∏–≥–Ω–∞–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç</b>\n\n"
                    f"üïí –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {minutes}–º {seconds}—Å\n\n"
                    f"üí° <b>–ü–æ—á–µ–º—É —Ç–∞–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ?</b>\n"
                    f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏\n"
                    f"‚Ä¢ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ø–∞–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                    f"‚Ä¢ –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n\n"
                    f"üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤!",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –û–¢–° –º–µ–Ω—é", callback_data="otc_menu")]
                    ])
                )
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (4 –º–∏–Ω—É—Ç—ã) –ò–õ–ò –ª—é–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (2 –º–∏–Ω—É—Ç—ã)
        bulk_cooldown = BotConfig.SIGNAL_SETTINGS["bulk_signal_cooldown"]
        single_cooldown = BotConfig.SIGNAL_SETTINGS["signal_cooldown"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Å—Å–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        bulk_blocked = False
        if user_id in self.last_bulk_signal_time:
            time_passed = current_time - self.last_bulk_signal_time[user_id]
            if time_passed < bulk_cooldown:
                bulk_blocked = True
                remaining = bulk_cooldown - time_passed
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª  
        single_blocked = False
        if user_id in self.last_signal_time:
            time_passed = current_time - self.last_signal_time[user_id]
            if time_passed < single_cooldown:
                single_blocked = True
                remaining = max(remaining if bulk_blocked else 0, single_cooldown - time_passed)
        
        # –ï—Å–ª–∏ –ª—é–±–æ–π —Ç–∏–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        if bulk_blocked or single_blocked:
            minutes = int(remaining // 60)
            seconds = int(remaining % 60)
            
            block_type = "–º–∞—Å—Å–æ–≤—ã—Ö" if bulk_blocked else "–æ–¥–∏–Ω–æ—á–Ω—ã—Ö"
            
            await query.edit_message_text(
                f"‚è∞ <b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –¢–û–ü-3 –û–¢–° —Å–∏–≥–Ω–∞–ª–∞–º–∏</b>\n\n"
                f"üïí –û—Å—Ç–∞–ª–æ—Å—å: {minutes}–º {seconds}—Å\n\n"
                f"üí° –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ {block_type} —Å–∏–≥–Ω–∞–ª–æ–≤:\n"
                f"‚Ä¢ –¢–æ–ª—å–∫–æ —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª\n"
                f"‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è API –ª–∏–º–∏—Ç–æ–≤\n"
                f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏\n\n"
                f"üéØ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞!",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –û–¢–° –º–µ–Ω—é", callback_data="otc_menu")]
                ])
            )
            return
        
        await query.edit_message_text(
            "‚è≥ <b>–ê–Ω–∞–ª–∏–∑ 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö –û–¢–° –ø–∞—Ä...</b>\n\n"
            "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –û–¢–° —Å–∏–≥–Ω–∞–ª—ã –∏ –∏—â–µ–º –ª—É—á—à–∏–µ –ø–æ —Å–∫–æ—Ä—É...",
            parse_mode=ParseMode.HTML
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ OTC –ø–∞—Ä—ã
            otc_pairs = self.otc_generator.get_supported_pairs()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö OTC –ø–∞—Ä
            best_otc_signals = []
            for pair in otc_pairs[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –ø–∞—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API
                try:
                    signal = await self.otc_generator.generate_otc_signal(pair)
                    if signal and signal.confidence >= 0.60:  # –ü–æ—Ä–æ–≥ 60% –¥–ª—è OTC
                        best_otc_signals.append(signal)
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ OTC —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair}: {e}")
                    continue
            
            if best_otc_signals:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                best_otc_signals.sort(key=lambda s: s.confidence, reverse=True)
                
                signals_text = "üèÜ <b>–¢–û–ü-3 –û–¢–° —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —Å–∫–æ—Ä—É</b>\n\n"
                
                for i, signal in enumerate(best_otc_signals, 1):
                    confidence_color = "üü¢" if signal.confidence > 0.8 else "üü°" if signal.confidence > 0.6 else "üî¥"
                    
                    signals_text += (
                        f"{i}. {confidence_color} <b>{signal.pair}</b>: {signal.direction}\n"
                        f"   üìä –°–∫–æ—Ä: <b>{signal.confidence * 100 if signal.confidence <= 1 else signal.confidence:.1f}%</b>\n"
                        f"   ‚è∞ –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: <b>{signal.duration} –º–∏–Ω</b>\n\n"
                    )
                
                signals_text += f"üîç <b>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:</b> 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö –û–¢–° –ø–∞—Ä\n"
                signals_text += f"üïí <b>–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b> {datetime.now().strftime('%H:%M:%S')}\n\n"
                signals_text += "üí° –û–¢–° —Å–∏–≥–Ω–∞–ª—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å–∫–æ—Ä—É (–ª—É—á—à–∏–µ —Å–≤–µ—Ä—Ö—É)"
            else:
                signals_text = (
                    "‚ö†Ô∏è <b>–ù–µ—Ç –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Å–∫–æ—Ä–æ–º</b>\n\n"
                    "–í—Å–µ 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö –û–¢–° –ø–∞—Ä –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ:\n"
                    "‚Ä¢ –°–∫–æ—Ä –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ < 60%\n"
                    "‚Ä¢ –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã\n"
                    "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä—ã."
                )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤–æ—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if best_otc_signals:
                feedback_keyboard = []
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                pending_signals = []
                for i, signal in enumerate(best_otc_signals, 1):
                    pair_name = signal.pair.replace(" (OTC)", "")
                    signal_id = f"bulk_otc_{pair_name.replace('/', '_')}_{int(current_time)}"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                    self._store_signal_for_feedback(signal_id, user_id, signal, "bulk_otc")
                    pending_signals.append(signal_id)
                    
                    # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã
                    
                    feedback_keyboard.append([
                        InlineKeyboardButton(f"üìà {i}. {pair_name}", callback_data=f"select_otc_pair_{signal_id}")
                    ])
                
                # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–¢–° –º–µ–Ω—é" - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –î–û–õ–ñ–ï–ù –≤—ã–±—Ä–∞—Ç—å –ø–∞—Ä—É
                
                keyboard = InlineKeyboardMarkup(feedback_keyboard)
                
                signals_text += "\n\nüëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—ã –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤–æ—à–ª–∏:</b>"
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤ - –ù–ï –î–ê–ï–ú –≤—ã–π—Ç–∏, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—É–ª–¥–∞—É–Ω
                self.last_top3_generation[user_id] = current_time  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—É–ª–¥–∞—É–Ω –¥–∞–∂–µ –±–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω", callback_data="bulk_otc_signals")]
                ])
            
            await query.edit_message_text(
                signals_text,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∞—Å—Å–æ–≤–æ–π –û–¢–° –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if best_otc_signals:
                self.last_bulk_signal_time[user_id] = current_time
                self.last_signal_time[user_id] = current_time
                # –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º last_top3_generation –∑–¥–µ—Å—å - —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã!
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–ü-3 –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤
                self._increment_signal_stats('otc_bulk', user_id, len(best_otc_signals))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Å–∫–æ—Ä—É: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –û–¢–° —Å–∏–≥–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –û–¢–° –º–µ–Ω—é", callback_data="otc_menu")]
                ])
            )
    
    async def _handle_select_otc_pair(self, query, signal_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –û–¢–° –ø–∞—Ä—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            user_id = query.from_user.id
            logger.info(f"üéØ –ù–ê–ß–ê–õ–û _handle_select_otc_pair: user_id={user_id}, signal_id={signal_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∏–≥–Ω–∞–ª –≤ –¥–∞–Ω–Ω—ã—Ö
            if signal_id not in self.pending_signals:
                logger.error(f"‚ùå –°–∏–≥–Ω–∞–ª {signal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pending_signals")
                await query.edit_message_text("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.")
                return
            
            logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –≤ pending_signals")
            signal_data = self.pending_signals[signal_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –ø–∞—Ä—É —Ä–∞–Ω–µ–µ
            if user_id in self.pending_trade_results and signal_id in self.pending_trade_results[user_id]:
                logger.info(f"üîÑ –ü–∞—Ä–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ —Ä–∞–Ω–µ–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
                # –ü–∞—Ä–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                if not self._is_signal_ready_for_feedback(user_id, signal_id):
                    if user_id in self.pending_trade_timers and signal_id in self.pending_trade_timers[user_id]:
                        expiry_time = self.pending_trade_timers[user_id][signal_id]
                        current_time = time.time()
                        remaining_seconds = max(0, int(expiry_time - current_time))
                        remaining_minutes = remaining_seconds // 60
                        remaining_seconds = remaining_seconds % 60
                        
                        await query.answer(
                            f"‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ! –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ {remaining_minutes}–º {remaining_seconds}—Å",
                            show_alert=True
                        )
                        return
                    else:
                        await query.answer("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö", show_alert=True)
                        return
                else:
                    # –°–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
                    
                    await query.edit_message_text(
                        f"‚úÖ <b>–í–†–ï–ú–Ø –ò–°–¢–ï–ö–õ–û - –£–ö–ê–ñ–ò–¢–ï –†–ï–ó–£–õ–¨–¢–ê–¢</b>\n\n"
                        f"üìä <b>–ü–∞—Ä–∞:</b> {signal_data['pair']}\n"
                        f"üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {signal_data['direction']}\n"
                        f"üéØ <b>–°–∫–æ—Ä:</b> {signal_data['confidence'] * 100 if signal_data['confidence'] <= 1 else signal_data['confidence']:.1f}%\n"
                        f"‚è∞ <b>–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è:</b> {signal_data['expiration']} –º–∏–Ω\n\n"
                        f"üéØ <b>–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>",
                        parse_mode=ParseMode.HTML,
                        reply_markup=InlineKeyboardMarkup([
                            [
                                InlineKeyboardButton("‚úÖ –í–´–ò–ì–†–ê–®", callback_data=f"feedback_success_{signal_id}"),
                                InlineKeyboardButton("‚ùå –ü–†–û–ò–ì–†–ê–®", callback_data=f"feedback_failure_{signal_id}")
                            ],
                            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_pending_trades")]
                        ])
                    )
                    return
            
            # –≠—Ç–æ –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä –ø–∞—Ä—ã - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É
            logger.info(f"üÜï –ù–æ–≤—ã–π –≤—ã–±–æ—Ä –û–¢–° –ø–∞—Ä—ã: {signal_id}")
            pair = signal_data['pair']
            direction = signal_data['direction']
            confidence = signal_data['confidence']
            expiration = signal_data['expiration']
            
            # –¢–ï–ü–ï–†–¨ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è)
            self._add_pending_trade(user_id, signal_id, expiration)
            
            # –¢–ï–ü–ï–†–¨ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¢–û–ü-3 –∫—É–ª–¥–∞—É–Ω (10 –º–∏–Ω—É—Ç) - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –û–¢–° –ø–∞—Ä—É
            self.last_top3_generation[user_id] = time.time()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ç–∞–π–º–µ—Ä–æ–º
            current_time = time.time()
            expiry_timestamp = current_time + (expiration * 60)
            expiry_datetime = datetime.fromtimestamp(expiry_timestamp)
            expiry_time_str = expiry_datetime.strftime('%H:%M:%S')
            
            message = await query.edit_message_text(
                f"üîí <b>–°–î–ï–õ–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê</b>\n\n"
                f"üìä <b>–ü–∞—Ä–∞:</b> {pair}\n"
                f"üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction}\n"
                f"üéØ <b>–°–∫–æ—Ä:</b> {confidence * 100 if confidence <= 1 else confidence:.1f}%\n"
                f"‚è∞ <b>–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è:</b> {expiration} –º–∏–Ω\n\n"
                f"üö´ <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {expiry_time_str}</b>\n"
                f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å: {expiration}–º 0—Å</b>\n\n"
                f"üîò <b>–¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 30—Å</b>\n"
                f"üí° –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚ö™ –í—ã–∏–≥—Ä–∞—à (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data=f"feedback_success_{signal_id}"),
                        InlineKeyboardButton("‚ö™ –ü—Ä–æ–∏–≥—Ä–∞—à (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data=f"feedback_failure_{signal_id}")
                    ],
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="show_pending_trades")]
                ])
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
            await self._start_auto_timer_update(user_id, signal_id, query.message.chat_id, message.message_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –û–¢–° –ø–∞—Ä—ã: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã.")
    
    async def _handle_select_forex_pair(self, query, signal_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –§–æ—Ä–µ–∫—Å –ø–∞—Ä—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ OTC)"""
        try:
            user_id = query.from_user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∏–≥–Ω–∞–ª –≤ –¥–∞–Ω–Ω—ã—Ö
            if signal_id not in self.pending_signals:
                await query.edit_message_text("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.")
                return

            signal_data = self.pending_signals[signal_id]

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±–∏—Ä–∞–ª —ç—Ç—É –ø–∞—Ä—É —Ä–∞–Ω–µ–µ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            if user_id in self.pending_trade_results and signal_id in self.pending_trade_results[user_id]:
                if not self._is_signal_ready_for_feedback(user_id, signal_id):
                    if user_id in self.pending_trade_timers and signal_id in self.pending_trade_timers[user_id]:
                        expiry_time = self.pending_trade_timers[user_id][signal_id]
                        current_time = time.time()
                        remaining_seconds = max(0, int(expiry_time - current_time))
                        remaining_minutes = remaining_seconds // 60
                        remaining_seconds = remaining_seconds % 60

                        await query.answer(
                            f"‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ! –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ {remaining_minutes}–º {remaining_seconds}—Å",
                            show_alert=True
                        )
                    else:
                        await query.answer("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö", show_alert=True)
                    return
                else:
                    # –°–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    await query.edit_message_text(
                        f"‚úÖ <b>–í–†–ï–ú–Ø –ò–°–¢–ï–ö–õ–û - –£–ö–ê–ñ–ò–¢–ï –†–ï–ó–£–õ–¨–¢–ê–¢</b>\n\n"
                        f"üìä <b>–ü–∞—Ä–∞:</b> {signal_data['pair']}\n"
                        f"üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {signal_data['direction']}\n"
                        f"üéØ <b>–°–∫–æ—Ä:</b> {signal_data['confidence'] * 100 if signal_data['confidence'] <= 1 else signal_data['confidence']:.1f}%\n"
                        f"‚è∞ <b>–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è:</b> {signal_data['expiration']} –º–∏–Ω\n\n"
                        f"üéØ <b>–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>",
                        parse_mode=ParseMode.HTML,
                        reply_markup=InlineKeyboardMarkup([
                            [
                                InlineKeyboardButton("‚úÖ –í–´–ò–ì–†–ê–®", callback_data=f"feedback_success_{signal_id}"),
                                InlineKeyboardButton("‚ùå –ü–†–û–ò–ì–†–ê–®", callback_data=f"feedback_failure_{signal_id}")
                            ],
                            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_pending_trades")]
                        ])
                    )
                    return

            # –ù–æ–≤—ã–π –≤—ã–±–æ—Ä –ø–∞—Ä—ã ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫—É, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
            pair = signal_data['pair']
            direction = signal_data['direction']
            confidence = signal_data['confidence']
            expiration = signal_data['expiration']

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
            self._add_pending_trade(user_id, signal_id, expiration)

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¢–û–ü-3 –∫—É–ª–¥–∞—É–Ω (10 –º–∏–Ω) –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã
            self.last_top3_generation[user_id] = time.time()

            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º, –∫–∞–∫ –≤ OTC
            current_time = time.time()
            expiry_timestamp = current_time + (expiration * 60)
            expiry_datetime = datetime.fromtimestamp(expiry_timestamp)
            expiry_time_str = expiry_datetime.strftime('%H:%M:%S')

            message = await query.edit_message_text(
                f"üîí <b>–°–î–ï–õ–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê</b>\n\n"
                f"üìä <b>–ü–∞—Ä–∞:</b> {pair}\n"
                f"üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction}\n"
                f"üéØ <b>–°–∫–æ—Ä:</b> {confidence * 100 if confidence <= 1 else confidence:.1f}%\n"
                f"‚è∞ <b>–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è:</b> {expiration} –º–∏–Ω\n\n"
                f"üö´ <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {expiry_time_str}</b>\n"
                f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å: {expiration}–º 0—Å</b>\n\n"
                f"üîò <b>–¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 30—Å</b>\n"
                f"üí° –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚ö™ –í—ã–∏–≥—Ä–∞—à (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data=f"feedback_success_{signal_id}"),
                        InlineKeyboardButton("‚ö™ –ü—Ä–æ–∏–≥—Ä–∞—à (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data=f"feedback_failure_{signal_id}")
                    ],
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="show_pending_trades")]
                ])
            )

            # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 30—Å
            await self._start_auto_timer_update(user_id, signal_id, query.message.chat_id, message.message_id)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –§–æ—Ä–µ–∫—Å –ø–∞—Ä—ã: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã.")
    
    async def _handle_show_new_status(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ù–û–í–£–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            logger.info("üîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ù–û–í–£–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            try:
                logger.info(f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.signal_stats}")
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                total_signals = self.signal_stats['total']
                forex_signals = self.signal_stats['forex_single'] + self.signal_stats['forex_bulk']
                otc_signals = self.signal_stats['otc_single'] + self.signal_stats['otc_bulk']
                
                logger.info(f"üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}, –§–æ—Ä–µ–∫—Å: {forex_signals}, –û–¢–°: {otc_signals}")
            except Exception as stats_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_error}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                total_signals = 0
                forex_signals = 0
                otc_signals = 0
            
            status_text = (
                "‚öôÔ∏è <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                "üü¢ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</b>\n\n"
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:</b>\n"
                f"‚Ä¢ üéØ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: <b>{total_signals}</b>\n"
                f"‚Ä¢ üìà –§–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª—ã: <b>{forex_signals}</b>\n"
                f"  ‚îú –û–¥–∏–Ω–æ—á–Ω—ã–µ: {self.signal_stats['forex_single']}\n"
                f"  ‚îî –¢–û–ü-3: {self.signal_stats['forex_bulk']}\n"
                f"‚Ä¢ ‚ö° –û–¢–° —Å–∏–≥–Ω–∞–ª—ã: <b>{otc_signals}</b>\n"
                f"  ‚îú –û–¥–∏–Ω–æ—á–Ω—ã–µ: {self.signal_stats['otc_single']}\n"
                f"  ‚îî –¢–û–ü-3: {self.signal_stats['otc_bulk']}\n\n"
                "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:</b>\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º\n"
                "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>\n"
                "‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                "‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø–∞—Ä–∞–º\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="show_users"),
                    InlineKeyboardButton("üìã –ó–∞–ø—Ä–æ—Å—ã", callback_data="show_all_requests")
                ],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="show_user_stats")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            await query.edit_message_text(
                status_text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            logger.info("‚úÖ –ù–û–í–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã.")
    
    async def _handle_show_user_stats(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            if not self.user_signal_stats:
                await query.edit_message_text(
                    "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                    "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤\n\n"
                    "üí° –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="show_status")]
                    ])
                )
                return
            
            stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n\n"
            
            for user_id, stats in self.user_signal_stats.items():
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
                user_name = f"ID: {user_id}"
                if user_id == query.from_user.id:
                    user_name = f"üë§ –í—ã ({user_id})"
                elif user_id == BotConfig.ADMIN_ID:
                    user_name = f"üëë –ê–¥–º–∏–Ω ({user_id})"
                
                stats_text += f"üîπ <b>{user_name}</b>\n"
                stats_text += f"  üìà –§–æ—Ä–µ–∫—Å: {stats['forex_single']} + {stats['forex_bulk']} –¢–û–ü-3 = {stats['forex_single'] + stats['forex_bulk']}\n"
                stats_text += f"  ‚ö° –û–¢–°: {stats['otc_single']} + {stats['otc_bulk']} –¢–û–ü-3 = {stats['otc_single'] + stats['otc_bulk']}\n"
                stats_text += f"  üéØ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: <b>{stats['total']}</b>\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
                if user_id in self.user_trade_results:
                    trade_stats = self.user_trade_results[user_id]
                    stats_text += f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: <b>{trade_stats['success']}</b>\n"
                    stats_text += f"  ‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö: <b>{trade_stats['failure']}</b>\n"
                    stats_text += f"  üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: <b>{trade_stats['win_rate']:.1f}%</b>\n\n"
                else:
                    stats_text += f"  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏: <b>0</b>\n\n"
            
            await query.edit_message_text(
                stats_text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="show_status")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    
    async def _handle_generate_signal(self, query, pair: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã"""
        user_id = query.from_user.id
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown (–∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏)
        if user_id in self.last_signal_time:
            time_passed = current_time - self.last_signal_time[user_id]
            cooldown = BotConfig.SIGNAL_SETTINGS["signal_cooldown"]
            
            if time_passed < cooldown:
                remaining = cooldown - time_passed
                minutes = int(remaining // 60)
                seconds = int(remaining % 60)
                
                await query.edit_message_text(
                    f"‚è∞ <b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–∞—Ä—É</b>\n\n"
                    f"üïí –û—Å—Ç–∞–ª–æ—Å—å: {minutes}–º {seconds}—Å\n\n"
                    f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                    f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É\n"
                    f"‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π\n\n"
                    f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É —Å –ª—É—á—à–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="refresh_signal_cooldown")],
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ä—ã–Ω–∫–∞
        market_status = self.market_schedule.get_market_status()
        
        if not market_status['is_open']:
            market_message = self.market_schedule.get_market_message()
            await query.edit_message_text(
                f"{market_message}\n\n"
                f"‚ùå <b>–§–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª –¥–ª—è {pair} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n"
                f"‚è∞ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä—ã–Ω–∫–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n\n"
                f"üí° –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –û–¢–° —Å–∏–≥–Ω–∞–ª—ã (—Ä–∞–±–æ—Ç–∞—é—Ç 24/7)",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ö° –û–¢–° —Å–∏–≥–Ω–∞–ª—ã", callback_data="otc_menu")],
                    [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –ø–∞—Ä–∞", callback_data="get_signal")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        await query.edit_message_text(
            f"‚è≥ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair}...</b>\n\n"
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã...",
            parse_mode=ParseMode.HTML
        )
        
        try:
            signal = await self.signal_generator.generate_signal(pair)
            
            if signal:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –§–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª–∞
                if signal.final_score < 0.75:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –§–æ—Ä–µ–∫—Å
                    signal_text = (
                        f"‚ö†Ô∏è <b>–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è {pair}</b>\n\n"
                        f"üìä –¢–µ–∫—É—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.final_score:.1%}\n"
                        f"üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º: 75%\n\n"
                        f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                        f"‚Ä¢ –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä—É\n"
                        f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\n"
                        f"‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –ª—É—á—à–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"
                    )
                    keyboard = [
                        [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –ø–∞—Ä–∞", callback_data="get_signal")],
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ]
                else:
                    signal_text = self._format_signal_detailed(signal)
                
            else:
                signal_text = (
                    f"‚ö†Ô∏è <b>–°–∏–≥–Ω–∞–ª –¥–ª—è {pair} –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
                    "‚Ä¢ –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ\n"
                    "‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ø–∞—Ä—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
                )
                chart_path = None
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏/pending —Ç–æ–ª—å–∫–æ –¥–ª—è –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• —Ñ–æ—Ä–µ–∫—Å-—Å–∏–≥–Ω–∞–ª–æ–≤
            if signal:
                signal_id = f"forex_{pair.replace('/', '_')}_{int(time.time())}"
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self._store_signal_for_feedback(signal_id, query.from_user.id, signal, "forex")

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –§–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª–æ–≤
                self._increment_signal_stats('forex_single', query.from_user.id)

                score_value = signal.final_score if signal.final_score <= 1 else signal.final_score / 100
                if score_value >= 0.75:
                    # –¢–æ–ª—å–∫–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å —Ç–∞–π–º–µ—Ä–æ–º
                    keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="show_pending_trades")]]
                    self._add_pending_trade(query.from_user.id, signal_id, signal.duration)
                else:
                    # –î–ª—è —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –û–°–¢–ê–í–õ–Ø–ï–ú —Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–¥—Ä—É–≥–∞—è –ø–∞—Ä–∞/–º–µ–Ω—é)
                    pass
            else:
                keyboard = [
                    [
                        InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –ø–∞—Ä–∞", callback_data="get_signal"),
                        InlineKeyboardButton("üìà –ú–∞—Å—Å–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="bulk_signals")
                    ],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏ –õ–Æ–ë–û–ô –ø–æ–ø—ã—Ç–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–∞–∂–µ –Ω–µ—É–¥–∞—á–Ω–æ–π)
            self.last_signal_time[user_id] = current_time
            self.last_bulk_signal_time[user_id] = current_time
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã)
            if signal and (signal.final_score >= 0.75 if signal.final_score <= 1 else signal.final_score >= 75):
                self.active_signals[user_id] = {
                    'text': signal_text,
                    'keyboard': reply_markup,
                    'signal_data': signal,
                    'timestamp': current_time
                }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª (–±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤)
            await query.edit_message_text(
                signal_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair}: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self._get_main_keyboard(query.from_user.id)
            )
    
    def _format_signal_detailed(self, signal: ForexSignal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª"""
        direction_emoji = "üü¢" if signal.direction == "BUY" else "üî¥"
        confidence_color = "üü¢" if signal.final_score > 0.8 else "üü°" if signal.final_score > 0.7 else "üî¥"
        confidence_bar = self._get_confidence_bar(signal.final_score)
        boost_info = " üß†" if signal.memory_boost else ""
        
        signal_text = (
            f"üìä <b>–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è {signal.pair}</b>\n\n"
            f"{direction_emoji} <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {signal.direction}\n"
            f"üéØ <b>–°–∫–æ—Ä:</b> {confidence_color} <b>{signal.final_score * 100 if signal.final_score <= 1 else signal.final_score:.1f}%</b> {confidence_bar}{boost_info}\n"
            f"‚è∞ <b>–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è:</b> {signal.duration} –º–∏–Ω\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {signal.timestamp.strftime('%H:%M:%S')}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = signal.indicators
        signal_text += "üìä <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>\n"
        
        if 'rsi' in indicators:
            rsi = indicators['rsi']
            rsi_status = self._get_rsi_status(rsi)
            signal_text += f"‚Ä¢ RSI (14): <code>{rsi:.1f}</code> {rsi_status}\n"
        
        if 'ema_21' in indicators:
            signal_text += f"‚Ä¢ EMA (21): <code>{indicators['ema_21']:.5f}</code>\n"
        
        if 'current_price' in indicators and 'bb_upper' in indicators and 'bb_lower' in indicators:
            bb_status = self._get_bb_status(
                indicators['current_price'],
                indicators['bb_upper'],
                indicators['bb_lower']
            )
            signal_text += f"‚Ä¢ Bollinger Bands: {bb_status}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        signal_text += f"\nüí° <b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>\n"
        if signal.direction == "BUY":
            signal_text += "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã."
        else:
            signal_text += "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã."
        
        signal_text += (
            f"\n\n‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –°–∏–≥–Ω–∞–ª –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. "
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ."
        )
        
        return signal_text
    
    def _format_signal_compact(self, signal: ForexSignal, emoji: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª"""
        confidence_bar = self._get_confidence_bar(signal.final_score)
        boost_info = " üß†" if signal.memory_boost else ""
        return (
            f"{emoji} <b>{signal.pair}</b>: {signal.direction} @ "
            f"<code>{signal.entry_price:.5f}</code> "
            f"(–°–∫–æ—Ä: {signal.final_score:.0%} {confidence_bar}){boost_info}"
        )
    
    def _get_confidence_bar(self, confidence: float) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–ª–æ—Å—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        filled = int(confidence * 5)  # 5 –±–ª–æ–∫–æ–≤ –º–∞–∫—Å–∏–º—É–º
        empty = 5 - filled
        return "‚ñà" * filled + "‚ñë" * empty
    
    def _get_rsi_status(self, rsi: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å RSI"""
        if rsi < 30:
            return "üìâ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ"
        elif rsi > 70:
            return "üìà –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–æ"
        else:
            return "‚û°Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
    
    def _get_bb_status(self, price: float, upper: float, lower: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Bollinger Bands"""
        if price >= upper:
            return "üî∫ –í—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã"
        elif price <= lower:
            return "üîª –ù–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã"
        else:
            return "‚û°Ô∏è –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–ª–æ—Å"
    
    def _get_confidence_bar(self, confidence: float) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–æ—Å–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Å–∫–æ—Ä–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –±–æ–ª—å—à–µ 1, –¥–µ–ª–∏–º –Ω–∞ 100)
        if confidence > 1:
            confidence = confidence / 100
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-1
        confidence = max(0, min(1, confidence))
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–æ—Å–∫—É –∏–∑ 10 —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        filled_segments = int(confidence * 10)
        empty_segments = 10 - filled_segments
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        if confidence >= 0.8:
            fill_char = "üü¢"  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Å–∫–æ—Ä–∞
        elif confidence >= 0.6:
            fill_char = "üü°"  # –ñ–µ–ª—Ç—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–∫–æ—Ä–∞
        else:
            fill_char = "üî¥"  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ —Å–∫–æ—Ä–∞
        
        empty_char = "‚¨ú"
        
        bar = fill_char * filled_segments + empty_char * empty_segments
        return f"\n{bar}"
    
    async def _handle_show_pairs(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
        await self.pairs_command(query, None)
    
    async def _handle_show_status(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        if query.from_user.id != BotConfig.ADMIN_ID:
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å API
            api_status = self.signal_generator.get_api_status()
            supported_pairs = self.signal_generator.get_supported_pairs()
            chart_limits = self.chart_generator.get_api_limits()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
            request_stats = access_manager.get_statistics()
            
            status_text = (
                "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤</b>\n\n"
                f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"üí± <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä:</b> {len(supported_pairs)}\n"
                f"üë• <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(BotConfig.AUTHORIZED_USERS)}\n\n"
                f"üìù <b>–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ—Å—Ç—É–ø:</b>\n"
                f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {request_stats['pending']}\n"
                f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {request_stats['approved']}\n"
                f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {request_stats['rejected']}\n\n"
                "üîó <b>–°—Ç–∞—Ç—É—Å API:</b>\n"
            )
            
            for api_name, status in api_status.items():
                status_emoji = "‚úÖ" if status['can_request'] else "‚ùå"
                status_text += (
                    f"{status_emoji} <b>{api_name.upper()}</b>\n"
                    f"   –ó–∞–ø—Ä–æ—Å—ã –≤ –º–∏–Ω—É—Ç—É: {status['minute_requests']}\n"
                    f"   –ó–∞–ø—Ä–æ—Å—ã –≤ –¥–µ–Ω—å: {status['day_requests']}\n\n"
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_stats = signal_statistics.get_overall_statistics()
            status_text += (
                f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:</b>\n"
                f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signal_stats['total_signals']}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {signal_stats['successful']}\n"
                f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {signal_stats['failed']}\n"
                f"üéØ –û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {signal_stats['success_rate']:.1f}%\n\n"
                f"üí± –§–æ—Ä–µ–∫—Å: {signal_stats['forex_stats']['success_rate']:.1f}% "
                f"({signal_stats['forex_stats']['successful']}/{signal_stats['forex_stats']['total']})\n"
                f"‚ö° –û–¢–°: {signal_stats['otc_stats']['success_rate']:.1f}% "
                f"({signal_stats['otc_stats']['successful']}/{signal_stats['otc_stats']['total']})\n\n"
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            row1 = []
            if request_stats['pending'] > 0:
                row1.append(InlineKeyboardButton(
                    f"üìã –ó–∞–ø—Ä–æ—Å—ã ({request_stats['pending']})", 
                    callback_data="show_all_requests"
                ))
            
            row1.append(InlineKeyboardButton(
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(BotConfig.AUTHORIZED_USERS)})",
                callback_data="show_users"
            ))
            
            if row1:
                keyboard.append(row1)
            
            keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                status_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
    
    async def _handle_show_help(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å"""
        user_id = query.from_user.id
        
        help_text = BotConfig.MESSAGES["help"]
        
        keyboard = self._get_main_keyboard(user_id)
        
        await query.edit_message_text(
            help_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    async def _handle_show_market(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞"""
        try:
            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            
            await query.edit_message_text(
                BotConfig.MESSAGES["market_schedule"],
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self._get_main_keyboard()
            )
    
    async def _handle_back_to_main(self, query):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = query.from_user.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            if user_id in self.active_signals:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤–º–µ—Å—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                active_signal = self.active_signals[user_id]
                signal_text = active_signal['text']
                signal_keyboard = active_signal['keyboard']
                
                try:
                    await query.edit_message_text(
                        signal_text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=signal_keyboard
                    )
                except Exception as edit_error:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ: {edit_error}")
                    await query.message.reply_text(
                        signal_text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=signal_keyboard
                    )
            else:
                # –û–±—ã—á–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                welcome_text = (
                    "üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª–æ–≤</b>\n\n"
                    "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
                )
                
                keyboard = self._get_main_keyboard(user_id)
                
                await query.edit_message_text(
                    welcome_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=keyboard
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_back_to_main: {e}")
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            try:
                welcome_text = (
                    "üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–µ–∫—Å —Å–∏–≥–Ω–∞–ª–æ–≤</b>\n\n"
                    "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
                )
                keyboard = self._get_main_keyboard(user_id)
                
                await query.edit_message_text(
                    welcome_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=keyboard
                )
            except:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.message.reply_text(
                    "üöÄ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\nüëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=self._get_main_keyboard(user_id)
                )
    
    async def _handle_clear_signal(self, query):
        """–û—á–∏—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        
        if user_id in self.active_signals:
            del self.active_signals[user_id]
            
            await query.edit_message_text(
                "üóëÔ∏è <b>–°–∏–≥–Ω–∞–ª –æ—á–∏—â–µ–Ω</b>\n\n"
                "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏.\n"
                "–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n"
                "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
                parse_mode=ParseMode.HTML,
                reply_markup=self._get_main_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "‚ùå <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.\n\n"
                "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
                parse_mode=ParseMode.HTML,
                reply_markup=self._get_main_keyboard(user_id)
                )
    
    async def _setup_bot_commands(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        if not self._commands_set:
            await self._set_bot_commands()
            self._commands_set = True
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        async def post_init(application):
            await self._setup_bot_commands()
        
        self.application.post_init = post_init
        
        self.application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    try:
        bot = TelegramSignalBot(BotConfig.BOT_TOKEN, BotConfig.TWELVEDATA_API_KEY)
        bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()
