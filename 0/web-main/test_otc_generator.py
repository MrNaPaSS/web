#!/usr/bin/env python3 # -*- coding: utf-8 -*- import asyncio import sys import os # Добавляем текущую директорию в путь sys.path.append(os.path.dirname(os.path.abspath(__file__))) async def test_otc_generator(): """Тест генератора ОТС сигналов""" try: from powerful_otc_generator import PowerfulOTCGenerator print("Инициализация генератора ОТС сигналов...") generator = PowerfulOTCGenerator() print(f"Анализатор доступен: {generator.analyzer_available}") print(f"Поддерживаемые пары: {generator.supported_otc_pairs}") if generator.analyzer_available: print("\nТестирование генерации сигнала для EUR/USD...") signal = await generator.generate_otc_signal("EUR/USD (OTC)") if signal: print(f" Сигнал сгенерирован!") print(f"Пара: {signal.pair}") print(f"Направление: {signal.direction}") print(f"Уверенность: {signal.confidence}") print(f"Цена: {signal.entry_price}") else: print(" Сигнал не сгенерирован") else: print(" Анализатор недоступен") except Exception as e: print(f" Ошибка: {e}") import traceback traceback.print_exc() async def test_comprehensive_analyzer(): """Тест комплексного анализатора""" try: from fixed_comprehensive_analysis import FixedComprehensiveAnalysis print("\nИнициализация комплексного анализатора...") analyzer = FixedComprehensiveAnalysis( asset_type="otc", twelvedata_api_key="135a5040fb4642d6be0dda33fdf12232", finnhub_api_key="d31clt1r01qsprr0c0lgd31clt1r01qsprr0c0m0" ) print("Тестирование получения данных...") data = await analyzer.get_market_data(["EUR/USD"], "1min", 10) print(f"Получено данных: {len(data)}") if "EUR/USD" in data: df = data["EUR/USD"] print(f"DataFrame размер: {df.shape}") print(f"Колонки: {list(df.columns)}") print(f"Первые 3 строки:") print(df.head(3)) print("\nТестирование генерации сигналов...") signals = await analyzer.generate_ultra_precise_signals(["EUR/USD"], max_signals=2) print(f"Сгенерировано сигналов: {len(signals)}") if signals: for i, signal in enumerate(signals): print(f"Сигнал {i+1}: {signal.get('direction', 'N/A')} с уверенностью {signal.get('confidence', 'N/A')}") else: print(" Сигналы не сгенерированы") except Exception as e: print(f" Ошибка в анализаторе: {e}") import traceback traceback.print_exc() async def main(): print("Тестирование генератора ОТС сигналов...") print("=" * 50) await test_comprehensive_analyzer() print("-" * 30) await test_otc_generator() print("\nТест завершен!") if __name__ == "__main__": asyncio.run(main()) 