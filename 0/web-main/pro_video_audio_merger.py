import os
import sys
import numpy as np
from moviepy.editor import VideoFileClip, AudioFileClip, concatenate_videoclips
from pydub import AudioSegment
from pydub.silence import detect_nonsilent, split_on_silence
from pydub.effects import normalize, compress_dynamic_range
import noisereduce as nr
import librosa
import soundfile as sf
from scipy import signal

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8')

class ProAudioProcessor:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å AI"""
    
    def __init__(self, audio_path):
        self.audio_path = audio_path
        self.temp_files = []
    
    def load_audio(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ –≤ numpy –º–∞—Å—Å–∏–≤"""
        print("üì• –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ...")
        y, sr = librosa.load(self.audio_path, sr=None)
        print(f"‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(y)/sr:.2f}s, sample rate: {sr}Hz")
        return y, sr
    
    def reduce_noise(self, y, sr):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞"""
        print("üîá –£–¥–∞–ª—è—é —Ñ–æ–Ω–æ–≤—ã–π —à—É–º...")
        
        # –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–æ–∫ —Ç–∏—à–∏–Ω—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è —à—É–º–∞
        rms = librosa.feature.rms(y=y)[0]
        noise_threshold = np.percentile(rms, 10)
        noise_indices = np.where(rms < noise_threshold)[0]
        
        if len(noise_indices) > sr // 2:  # –ú–∏–Ω–∏–º—É–º 0.5 —Å–µ–∫—É–Ω–¥—ã —à—É–º–∞
            noise_sample = y[:sr]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Å–µ–∫—É–Ω–¥—É –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª—å —à—É–º–∞
        else:
            noise_sample = y[:sr//2]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
        reduced_noise = nr.reduce_noise(y=y, sr=sr, y_noise=noise_sample, prop_decrease=0.8)
        print("‚úÖ –®—É–º —É–¥–∞–ª—ë–Ω")
        return reduced_noise
    
    def normalize_loudness(self, y):
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        print("üìä –ù–æ—Ä–º–∞–ª–∏–∑—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å...")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∏–∫–æ–≤—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
        max_val = np.abs(y).max()
        if max_val > 0:
            y = y / max_val * 0.95  # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
        
        print("‚úÖ –ì—Ä–æ–º–∫–æ—Å—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return y
    
    def remove_silence_smart(self, y, sr, threshold_db=-35, min_silence_ms=300):
        """–£–º–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–∞—É–∑ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"""
        print("‚úÇÔ∏è –£–¥–∞–ª—è—é –ø–∞—É–∑—ã –∏ –∑–∞–º–∏–Ω–∫–∏...")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ pydub –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏—à–∏–Ω–æ–π
        temp_file = "temp_for_silence.wav"
        sf.write(temp_file, y, sr)
        self.temp_files.append(temp_file)
        
        audio = AudioSegment.from_wav(temp_file)
        
        # –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–∫–∏ –±–µ–∑ —Ç–∏—à–∏–Ω—ã
        nonsilent_ranges = detect_nonsilent(
            audio,
            min_silence_len=min_silence_ms,
            silence_thresh=threshold_db,
            seek_step=10
        )
        
        if not nonsilent_ranges:
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–∫–æ–≤ –±–µ–∑ —Ç–∏—à–∏–Ω—ã, –æ—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å")
            return y
        
        # –°–∫–ª–µ–∏–≤–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º–∏ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        cleaned_audio = AudioSegment.empty()
        short_pause = AudioSegment.silent(duration=100)  # 100–º—Å –º–µ–∂–¥—É —Ñ—Ä–∞–∑–∞–º–∏
        
        print(f"üìç –ù–∞–π–¥–µ–Ω–æ {len(nonsilent_ranges)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Ä–µ—á–∏")
        
        for i, (start, end) in enumerate(nonsilent_ranges):
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø —Å –∫—Ä–∞—ë–≤
            start = max(0, start - 50)
            end = min(len(audio), end + 50)
            
            cleaned_audio += audio[start:end]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(nonsilent_ranges) - 1:
                cleaned_audio += short_pause
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        temp_cleaned = "temp_cleaned.wav"
        cleaned_audio.export(temp_cleaned, format="wav")
        self.temp_files.append(temp_cleaned)
        
        y_cleaned, _ = librosa.load(temp_cleaned, sr=sr)
        
        original_duration = len(y) / sr
        cleaned_duration = len(y_cleaned) / sr
        reduction = ((original_duration - cleaned_duration) / original_duration) * 100
        
        print(f"‚úÖ –ü–∞—É–∑—ã —É–¥–∞–ª–µ–Ω—ã: {original_duration:.2f}s -> {cleaned_duration:.2f}s (—Å–æ–∫—Ä–∞—â–µ–Ω–æ –Ω–∞ {reduction:.1f}%)")
        
        return y_cleaned
    
    def enhance_voice(self, y, sr):
        """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–∞"""
        print("üé§ –£–ª—É—á—à–∞—é –∫–∞—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–∞...")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–∫–≤–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –≥–æ–ª–æ—Å–∞ (—É—Å–∏–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã —Ä–µ—á–∏)
        # –ì–æ–ª–æ—Å —á–µ–ª–æ–≤–µ–∫–∞: 300-3400 Hz
        
        # High-pass —Ñ–∏–ª—å—Ç—Ä (—É–±–∏—Ä–∞–µ–º –Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã –¥–æ 80 Hz)
        sos_hp = signal.butter(4, 80, 'hp', fs=sr, output='sos')
        y = signal.sosfilt(sos_hp, y)
        
        # Low-pass —Ñ–∏–ª—å—Ç—Ä (—É–±–∏—Ä–∞–µ–º –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã –≤—ã—à–µ 8000 Hz)
        sos_lp = signal.butter(4, 8000, 'lp', fs=sr, output='sos')
        y = signal.sosfilt(sos_lp, y)
        
        print("‚úÖ –ì–æ–ª–æ—Å —É–ª—É—á—à–µ–Ω")
        return y
    
    def apply_compression(self, y, sr):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏"""
        print("üéõÔ∏è –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–º–ø—Ä–µ—Å—Å–∏—é...")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ pydub
        temp_file = "temp_for_compression.wav"
        sf.write(temp_file, y, sr)
        self.temp_files.append(temp_file)
        
        audio = AudioSegment.from_wav(temp_file)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–∏—é
        compressed = compress_dynamic_range(audio, threshold=-20.0, ratio=4.0, attack=5.0, release=50.0)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ—Å–ª–µ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏
        normalized = normalize(compressed)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        temp_compressed = "temp_compressed.wav"
        normalized.export(temp_compressed, format="wav")
        self.temp_files.append(temp_compressed)
        
        y_compressed, _ = librosa.load(temp_compressed, sr=sr)
        
        print("‚úÖ –ö–æ–º–ø—Ä–µ—Å—Å–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
        return y_compressed
    
    def process_audio(self, output_path="processed_audio.wav"):
        """–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ"""
        print("\n" + "="*60)
        print("üéµ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø AI –û–ë–†–ê–ë–û–¢–ö–ê –ê–£–î–ò–û")
        print("="*60 + "\n")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º
        y, sr = self.load_audio()
        
        # –£–¥–∞–ª—è–µ–º —à—É–º
        y = self.reduce_noise(y, sr)
        
        # –£–ª—É—á—à–∞–µ–º –≥–æ–ª–æ—Å
        y = self.enhance_voice(y, sr)
        
        # –£–¥–∞–ª—è–µ–º –ø–∞—É–∑—ã
        y = self.remove_silence_smart(y, sr)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–∏—é
        y = self.apply_compression(y, sr)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        y = self.normalize_loudness(y)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ: {output_path}")
        sf.write(output_path, y, sr)
        
        print("\n‚úÖ –ê–£–î–ò–û –û–ë–†–ê–ë–û–¢–ê–ù–û –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û!")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.cleanup()
        
        return output_path
    
    def cleanup(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        for temp_file in self.temp_files:
            if os.path.exists(temp_file):
                try:
                    os.remove(temp_file)
                except:
                    pass

def merge_video_audio_pro(video_path, audio_path, output_path="output_video.mp4"):
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞ –≤–∏–¥–µ–æ"""
    
    if not os.path.exists(video_path):
        print(f"‚ùå –û–®–ò–ë–ö–ê: –í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
        return False
    
    if not os.path.exists(audio_path):
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
        return False
    
    # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
    processor = ProAudioProcessor(audio_path)
    processed_audio = processor.process_audio("processed_audio.wav")
    
    print("\n" + "="*60)
    print("üé¨ –ù–ê–õ–û–ñ–ï–ù–ò–ï –ê–£–î–ò–û –ù–ê –í–ò–î–ï–û")
    print("="*60 + "\n")
    
    print("üì• –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...")
    video = VideoFileClip(video_path)
    print(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {video.duration:.2f}s, {video.size}, {video.fps} fps")
    
    print("üì• –ó–∞–≥—Ä—É–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ...")
    audio = AudioFileClip(processed_audio)
    print(f"‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {audio.duration:.2f}s")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
    if audio.duration > video.duration:
        print(f"üîÑ –ê—É–¥–∏–æ –¥–ª–∏–Ω–Ω–µ–µ –≤–∏–¥–µ–æ, –∑–∞—Ü–∏–∫–ª–∏–≤–∞—é –≤–∏–¥–µ–æ...")
        num_loops = int(np.ceil(audio.duration / video.duration))
        video = concatenate_videoclips([video] * num_loops)
        video = video.subclip(0, audio.duration)
        print(f"‚úÖ –í–∏–¥–µ–æ –∑–∞—Ü–∏–∫–ª–µ–Ω–æ {num_loops} —Ä–∞–∑")
    elif audio.duration < video.duration:
        print(f"‚úÇÔ∏è –í–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ –∞—É–¥–∏–æ, –æ–±—Ä–µ–∑–∞—é –≤–∏–¥–µ–æ...")
        video = video.subclip(0, audio.duration)
        print(f"‚úÖ –í–∏–¥–µ–æ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ {audio.duration:.2f}s")
    
    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∞—É–¥–∏–æ
    print("üé≠ –ù–∞–∫–ª–∞–¥—ã–≤–∞—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –Ω–∞ –≤–∏–¥–µ–æ...")
    final_video = video.set_audio(audio)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ: {output_path}")
    print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
    
    final_video.write_videofile(
        output_path,
        codec='libx264',
        audio_codec='aac',
        audio_bitrate='320k',  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ
        fps=video.fps,
        preset='slow',  # –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
        threads=8,
        bitrate='8000k'  # –í—ã—Å–æ–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ
    )
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–ø—ã
    video.close()
    audio.close()
    final_video.close()
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
    if os.path.exists(processed_audio):
        os.remove(processed_audio)
    
    print("\n" + "="*60)
    print(f"‚úÖ –ì–û–¢–û–í–û! –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ: {output_path}")
    print("="*60)
    
    return True

if __name__ == "__main__":
    video_file = r"C:\Users\Admin\Desktop\IMG_5544.MOV"
    audio_file = r"C:\Users\Admin\Desktop\2025_10_12_20_32_58__audio_extractor.net__clean.mp3"
    output_file = r"C:\Users\Admin\Desktop\output_professional.mp4"
    
    print("\n" + "="*70)
    print("üé• –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–ò–î–ï–û –° AI")
    print("="*70)
    print(f"\nüìπ –í–∏–¥–µ–æ: {os.path.basename(video_file)}")
    print(f"üéµ –ê—É–¥–∏–æ: {os.path.basename(audio_file)}")
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç: {os.path.basename(output_file)}\n")
    
    success = merge_video_audio_pro(video_file, audio_file, output_file)
    
    if success:
        print(f"\nüéâ –í–ò–î–ï–û –ì–û–¢–û–í–û: {output_file}")
    else:
        print("\n‚ùå –ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê")

