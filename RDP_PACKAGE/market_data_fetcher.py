#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Market Data Fetcher - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OHLC –¥–∞–Ω–Ω—ã—Ö

–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""

import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import json
from typing import Dict, List, Optional
import warnings
warnings.filterwarnings('ignore')

class MarketDataFetcher:
    def __init__(self):
        self.api_keys = {
            'twelvedata': 'demo',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
            'finnhub': 'your_finnhub_key',  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
            'alpha_vantage': 'your_alpha_vantage_key'  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
        }
        
    def fetch_twelvedata(self, symbol: str, interval: str = '1min', 
                        start_date: str = None, end_date: str = None) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç TwelveData API"""
        print(f"üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ {symbol} –æ—Ç TwelveData...")
        
        try:
            url = "https://api.twelvedata.com/time_series"
            params = {
                'symbol': symbol,
                'interval': interval,
                'apikey': self.api_keys['twelvedata'],
                'outputsize': 5000,
                'format': 'JSON'
            }
            
            if start_date:
                params['start_date'] = start_date
            if end_date:
                params['end_date'] = end_date
            
            response = requests.get(url, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                if 'values' in data:
                    df = pd.DataFrame(data['values'])
                    df['datetime'] = pd.to_datetime(df['datetime'])
                    df = df.sort_values('datetime')
                    df.set_index('datetime', inplace=True)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã
                    for col in ['open', 'high', 'low', 'close', 'volume']:
                        if col in df.columns:
                            df[col] = pd.to_numeric(df[col], errors='coerce')
                    
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                    return df
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {data}")
                    return None
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def fetch_finnhub(self, symbol: str, resolution: str = '1', 
                     start_time: int = None, end_time: int = None) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Finnhub API"""
        print(f"üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ {symbol} –æ—Ç Finnhub...")
        
        try:
            url = "https://finnhub.io/api/v1/stock/candle"
            params = {
                'symbol': symbol,
                'resolution': resolution,
                'token': self.api_keys['finnhub']
            }
            
            if start_time:
                params['from'] = start_time
            if end_time:
                params['to'] = end_time
            
            response = requests.get(url, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('s') == 'ok':
                    df = pd.DataFrame({
                        'datetime': pd.to_datetime(data['t'], unit='s'),
                        'open': data['o'],
                        'high': data['h'],
                        'low': data['l'],
                        'close': data['c'],
                        'volume': data['v']
                    })
                    df.set_index('datetime', inplace=True)
                    
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                    return df
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {data}")
                    return None
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def generate_synthetic_data(self, symbol: str, start_time: datetime, 
                               end_time: datetime, interval_minutes: int = 1) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        print(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
        time_range = pd.date_range(start=start_time, end=end_time, freq=f'{interval_minutes}min')
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–º–≤–æ–ª–∞
        if 'EUR' in symbol:
            base_price = 1.1000
            volatility = 0.0005
        elif 'JPY' in symbol:
            base_price = 110.0
            volatility = 0.5
        elif 'GBP' in symbol:
            base_price = 1.3000
            volatility = 0.0008
        elif 'AUD' in symbol:
            base_price = 0.7500
            volatility = 0.0006
        elif 'CAD' in symbol:
            base_price = 1.3500
            volatility = 0.0004
        elif 'CHF' in symbol:
            base_price = 0.9200
            volatility = 0.0003
        else:
            base_price = 1.0000
            volatility = 0.0005
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—É–∂–¥–∞–Ω–∏–µ
        np.random.seed(hash(symbol) % 2**32)  # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å
        n_points = len(time_range)
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–¥ (–Ω–µ–±–æ–ª—å—à–æ–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π)
        trend = np.linspace(0, 0.01, n_points)
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        random_walk = np.cumsum(np.random.normal(0, volatility, n_points))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        prices = base_price + trend + random_walk
        
        # –°–æ–∑–¥–∞–µ–º OHLC –¥–∞–Ω–Ω—ã–µ
        ohlc_data = []
        for i, (timestamp, price) in enumerate(zip(time_range, prices)):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ OHLC
            price_change = np.random.normal(0, volatility * 0.5)
            open_price = price + price_change
            
            high_low_range = np.random.uniform(0.5, 2.0) * volatility
            high = max(open_price, price) + np.random.uniform(0, high_low_range)
            low = min(open_price, price) - np.random.uniform(0, high_low_range)
            
            close_price = price + np.random.normal(0, volatility * 0.3)
            
            # –û–±—ä–µ–º
            volume = np.random.randint(100, 1000)
            
            ohlc_data.append({
                'datetime': timestamp,
                'open': open_price,
                'high': high,
                'low': low,
                'close': close_price,
                'volume': volume
            })
        
        df = pd.DataFrame(ohlc_data)
        df.set_index('datetime', inplace=True)
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
        return df
    
    def add_technical_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        # SMA
        df['sma_20'] = df['close'].rolling(window=20).mean()
        df['sma_50'] = df['close'].rolling(window=50).mean()
        
        # RSI
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        
        # Bollinger Bands
        df['bb_middle'] = df['close'].rolling(window=20).mean()
        bb_std = df['close'].rolling(window=20).std()
        df['bb_upper'] = df['bb_middle'] + (bb_std * 2)
        df['bb_lower'] = df['bb_middle'] - (bb_std * 2)
        
        # MACD
        exp1 = df['close'].ewm(span=12).mean()
        exp2 = df['close'].ewm(span=26).mean()
        df['macd'] = exp1 - exp2
        df['macd_signal'] = df['macd'].ewm(span=9).mean()
        df['macd_histogram'] = df['macd'] - df['macd_signal']
        
        # Stochastic
        low_14 = df['low'].rolling(window=14).min()
        high_14 = df['high'].rolling(window=14).max()
        df['stoch_k'] = 100 * ((df['close'] - low_14) / (high_14 - low_14))
        df['stoch_d'] = df['stoch_k'].rolling(window=3).mean()
        
        return df
    
    def fetch_data_for_pairs(self, pairs: List[str], start_date: str = None, end_date: str = None) -> Dict[str, pd.DataFrame]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä"""
        print(f"\nüìä –ü–û–õ–£–ß–ï–ù–ò–ï –†–´–ù–û–ß–ù–´–• –î–ê–ù–ù–´–•:")
        print("=" * 50)
        
        print(f"–ü–∞—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {pairs}")
        
        if not start_date:
            start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        if not end_date:
            end_date = datetime.now().strftime('%Y-%m-%d')
        
        print(f"–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {start_date} - {end_date}")
        
        market_data = {}
        
        for pair in pairs:
            print(f"\nüìà –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {pair}...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            df_real = self.fetch_twelvedata(pair, '1min', start_date, end_date)
            
            if df_real is not None and len(df_real) > 0:
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {pair}")
                market_data[pair] = self.add_technical_indicators(df_real)
            else:
                print(f"‚ö†Ô∏è  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {pair}")
                start_time = datetime.strptime(start_date, '%Y-%m-%d')
                end_time = datetime.strptime(end_date, '%Y-%m-%d')
                df_synthetic = self.generate_synthetic_data(pair, start_time, end_time)
                market_data[pair] = self.add_technical_indicators(df_synthetic)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.5)
        
        print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(market_data)} –ø–∞—Ä")
        return market_data
    
    def save_market_data(self, market_data: Dict[str, pd.DataFrame], 
                        filename: str = "market_data.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        print(f"\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–´–ù–û–ß–ù–´–• –î–ê–ù–ù–´–•:")
        print("=" * 50)
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DataFrames –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è JSON
            data_to_save = {}
            for pair, df in market_data.items():
                data_to_save[pair] = {
                    'data': df.reset_index().to_dict('records'),
                    'columns': list(df.columns),
                    'index_name': df.index.name
                }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data_to_save, f, default=str, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False


def test_market_data_fetcher():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MarketDataFetcher"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MarketDataFetcher...")
    
    try:
        fetcher = MarketDataFetcher()
        print("‚úÖ MarketDataFetcher —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EUR/USD
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö EUR/USD:")
        df = fetcher.fetch_twelvedata("EUR/USD", "5min")
        
        if df is not None and not df.empty:
            print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {len(df)} —Å–≤–µ—á–µ–π")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {df.iloc[-1]['close']:.5f}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df_with_indicators = fetcher.add_technical_indicators(df)
            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
            
        else:
            print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ")
            start_time = datetime.now() - timedelta(days=1)
            end_time = datetime.now()
            df_synthetic = fetcher.generate_synthetic_data("EUR/USD", start_time, end_time)
            print(f"   ‚úÖ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(df_synthetic)} —Å–≤–µ—á–µ–π")
            
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä:")
        pairs = ["EUR/USD", "GBP/USD"]
        market_data = fetcher.fetch_data_for_pairs(pairs)
        
        if market_data:
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(market_data)} –ø–∞—Ä")
            for pair, data in market_data.items():
                print(f"   {pair}: {len(data)} —Å–≤–µ—á–µ–π")
        else:
            print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    test_market_data_fetcher()
