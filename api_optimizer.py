#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API Optimizer - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –≤—Å–µ—Ö API
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–æ—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–µ–∑ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤

–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""

import time
import asyncio
import aiohttp
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import logging

logger = logging.getLogger(__name__)

@dataclass
class APILimit:
    """–õ–∏–º–∏—Ç—ã API"""
    requests_per_minute: int
    requests_per_day: int
    current_minute_requests: int = 0
    current_day_requests: int = 0
    last_minute_reset: float = 0
    last_day_reset: float = 0

class APIOptimizer:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π"""
    
    def __init__(self, api_keys: List[str] = None):
        # –ö–ª—é—á–∏ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        self.api_keys = api_keys or []
        self.current_key_index = 0
        # –õ–∏–º–∏—Ç—ã API (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã)
        self.limits = {
            'finnhub': APILimit(
                requests_per_minute=60,  # –û–°–ù–û–í–ù–û–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                requests_per_day=10000
            ),
            'twelvedata': APILimit(
                requests_per_minute=8,   # –¢–æ–ª—å–∫–æ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                requests_per_day=1000
            ),
            'taapi': APILimit(
                requests_per_minute=10,
                requests_per_day=100
            ),
            'newsapi': APILimit(
                requests_per_minute=100,
                requests_per_day=1000
            ),
            'myfxbook': APILimit(
                requests_per_minute=1000,  # –ë–µ–∑ –ª–∏–º–∏—Ç–æ–≤
                requests_per_day=10000
            )
        }
        
        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã)
        self.cache = {}
        self.cache_duration = {
            'finnhub': 300,     # 5 –º–∏–Ω—É—Ç - –û–°–ù–û–í–ù–û–ô –∏—Å—Ç–æ—á–Ω–∏–∫
            'twelvedata': 600,  # 10 –º–∏–Ω—É—Ç - —Ä–µ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
            'taapi': 900,       # 15 –º–∏–Ω—É—Ç (—Ä–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 3 —Ü–∏–∫–ª–∞)
            'newsapi': 300,     # 5 –º–∏–Ω—É—Ç
            'myfxbook': 300     # 5 –º–∏–Ω—É—Ç
        }
        
        # –†–æ—Ç–∞—Ü–∏—è –¥–ª—è TAAPI.IO
        self.taapi_rotation = {
            'cycle': 0,
            'indicators': ['rsi', 'macd', 'bollinger', 'cci', 'adx'],
            'current_indicator': 0
        }
        
        # API –∫–ª—é—á–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
        self.api_keys = {
            'twelvedata': 'demo',
            'taapi': 'your_taapi_key',
            'newsapi': 'your_newsapi_key',
            'myfxbook': {
                'email': 'your_email',
                'password': 'your_password'
            },
            'finnhub': 'your_finnhub_key'
        }
    
    def can_make_request(self, api_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API"""
        if api_name not in self.limits:
            return True
            
        limit = self.limits[api_name]
        current_time = time.time()
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
        if current_time - limit.last_minute_reset >= 60:
            limit.current_minute_requests = 0
            limit.last_minute_reset = current_time
            
        if current_time - limit.last_day_reset >= 86400:  # 24 —á–∞—Å–∞
            limit.current_day_requests = 0
            limit.last_day_reset = current_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if limit.current_minute_requests >= limit.requests_per_minute:
            return False
        if limit.current_day_requests >= limit.requests_per_day:
            return False
            
        return True
    
    def record_request(self, api_name: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        if api_name in self.limits:
            self.limits[api_name].current_minute_requests += 1
            self.limits[api_name].current_day_requests += 1
    
    def get_cached_data(self, api_name: str, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
        cache_key = f"{api_name}_{key}"
        if cache_key in self.cache:
            data, timestamp = self.cache[cache_key]
            if time.time() - timestamp < self.cache_duration.get(api_name, 300):
                return data
            else:
                del self.cache[cache_key]
        return None
    
    def set_cached_data(self, api_name: str, key: str, data: Any):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        cache_key = f"{api_name}_{key}"
        self.cache[cache_key] = (data, time.time())
    
    async def get_finnhub_bulk(self, pairs: List[str]) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Finnhub –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä –∑–∞ 1 –∑–∞–ø—Ä–æ—Å (–û–°–ù–û–í–ù–û–ô –∏—Å—Ç–æ—á–Ω–∏–∫)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"bulk_{','.join(pairs)}"
            cached_data = self.get_cached_data('finnhub', cache_key)
            if cached_data:
                logger.info("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Finnhub")
                return cached_data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not self.can_make_request('finnhub'):
                logger.warning("‚ö†Ô∏è –õ–∏–º–∏—Ç Finnhub –∏—Å—á–µ—Ä–ø–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à")
                return {}
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ Finnhub –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            bulk_data = {}
            async with aiohttp.ClientSession() as session:
                for pair in pairs:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—É –¥–ª—è Finnhub (EUR/USD -> OANDA:EUR_USD)
                    finnhub_symbol = f"OANDA:{pair.replace('/', '_')}"
                    
                    params = {
                        'symbol': finnhub_symbol,
                        'token': self.api_keys['finnhub']
                    }
                    
                    async with session.get('https://finnhub.io/api/v1/quote', params=params) as response:
                        if response.status == 200:
                            data = await response.json()
                            if 'c' in data:  # 'c' = current price
                                bulk_data[pair] = {
                                    'close': data['c'],
                                    'high': data.get('h', data['c']),
                                    'low': data.get('l', data['c']),
                                    'open': data.get('o', data['c']),
                                    'volume': data.get('v', 1000000)
                                }
            
            if bulk_data:
                self.record_request('finnhub')
                self.set_cached_data('finnhub', cache_key, bulk_data)
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Finnhub –¥–ª—è {len(bulk_data)} –ø–∞—Ä")
                return bulk_data
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Finnhub")
                return {}
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Finnhub: {e}")
            return {}
    
    async def get_twelvedata_special(self, symbol: str, data_type: str = "economic") -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Twelvedata (—Ç–æ–ª—å–∫–æ —Ç–æ, —á–µ–≥–æ –Ω–µ—Ç –≤ Finnhub)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"special_{symbol}_{data_type}"
            cached_data = self.get_cached_data('twelvedata', cache_key)
            if cached_data:
                logger.info(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Twelvedata –¥–ª—è {symbol}")
                return cached_data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not self.can_make_request('twelvedata'):
                logger.warning("‚ö†Ô∏è –õ–∏–º–∏—Ç Twelvedata –∏—Å—á–µ—Ä–ø–∞–Ω")
                return {}
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            params = {
                'symbol': symbol,
                'apikey': self.api_keys['twelvedata']
            }
            
            # –í—ã–±–∏—Ä–∞–µ–º endpoint –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
            if data_type == "economic":
                url = 'https://api.twelvedata.com/economic_indicators'
            else:
                url = 'https://api.twelvedata.com/quote'
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        self.record_request('twelvedata')
                        self.set_cached_data('twelvedata', cache_key, data)
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Twelvedata –¥–ª—è {symbol}")
                        return data
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Twelvedata: {response.status}")
                        return {}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Twelvedata: {e}")
            return {}
    
    def get_next_taapi_indicator(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ TAAPI.IO"""
        indicator = self.taapi_rotation['indicators'][self.taapi_rotation['current_indicator']]
        self.taapi_rotation['current_indicator'] = (self.taapi_rotation['current_indicator'] + 1) % len(self.taapi_rotation['indicators'])
        return indicator
    
    def should_use_taapi(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TAAPI.IO –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ"""
        self.taapi_rotation['cycle'] += 1
        return self.taapi_rotation['cycle'] % 3 == 0  # –ö–∞–∂–¥—ã–π 3-–π —Ü–∏–∫–ª
    
    def get_api_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö API"""
        status = {}
        for api_name, limit in self.limits.items():
            status[api_name] = {
                'minute_requests': f"{limit.current_minute_requests}/{limit.requests_per_minute}",
                'day_requests': f"{limit.current_day_requests}/{limit.requests_per_day}",
                'can_request': self.can_make_request(api_name)
            }
        return status
    
    def get_current_api_key(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π API –∫–ª—é—á –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if not self.api_keys:
            return ""
        return self.api_keys[self.current_key_index]
    
    def rotate_api_key(self) -> str:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π API –∫–ª—é—á"""
        if len(self.api_keys) <= 1:
            return self.get_current_api_key()
        
        self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)
        new_key = self.get_current_api_key()
        logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ API –∫–ª—é—á #{self.current_key_index + 1}")
        return new_key


def test_api_optimizer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ APIOptimizer"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ APIOptimizer...")
    
    try:
        optimizer = APIOptimizer()
        print("‚úÖ APIOptimizer —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤:")
        for api_name in ['twelvedata', 'finnhub']:
            can_request = optimizer.can_make_request(api_name)
            print(f"   {api_name}: –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å = {can_request}")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞:")
        optimizer.record_request('twelvedata')
        print("   ‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω")
        
        # –¢–µ—Å—Ç –∫—ç—à–∞
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –∫—ç—à–∞:")
        test_data = {'test': 'data'}
        optimizer.set_cached_data('test_api', 'test_key', test_data)
        cached = optimizer.get_cached_data('test_api', 'test_key')
        print(f"   –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç: {cached == test_data}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ API
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ API:")
        status = optimizer.get_api_status()
        for api_name, api_status in status.items():
            print(f"   {api_name}: {api_status['minute_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    test_api_optimizer()
