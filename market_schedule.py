#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Ñ–æ—Ä–µ–∫—Å —Ä—ã–Ω–∫–∞
–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞ —Å 6:00 –¥–æ 22:00 (–µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–µ –≤—Ä–µ–º—è)
"""

from datetime import datetime, time
import pytz
from typing import Tuple, Dict

class MarketSchedule:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ñ–æ—Ä–µ–∫—Å —Ä—ã–Ω–∫–∞"""
    
    def __init__(self, timezone: str = "Europe/Berlin"):
        self.timezone = pytz.timezone(timezone)
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ä—ã–Ω–∫–∞ (–µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–µ –≤—Ä–µ–º—è)
        self.market_open_time = time(6, 0)   # 06:00
        self.market_close_time = time(22, 0) # 22:00
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–µ–∫—Å —Ä—ã–Ω–∫–∞ (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å 22:00 –¥–æ 6:00 –ø–æ –±—É–¥–Ω—è–º)
        self.forex_restricted_start = time(22, 0)  # 22:00
        self.forex_restricted_end = time(6, 0)     # 06:00
        
        # –†–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫=0, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6)
        self.working_days = [0, 1, 2, 3, 4]  # –ü–Ω-–ü—Ç
    
    def is_market_open(self, check_time: datetime = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Ä—ã–Ω–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        if check_time is None:
            check_time = datetime.now(self.timezone)
        else:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–µ –≤—Ä–µ–º—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if check_time.tzinfo is None:
                check_time = self.timezone.localize(check_time)
            else:
                check_time = check_time.astimezone(self.timezone)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        if check_time.weekday() not in self.working_days:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        current_time = check_time.time()
        return self.market_open_time <= current_time <= self.market_close_time
    
    def is_forex_available(self, check_time: datetime = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ñ–æ—Ä–µ–∫—Å —Ä—ã–Ω–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å 22:00 –¥–æ 6:00 –ø–æ –±—É–¥–Ω—è–º)"""
        if check_time is None:
            check_time = datetime.now(self.timezone)
        else:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–µ –≤—Ä–µ–º—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if check_time.tzinfo is None:
                check_time = self.timezone.localize(check_time)
            else:
                check_time = check_time.astimezone(self.timezone)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        if check_time.weekday() not in self.working_days:
            return True  # –í –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–æ—Ä–µ–∫—Å –¥–æ—Å—Ç—É–ø–µ–Ω
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (22:00-06:00)
        current_time = check_time.time()
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –º–µ–∂–¥—É 22:00 –∏ 23:59 –∏–ª–∏ –º–µ–∂–¥—É 00:00 –∏ 06:00 - —Ñ–æ—Ä–µ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if (current_time >= self.forex_restricted_start or 
            current_time < self.forex_restricted_end):
            return False
        
        return True
    
    def get_market_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Ä—ã–Ω–∫–∞"""
        now = datetime.now(self.timezone)
        is_open = self.is_market_open(now)
        forex_available = self.is_forex_available(now)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è
        if is_open:
            # –†—ã–Ω–æ–∫ –æ—Ç–∫—Ä—ã—Ç - —Å—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_today = self.timezone.localize(
                datetime.combine(now.date(), self.market_close_time)
            )
            time_until_change = close_today - now
            next_event = "–∑–∞–∫—Ä—ã—Ç–∏–µ"
        else:
            # –†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç - —Å—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –¥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
            next_open = self._get_next_open_time(now)
            time_until_change = next_open - now
            next_event = "–æ—Ç–∫—Ä—ã—Ç–∏–µ"
        
        return {
            'is_open': is_open,
            'forex_available': forex_available,
            'current_time': now.strftime('%H:%M:%S'),
            'current_day': self._get_day_name(now.weekday()),
            'next_event': next_event,
            'time_until_change': str(time_until_change).split('.')[0],  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
            'market_hours': f"{self.market_open_time.strftime('%H:%M')}-{self.market_close_time.strftime('%H:%M')}",
            'working_days': "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞",
            'forex_restriction': "–§–æ—Ä–µ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å 22:00 –¥–æ 6:00 –ø–æ –±—É–¥–Ω—è–º"
        }
    
    def _get_next_open_time(self, current_time: datetime) -> datetime:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä—ã–Ω–∫–∞"""
        current_date = current_time.date()
        
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
        if (current_time.weekday() in self.working_days and 
            current_time.time() < self.market_open_time):
            return self.timezone.localize(
                datetime.combine(current_date, self.market_open_time)
            )
        
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
        days_ahead = 1
        while True:
            next_date = current_date.replace(day=current_date.day + days_ahead)
            try:
                next_datetime = datetime.combine(next_date, self.market_open_time)
                next_datetime = self.timezone.localize(next_datetime)
                
                if next_datetime.weekday() in self.working_days:
                    return next_datetime
                    
                days_ahead += 1
                if days_ahead > 7:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                    break
            except ValueError:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ—Å—è—Ü–∞
                if current_date.month == 12:
                    next_date = current_date.replace(year=current_date.year + 1, month=1, day=1)
                else:
                    next_date = current_date.replace(month=current_date.month + 1, day=1)
                days_ahead = (next_date - current_date).days
        
        # Fallback - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
        days_until_monday = (7 - current_time.weekday()) % 7
        if days_until_monday == 0:
            days_until_monday = 7
        
        next_monday = current_date.replace(day=current_date.day + days_until_monday)
        return self.timezone.localize(
            datetime.combine(next_monday, self.market_open_time)
        )
    
    def _get_day_name(self, weekday: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        days = {
            0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            1: "–í—Ç–æ—Ä–Ω–∏–∫", 
            2: "–°—Ä–µ–¥–∞",
            3: "–ß–µ—Ç–≤–µ—Ä–≥",
            4: "–ü—è—Ç–Ω–∏—Ü–∞",
            5: "–°—É–±–±–æ—Ç–∞",
            6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        return days.get(weekday, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    def get_market_message(self, user_lang: str = "ru") -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from i18n_signals import get_interface_text
        except ImportError:
            # Fallback to Russian if i18n_signals is not available
            return self._get_fallback_market_message()
        
        status = self.get_market_status()
        
        if status['is_open']:
            forex_status = "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω" if status['forex_available'] else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (22:00-06:00)"
            return (
                f"üü¢ <b>{get_interface_text('market_open', 'title', user_lang)}</b>\n\n"
                f"üïí {get_interface_text('market_status', 'current_time', user_lang)}: {status['current_time']} ({status['current_day']})\n"
                f"‚è∞ {get_interface_text('market_status', 'open_until', user_lang)}: {self.market_close_time.strftime('%H:%M')}\n"
                f"‚è≥ {get_interface_text('market_status', 'until_close', user_lang)}: {status['time_until_change']}\n"
                f"üìä –§–æ—Ä–µ–∫—Å: {forex_status}\n\n"
                f"üí° {get_interface_text('market_open', 'description', user_lang)}"
            )
        else:
            return (
                f"üî¥ <b>{get_interface_text('market_closed', 'title', user_lang)}</b>\n\n"
                f"üïí {get_interface_text('market_status', 'current_time', user_lang)}: {status['current_time']} ({status['current_day']})\n"
                f"üìÖ {get_interface_text('market_status', 'working_days', user_lang)}: {status['working_days']}\n"
                f"‚è∞ {get_interface_text('market_status', 'working_hours', user_lang)}: {status['market_hours']}\n"
                f"‚è≥ {get_interface_text('market_status', 'until_open', user_lang)}: {status['time_until_change']}\n\n"
                f"üí° {get_interface_text('market_closed', 'description', user_lang)}"
            )
    
    def _get_fallback_market_message(self) -> str:
        """Fallback market message in Russian if translations are not available"""
        status = self.get_market_status()
        
        if status['is_open']:
            forex_status = "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω" if status['forex_available'] else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (22:00-06:00)"
            return (
                f"üü¢ <b>–†—ã–Ω–æ–∫ –û–¢–ö–†–´–¢</b>\n\n"
                f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {status['current_time']} ({status['current_day']})\n"
                f"‚è∞ –†–∞–±–æ—Ç–∞–µ—Ç –¥–æ: {self.market_close_time.strftime('%H:%M')}\n"
                f"‚è≥ –î–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {status['time_until_change']}\n"
                f"üìä –§–æ—Ä–µ–∫—Å: {forex_status}\n\n"
                f"üí° –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã!"
            )
        else:
            return (
                f"üî¥ <b>–†—ã–Ω–æ–∫ –ó–ê–ö–†–´–¢</b>\n\n"
                f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {status['current_time']} ({status['current_day']})\n"
                f"üìÖ –†–∞–±–æ—á–∏–µ –¥–Ω–∏: {status['working_days']}\n"
                f"‚è∞ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: {status['market_hours']}\n"
                f"‚è≥ –î–æ –æ—Ç–∫—Ä—ã—Ç–∏—è: {status['time_until_change']}\n\n"
                f"üí° –°–µ–π—á–∞—Å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.\n"
                f"–†–µ–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ä—ã–Ω–∫–∞."
            )


def test_market_schedule():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä—ã–Ω–∫–∞"""
    print("üìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä—ã–Ω–∫–∞...")
    
    schedule = MarketSchedule()
    
    # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    print("\nüïí –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:")
    status = schedule.get_market_status()
    for key, value in status.items():
        print(f"   {key}: {value}")
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\nüì± –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    message = schedule.get_market_message()
    print(message)
    
    # –¢–µ—Å—Ç —Ä–∞–∑–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    print("\nüß™ –¢–µ—Å—Ç —Ä–∞–∑–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:")
    test_times = [
        datetime(2025, 9, 19, 5, 30),   # –ß–µ—Ç–≤–µ—Ä–≥ 05:30 - –∑–∞–∫—Ä—ã—Ç
        datetime(2025, 9, 19, 10, 0),   # –ß–µ—Ç–≤–µ—Ä–≥ 10:00 - –æ—Ç–∫—Ä—ã—Ç
        datetime(2025, 9, 19, 23, 0),   # –ß–µ—Ç–≤–µ—Ä–≥ 23:00 - –∑–∞–∫—Ä—ã—Ç
        datetime(2025, 9, 21, 12, 0),   # –°—É–±–±–æ—Ç–∞ 12:00 - –∑–∞–∫—Ä—ã—Ç
        datetime(2025, 9, 22, 12, 0),   # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 12:00 - –∑–∞–∫—Ä—ã—Ç
    ]
    
    for test_time in test_times:
        is_open = schedule.is_market_open(test_time)
        forex_available = schedule.is_forex_available(test_time)
        market_status = "üü¢ –û–¢–ö–†–´–¢" if is_open else "üî¥ –ó–ê–ö–†–´–¢"
        forex_status = "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω" if forex_available else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        print(f"   {test_time.strftime('%A %H:%M')}: –†—ã–Ω–æ–∫ {market_status}, –§–æ—Ä–µ–∫—Å {forex_status}")


if __name__ == "__main__":
    test_market_schedule()
