#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import requests
import json
import time

API_BASE = "http://localhost:5000"

def test_active_signals_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    test_user_id = "511442168"
    
    # 1. –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞...")
    signal_data = {
        "user_id": test_user_id,
        "signal": {
            "signal_id": "otc_EUR_USD_1234567890",
            "pair": "EUR/USD (OTC)",
            "direction": "SELL",
            "confidence": 0.75,
            "entry_price": 1.18500,
            "expiration": 3,
            "start_time": int(time.time() * 1000)
        }
    }
    
    response = requests.post(f"{API_BASE}/api/signal/activate", json=signal_data)
    result = response.json()
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {result}")
    
    if result.get('success'):
        print("   ‚úÖ –°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {result.get('error')}")
        return False
    
    # 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞...")
    response = requests.get(f"{API_BASE}/api/signal/active?user_id={test_user_id}")
    result = response.json()
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {result}")
    
    if result.get('success') and result.get('active_signal'):
        print("   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω")
    else:
        print("   ‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # 3. –¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...")
    response = requests.post(f"{API_BASE}/api/signal/activate", json=signal_data)
    result = response.json()
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {result}")
    
    if result.get('error') == 'User already has active signal':
        print("   ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
    else:
        print("   ‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
        return False
    
    # 4. –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å —Ñ–∏–¥–±–µ–∫–æ–º
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞...")
    complete_data = {
        "user_id": test_user_id,
        "feedback": "success"
    }
    
    response = requests.post(f"{API_BASE}/api/signal/complete", json=complete_data)
    result = response.json()
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {result}")
    
    if result.get('success'):
        print("   ‚úÖ –°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {result.get('error')}")
        return False
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—á–∏—â–µ–Ω
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞...")
    response = requests.get(f"{API_BASE}/api/signal/active?user_id={test_user_id}")
    result = response.json()
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {result}")
    
    if result.get('success') and not result.get('active_signal'):
        print("   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—á–∏—â–µ–Ω")
    else:
        print("   ‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–µ –æ—á–∏—â–µ–Ω")
        return False
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    try:
        success = test_active_signals_system()
        if success:
            print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
