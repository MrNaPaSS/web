/**
 * API Client –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –æ—à–∏–±–∫–∏
 */

const API_BASE_URL = window.location.hostname === 'app.nomoneynohoney.online' 
  ? 'https://bot.nomoneynohoney.online' 
  : 'http://localhost:5000'

class ApiClient {
  constructor() {
    this.baseURL = API_BASE_URL
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage
   */
  getToken() {
    return localStorage.getItem('auth_token')
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
   */
  setToken(token) {
    localStorage.setItem('auth_token', token)
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
   */
  removeToken() {
    localStorage.removeItem('auth_token')
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
   */
  hasToken() {
    return !!this.getToken()
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  handleAuthError(response) {
    if (response.status === 401) {
      console.log('üîê Token expired or invalid, logging out...')
      this.removeToken()
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (window.showNotification) {
        window.showNotification({
          type: 'error',
          message: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.'
        })
      }
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      setTimeout(() => {
        window.location.reload()
      }, 2000)
      
      return true
    }
    return false
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async request(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`
    const token = this.getToken()
    
    const headers = {
      'Content-Type': 'application/json',
      ...options.headers
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º JWT —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
    if (token) {
      headers['Authorization'] = `Bearer ${token}`
    }
    
    const config = {
      ...options,
      headers
    }
    
    try {
      console.log(`üåê API Request: ${options.method || 'GET'} ${url}`)
      
      const response = await fetch(url, config)
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (this.handleAuthError(response)) {
        throw new Error('Authentication failed')
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      console.log(`üì° API Response: ${response.status} ${response.statusText}`)
      
      return response
      
    } catch (error) {
      console.error(`‚ùå API Error: ${error.message}`)
      throw error
    }
  }

  /**
   * GET –∑–∞–ø—Ä–æ—Å
   */
  async get(endpoint, options = {}) {
    return this.request(endpoint, {
      method: 'GET',
      ...options
    })
  }

  /**
   * POST –∑–∞–ø—Ä–æ—Å
   */
  async post(endpoint, data, options = {}) {
    return this.request(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
      ...options
    })
  }

  /**
   * PUT –∑–∞–ø—Ä–æ—Å
   */
  async put(endpoint, data, options = {}) {
    return this.request(endpoint, {
      method: 'PUT',
      body: JSON.stringify(data),
      ...options
    })
  }

  /**
   * DELETE –∑–∞–ø—Ä–æ—Å
   */
  async delete(endpoint, options = {}) {
    return this.request(endpoint, {
      method: 'DELETE',
      ...options
    })
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async login(userData, initData) {
    try {
      const response = await this.post('/api/auth/login', {
        userData,
        initData
      })
      
      const data = await response.json()
      
      if (data.success && data.token) {
        this.setToken(data.token)
        console.log('‚úÖ Login successful, token saved')
        return data
      } else {
        throw new Error(data.error || 'Login failed')
      }
      
    } catch (error) {
      console.error('‚ùå Login error:', error)
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserSubscriptions(userId) {
    try {
      const response = await this.get(`/api/user/subscriptions?user_id=${userId}`)
      const data = await response.json()
      
      if (data.success) {
        return data.subscriptions
      } else {
        throw new Error(data.error || 'Failed to get subscriptions')
      }
      
    } catch (error) {
      console.error('‚ùå Get subscriptions error:', error)
      throw error
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
   */
  async updateUserSubscriptions(userId, subscriptions) {
    try {
      const response = await this.post('/api/user/subscriptions', {
        user_id: userId,
        subscriptions
      })
      
      const data = await response.json()
      
      if (data.success) {
        return true
      } else {
        throw new Error(data.error || 'Failed to update subscriptions')
      }
      
    } catch (error) {
      console.error('‚ùå Update subscriptions error:', error)
      throw error
    }
  }

  /**
   * –í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
   */
  async grantSubscription(userId, modelId, expiryDays = null) {
    try {
      const response = await this.post(`/api/admin/user/${userId}/subscription/${modelId}`, {
        expiry_days: expiryDays
      })
      
      const data = await response.json()
      
      if (data.success) {
        return true
      } else {
        throw new Error(data.error || 'Failed to grant subscription')
      }
      
    } catch (error) {
      console.error('‚ùå Grant subscription error:', error)
      throw error
    }
  }

  /**
   * –û—Ç–∑—ã–≤ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
   */
  async revokeSubscription(userId, modelId) {
    try {
      const response = await this.delete(`/api/admin/user/${userId}/subscription/${modelId}`)
      
      const data = await response.json()
      
      if (data.success) {
        return true
      } else {
        throw new Error(data.error || 'Failed to revoke subscription')
      }
      
    } catch (error) {
      console.error('‚ùå Revoke subscription error:', error)
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
   */
  async getAllUsers() {
    try {
      const response = await this.get('/api/admin/users')
      const data = await response.json()
      
      if (data.success) {
        return data.users
      } else {
        throw new Error(data.error || 'Failed to get users')
      }
      
    } catch (error) {
      console.error('‚ùå Get users error:', error)
      throw error
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
   */
  async deleteUser(telegramId) {
    try {
      const response = await this.delete(`/api/admin/user/${telegramId}`)
      const data = await response.json()
      
      if (data.success) {
        return true
      } else {
        throw new Error(data.error || 'Failed to delete user')
      }
      
    } catch (error) {
      console.error('‚ùå Delete user error:', error)
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–∞–º–æ–ª–µ—á–µ–Ω–∏—è)
   */
  async getMySubscriptions() {
    try {
      const response = await this.get('/api/auth/my-subscriptions')
      const data = await response.json()
      
      if (data.success) {
        return data.subscriptions
      } else {
        throw new Error(data.error || 'Failed to get subscriptions')
      }
      
    } catch (error) {
      console.error('‚ùå Get my subscriptions error:', error)
      throw error
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API
   */
  async healthCheck() {
    try {
      const response = await this.get('/api/health')
      const data = await response.json()
      return data.success
    } catch (error) {
      console.error('‚ùå Health check failed:', error)
      return false
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const apiClient = new ApiClient()

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default apiClient

// –¢–∞–∫–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
export { ApiClient }
