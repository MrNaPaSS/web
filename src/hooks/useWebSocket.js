import { useEffect, useRef, useState } from 'react';
import { subscriptionService } from '../services/subscriptionService';
import { syncService } from '../services/syncService';

export const useWebSocket = (userId, onSubscriptionUpdate, onNotification) => {
  const wsRef = useRef(null);
  const reconnectTimeoutRef = useRef(null);
  const [isConnected, setIsConnected] = useState(false);
  const [reconnectAttempts, setReconnectAttempts] = useState(0);
  const maxReconnectAttempts = 10;

  useEffect(() => {
    if (!userId) return;

    const connectWebSocket = () => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL WebSocket —Å–µ—Ä–≤–µ—Ä–∞
      const wsUrl = window.location.hostname === 'app.nomoneynohoney.online' 
        ? `wss://bot.nomoneynohoney.online/ws/${userId}`
        : `ws://localhost:8001/ws/${userId}`;
      
      console.log('üîå Connecting to WebSocket:', wsUrl);
      const ws = new WebSocket(wsUrl);
      wsRef.current = ws;

      ws.onopen = () => {
        console.log('‚úÖ WebSocket connected');
        setIsConnected(true);
        setReconnectAttempts(0);
      };

      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log('üì• WebSocket message received:', data);
          
          if (data.type === 'subscription_update') {
            console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:', data.subscriptions);
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const newSubscriptions = [...data.subscriptions];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º subscriptionService
            subscriptionService.currentSubscriptions = newSubscriptions;
            subscriptionService.cacheSubscriptions(newSubscriptions);
            subscriptionService.notify();
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
            syncService.broadcastSubscriptionUpdate(newSubscriptions);
            
            // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            onSubscriptionUpdate(newSubscriptions);
            
          } else if (data.type === 'subscription_approved') {
            console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞:', data);
            if (onNotification) {
              onNotification('success', '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!', `–ú–æ–¥–µ–ª—å ${data.model_id} —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.`)
            }
            onSubscriptionUpdate([...data.subscriptions]);
          } else if (data.type === 'subscription_rejected') {
            console.log('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:', data);
            if (onNotification) {
              onNotification('error', '–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω', `–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: ${data.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`)
            }
          } else if (data.type === 'admin_subscription_request') {
            console.log('üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞:', data);
            if (onNotification) {
              onNotification('info', '–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏', `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.user_name} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–æ–¥–µ–ª—å ${data.model_id}`)
            }
          }
        } catch (error) {
          console.error('‚ùå Error parsing WebSocket message:', error);
        }
      };

      ws.onerror = (error) => {
        console.error('‚ùå WebSocket error:', error);
        setIsConnected(false);
      };

      ws.onclose = (event) => {
        console.log('üîå WebSocket disconnected:', event.code, event.reason);
        setIsConnected(false);
        
        // –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        if (reconnectAttempts < maxReconnectAttempts) {
          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts), 30000); // –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
          console.log(`üîÑ Reconnecting in ${delay}ms (attempt ${reconnectAttempts + 1}/${maxReconnectAttempts})`);
          
          setReconnectAttempts(prev => prev + 1);
          reconnectTimeoutRef.current = setTimeout(connectWebSocket, delay);
        } else {
          console.log('‚ùå Max reconnection attempts reached');
        }
      };
    };

    connectWebSocket();

    return () => {
      if (wsRef.current) {
        wsRef.current.close();
      }
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
    };
  }, [userId, onSubscriptionUpdate, onNotification]);

  return { isConnected, reconnectAttempts };
};





