import React, { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button.jsx'
import { Card } from '@/components/ui/card.jsx'
import { Badge } from '@/components/ui/badge.jsx'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs.jsx'
import { TrendingUp, TrendingDown, Copy, Clock, Target, Shield, ChevronRight, Activity, BarChart3, Settings, Sparkles, Zap, Crown, CheckCircle2, ArrowRight, Users, Globe, Brain, Lock, Star, Eye, Trash2, UserCheck, Bell, BellOff, Volume2, VolumeX, Vibrate, Mail, Newspaper } from 'lucide-react'
import { TelegramAuth } from '@/components/TelegramAuth.jsx'
import './App.css'

function App() {
  // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ê–î–ú–ò–ù–ê - –ó–î–ï–°–¨ –£–ö–ê–ñ–ò –°–í–û–ô TELEGRAM ID
  const ADMIN_TELEGRAM_ID = '511442168' // –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –†–ï–ê–õ–¨–ù–´–ô TELEGRAM ID!
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ API URL
  const getApiUrl = (port) => {
    // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return `http://localhost:${port}`
  }
  
  const [currentScreen, setCurrentScreen] = useState('auth') // auth, language-select, welcome, menu, market-select, mode-select, main, settings, admin, premium, user-stats, admin-user-detail, ml-selector, notifications, analytics, generating, signal-selection
  const [selectedLanguage, setSelectedLanguage] = useState(null) // ru, en, es, fr, de, it, pt, zh, ja, ko, ar, hi
  const [selectedMarket, setSelectedMarket] = useState(null) // forex, otc
  const [selectedMode, setSelectedMode] = useState(null) // top3, single
  const [activeTab, setActiveTab] = useState('active')
  const [userId, setUserId] = useState(null) // Telegram User ID
  const [isAdmin, setIsAdmin] = useState(false) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ Telegram ID
  const [isAuthorized, setIsAuthorized] = useState(false) // –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const [userData, setUserData] = useState(null) // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
  const [selectedMLModel, setSelectedMLModel] = useState('logistic-spy') // shadow-stack, forest-necromancer, gray-cardinal, logistic-spy, sniper-80x
  const [selectedUser, setSelectedUser] = useState(null) // –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const [userSubscriptions, setUserSubscriptions] = useState(['logistic-spy']) // –ö—É–ø–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–∞–∑–æ–≤–∞—è)
  const [selectedSignalForAnalysis, setSelectedSignalForAnalysis] = useState(null) // –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const [analysisResult, setAnalysisResult] = useState(null) // –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç GPT
  const [isAnalyzing, setIsAnalyzing] = useState(false) // –§–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
  
  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–∏–¥–±–µ–∫–∞
  const [pendingSignal, setPendingSignal] = useState(null) // –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ–∂–∏–¥–∞—é—â–∏–π —Ñ–∏–¥–±–µ–∫–∞
  const [signalTimer, setSignalTimer] = useState(0) // –¢–∞–π–º–µ—Ä —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const [isWaitingFeedback, setIsWaitingFeedback] = useState(false) // –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∏–¥–±–µ–∫–∞
  const [lastTop3Generation, setLastTop3Generation] = useState(null) // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–û–ü-3
  const [top3Cooldown, setTop3Cooldown] = useState(0) // –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–û–ü-3 –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const [lastSignalGeneration, setLastSignalGeneration] = useState({}) // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º
  const [signalCooldown, setSignalCooldown] = useState(0) // Cooldown –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
  const [noSignalAvailable, setNoSignalAvailable] = useState(false) // –§–ª–∞–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
  const [isGenerating, setIsGenerating] = useState(false) // –§–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const [generationStage, setGenerationStage] = useState('') // –¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const [generatedSignals, setGeneratedSignals] = useState([]) // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
  const [showReloadWarning, setShowReloadWarning] = useState(false) // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
  
  // Notification settings
  const [notificationSettings, setNotificationSettings] = useState({
    newSignals: true,
    signalResults: true,
    dailySummary: true,
    marketNews: false,
    systemUpdates: true,
    soundEnabled: true,
    vibrationEnabled: true,
    emailNotifications: false
  })

  // User statistics data - –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ API
  const [userStats, setUserStats] = useState({
    totalSignals: 0,
    successfulSignals: 0,
    failedSignals: 0,
    winRate: 0.0,
    bestPair: 'N/A',
    worstPair: 'N/A',
    tradingDays: 0,
    avgSignalsPerDay: 0.0,
    signalsByMonth: []
  })

  // Market metrics - —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ä–∞–º
  const [marketMetrics, setMarketMetrics] = useState({
    forex: [],
    otc: []
  })

  // User signals history - –∏—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  const [userSignalsHistory, setUserSignalsHistory] = useState([])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ —Ä—ã–Ω–∫–∞
  const loadMarketMetrics = async () => {
    try {
      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ä—ã–Ω–∫–∞...')
      
      const response = await fetch(`${getApiUrl(5002)}/api/signal/market-metrics`)
      
      if (response.ok) {
        const data = await response.json()
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ —Ä—ã–Ω–∫–∞:', data)
        
        setMarketMetrics({
          forex: data.forex || [],
          otc: data.otc || []
        })
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', response.status)
        // Fallback - –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
        setMarketMetrics({
          forex: [],
          otc: []
        })
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', error)
      // Fallback - –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
      setMarketMetrics({
        forex: [],
        otc: []
      })
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API
  const loadUserStats = async () => {
    try {
      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)
      
      const response = await fetch(`${getApiUrl(5000)}/api/user/stats?user_id=${userId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data)
        
        setUserStats({
          totalSignals: data.total_signals || 0,
          successfulSignals: data.successful_signals || 0,
          failedSignals: data.failed_signals || 0,
          winRate: data.win_rate || 0.0,
          bestPair: data.best_pair || 'N/A',
          worstPair: data.worst_pair || 'N/A',
          tradingDays: data.trading_days || 0,
          avgSignalsPerDay: data.avg_signals_per_day || 0.0,
          signalsByMonth: data.signals_by_month || []
        })
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', response.status)
        // Fallback - –ø—É—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        setUserStats({
          totalSignals: 0,
          successfulSignals: 0,
          failedSignals: 0,
          winRate: 0.0,
          bestPair: 'N/A',
          worstPair: 'N/A',
          tradingDays: 0,
          avgSignalsPerDay: 0.0,
          signalsByMonth: []
        })
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      // Fallback - –ø—É—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      setUserStats({
        totalSignals: 0,
        successfulSignals: 0,
        failedSignals: 0,
        winRate: 0.0,
        bestPair: 'N/A',
        worstPair: 'N/A',
        tradingDays: 0,
        avgSignalsPerDay: 0.0,
        signalsByMonth: []
      })
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  const loadUserSignalsHistory = async () => {
    try {
      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)
      
      const response = await fetch(`${getApiUrl(5000)}/api/user/signals-history?user_id=${userId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:', data)
        
        setUserSignalsHistory(data.signals || [])
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:', response.status)
        // Fallback - –ø—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è
        setUserSignalsHistory([])
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:', error)
      // Fallback - –ø—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è
      setUserSignalsHistory([])
    }
  }


  // Translations
  const translations = {
    ru: {
      welcome: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
      selectLanguage: '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫',
      continue: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
      start: '–ù–∞—á–∞—Ç—å',
      menu: '–ú–µ–Ω—é',
      tradingSignals: '–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã',
      analytics: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
      community: '–°–æ–æ–±—â–µ—Å—Ç–≤–æ',
      settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
      premium: '–ü—Ä–µ–º–∏—É–º ML',
      selectMarket: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–Ω–æ–∫',
      selectMode: '–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      top3Signals: '–¢–û–ü-3 —Å–∏–≥–Ω–∞–ª–∞',
      singleSignals: '–û–¥–∏–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã',
      active: '–ê–∫—Ç–∏–≤–Ω—ã–µ',
      history: '–ò—Å—Ç–æ—Ä–∏—è',
      back: '–ù–∞–∑–∞–¥',
      admin: '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å',
      buy: '–ö—É–ø–∏—Ç—å',
      monthly: '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
      lifetime: '–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ',
      welcomeTo: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤',
      premiumSignals: '–ü—Ä–µ–º–∏—É–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞',
      accurateSignals: '–¢–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã',
      successfulTrades: '87% —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫',
      instantNotifications: '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      realTimeSignals: '–ü–æ–ª—É—á–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
      premiumQuality: '–ü—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ',
      professionalAnalysis: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞',
      whatSignals: '–ö–∞–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å?',
      forexSchedule: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ Forex —Ä—ã–Ω–∫–∞',
      catalogPrivate: '–ö–ê–¢–ê–õ–û–ì –ü–†–ò–í–ê–¢–ù–´–• ML-–ú–û–î–ï–õ–ï–ô',
      onlyForInsiders: '–¢–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö. –î–æ—Å—Ç—É–ø –ø–æ —Ä—É–∫–∞–º.',
      consciousRisk: '–ö–∞–∂–¥—ã–π –≤—Ö–æ–¥ ‚Äî –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π —Ä–∏—Å–∫.',
      activeModel: '–ê–ö–¢–ò–í–ù–ê–Ø',
      model: '–ú–û–î–ï–õ–¨:',
      modelReady: '–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ'
    },
    en: {
      welcome: 'Welcome',
      selectLanguage: 'Select Language',
      continue: 'Continue',
      start: 'Start',
      menu: 'Menu',
      tradingSignals: 'Trading Signals',
      analytics: 'Analytics',
      community: 'Community',
      settings: 'Settings',
      premium: 'Premium ML',
      selectMarket: 'Select Market',
      selectMode: 'Generation Mode',
      top3Signals: 'TOP-3 Signals',
      singleSignals: 'Single Signals',
      active: 'Active',
      history: 'History',
      back: 'Back',
      admin: 'Admin Panel',
      buy: 'Buy',
      monthly: 'Monthly',
      lifetime: 'Lifetime',
      welcomeTo: 'Welcome to',
      premiumSignals: 'Premium signals for professional trading',
      accurateSignals: 'Accurate signals',
      successfulTrades: '87% successful trades',
      instantNotifications: 'Instant notifications',
      realTimeSignals: 'Get signals in real time',
      premiumQuality: 'Premium quality',
      professionalAnalysis: 'Professional market analysis',
      whatSignals: 'What signals do you want to receive?',
      forexSchedule: 'Forex market schedule',
      catalogPrivate: 'PRIVATE ML-MODELS CATALOG',
      onlyForInsiders: 'Only for insiders. Access by hand.',
      consciousRisk: 'Every entry is a conscious risk.',
      activeModel: 'ACTIVE',
      model: 'MODEL:',
      modelReady: 'Model trained and ready for work'
    },
    th: {
      welcome: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö',
      selectLanguage: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤',
      continue: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠',
      start: '‡πÄ‡∏£‡∏¥‡πà‡∏°',
      menu: '‡πÄ‡∏°‡∏ô‡∏π',
      tradingSignals: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢',
      analytics: '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå',
      community: '‡∏ä‡∏∏‡∏°‡∏ä‡∏ô',
      settings: '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤',
      premium: '‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏° ML',
      selectMarket: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏•‡∏≤‡∏î',
      selectMode: '‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á',
      top3Signals: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö',
      singleSignals: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß',
      active: '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà',
      history: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥',
      back: '‡∏Å‡∏•‡∏±‡∏ö',
      admin: '‡πÅ‡∏ú‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
      buy: '‡∏ã‡∏∑‡πâ‡∏≠',
      monthly: '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
      lifetime: '‡∏ï‡∏•‡∏≠‡∏î‡∏ä‡∏µ‡∏û',
      welcomeTo: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà',
      premiumSignals: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û',
      accurateSignals: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥',
      successfulTrades: '87% ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      instantNotifications: '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ',
      realTimeSignals: '‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå',
      premiumQuality: '‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°',
      professionalAnalysis: '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û',
      whatSignals: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô?',
      forexSchedule: '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏•‡∏≤‡∏î Forex',
      catalogPrivate: '‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å ML-‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',
      onlyForInsiders: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠',
      consciousRisk: '‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏ï‡∏±‡∏ß',
      activeModel: '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà',
      model: '‡πÇ‡∏°‡πÄ‡∏î‡∏•:',
      modelReady: '‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
    },
    es: {
      welcome: 'Bienvenido',
      selectLanguage: 'Seleccionar Idioma',
      continue: 'Continuar',
      start: 'Comenzar',
      menu: 'Men√∫',
      tradingSignals: 'Se√±ales de Trading',
      analytics: 'Anal√≠ticas',
      community: 'Comunidad',
      settings: 'Configuraci√≥n',
      premium: 'ML Premium',
      selectMarket: 'Seleccionar Mercado',
      selectMode: 'Modo de Generaci√≥n',
      top3Signals: 'TOP-3 Se√±ales',
      singleSignals: 'Se√±ales Individuales',
      active: 'Activo',
      history: 'Historial',
      back: 'Atr√°s',
      admin: 'Panel Admin',
      buy: 'Comprar',
      monthly: 'Mensual',
      lifetime: 'De por vida'
    },
    fr: {
      welcome: 'Bienvenue',
      selectLanguage: 'S√©lectionner la langue',
      continue: 'Continuer',
      start: 'Commencer',
      menu: 'Menu',
      tradingSignals: 'Signaux de trading',
      analytics: 'Analytique',
      community: 'Communaut√©',
      settings: 'Param√®tres',
      premium: 'ML Premium',
      selectMarket: 'S√©lectionner le march√©',
      selectMode: 'Mode de g√©n√©ration',
      top3Signals: 'TOP-3 Signaux',
      singleSignals: 'Signaux uniques',
      active: 'Actif',
      history: 'Historique',
      back: 'Retour',
      admin: 'Panneau Admin',
      buy: 'Acheter',
      monthly: 'Mensuel',
      lifetime: '√Ä vie'
    },
    de: {
      welcome: 'Willkommen',
      selectLanguage: 'Sprache w√§hlen',
      continue: 'Weiter',
      start: 'Start',
      menu: 'Men√º',
      tradingSignals: 'Handelssignale',
      analytics: 'Analytik',
      community: 'Gemeinschaft',
      settings: 'Einstellungen',
      premium: 'Premium ML',
      selectMarket: 'Markt w√§hlen',
      selectMode: 'Generierungsmodus',
      top3Signals: 'TOP-3 Signale',
      singleSignals: 'Einzelsignale',
      active: 'Aktiv',
      history: 'Verlauf',
      back: 'Zur√ºck',
      admin: 'Admin-Panel',
      buy: 'Kaufen',
      monthly: 'Monatlich',
      lifetime: 'Lebenslang'
    },
    it: {
      welcome: 'Benvenuto',
      selectLanguage: 'Seleziona lingua',
      continue: 'Continua',
      start: 'Inizia',
      menu: 'Menu',
      tradingSignals: 'Segnali di trading',
      analytics: 'Analisi',
      community: 'Comunit√†',
      settings: 'Impostazioni',
      premium: 'ML Premium',
      selectMarket: 'Seleziona mercato',
      selectMode: 'Modalit√† di generazione',
      top3Signals: 'TOP-3 Segnali',
      singleSignals: 'Segnali singoli',
      active: 'Attivo',
      history: 'Cronologia',
      back: 'Indietro',
      admin: 'Pannello Admin',
      buy: 'Acquista',
      monthly: 'Mensile',
      lifetime: 'A vita'
    },
    pt: {
      welcome: 'Bem-vindo',
      selectLanguage: 'Selecionar idioma',
      continue: 'Continuar',
      start: 'Come√ßar',
      menu: 'Menu',
      tradingSignals: 'Sinais de trading',
      analytics: 'An√°lises',
      community: 'Comunidade',
      settings: 'Configura√ß√µes',
      premium: 'ML Premium',
      selectMarket: 'Selecionar mercado',
      selectMode: 'Modo de gera√ß√£o',
      top3Signals: 'TOP-3 Sinais',
      singleSignals: 'Sinais √∫nicos',
      active: 'Ativo',
      history: 'Hist√≥rico',
      back: 'Voltar',
      admin: 'Painel Admin',
      buy: 'Comprar',
      monthly: 'Mensal',
      lifetime: 'Vital√≠cio'
    },
    zh: {
      welcome: 'Ê¨¢Ëøé',
      selectLanguage: 'ÈÄâÊã©ËØ≠Ë®Ä',
      continue: 'ÁªßÁª≠',
      start: 'ÂºÄÂßã',
      menu: 'ËèúÂçï',
      tradingSignals: '‰∫§Êòì‰ø°Âè∑',
      analytics: 'ÂàÜÊûê',
      community: 'Á§æÂå∫',
      settings: 'ËÆæÁΩÆ',
      premium: 'È´òÁ∫ß ML',
      selectMarket: 'ÈÄâÊã©Â∏ÇÂú∫',
      selectMode: 'ÁîüÊàêÊ®°Âºè',
      top3Signals: 'Ââç3‰ø°Âè∑',
      singleSignals: 'Âçï‰∏Ä‰ø°Âè∑',
      active: 'Ê¥ªË∑É',
      history: 'ÂéÜÂè≤',
      back: 'ËøîÂõû',
      admin: 'ÁÆ°ÁêÜÈù¢Êùø',
      buy: 'Ë¥≠‰π∞',
      monthly: 'ÊØèÊúà',
      lifetime: 'ÁªàË∫´'
    },
    ja: {
      welcome: '„Çà„ÅÜ„Åì„Åù',
      selectLanguage: 'Ë®ÄË™û„ÇíÈÅ∏Êäû',
      continue: 'Á∂ö„Åë„Çã',
      start: 'ÈñãÂßã',
      menu: '„É°„Éã„É•„Éº',
      tradingSignals: 'ÂèñÂºï„Ç∑„Ç∞„Éä„É´',
      analytics: 'ÂàÜÊûê',
      community: '„Ç≥„Éü„É•„Éã„ÉÜ„Ç£',
      settings: 'Ë®≠ÂÆö',
      premium: '„Éó„É¨„Éü„Ç¢„É† ML',
      selectMarket: 'Â∏ÇÂ†¥„ÇíÈÅ∏Êäû',
      selectMode: 'ÁîüÊàê„É¢„Éº„Éâ',
      top3Signals: '„Éà„ÉÉ„Éó3„Ç∑„Ç∞„Éä„É´',
      singleSignals: 'Âçò‰∏Ä„Ç∑„Ç∞„Éä„É´',
      active: '„Ç¢„ÇØ„ÉÜ„Ç£„Éñ',
      history: 'Â±•Ê≠¥',
      back: 'Êàª„Çã',
      admin: 'ÁÆ°ÁêÜ„Éë„Éç„É´',
      buy: 'Ë≥ºÂÖ•',
      monthly: 'ÊØéÊúà',
      lifetime: 'ÁîüÊ∂Ø'
    },
    ko: {
      welcome: 'ÌôòÏòÅÌï©ÎãàÎã§',
      selectLanguage: 'Ïñ∏Ïñ¥ ÏÑ†ÌÉù',
      continue: 'Í≥ÑÏÜç',
      start: 'ÏãúÏûë',
      menu: 'Î©îÎâ¥',
      tradingSignals: 'Í±∞Îûò Ïã†Ìò∏',
      analytics: 'Î∂ÑÏÑù',
      community: 'Ïª§ÎÆ§ÎãàÌã∞',
      settings: 'ÏÑ§Ï†ï',
      premium: 'ÌîÑÎ¶¨ÎØ∏ÏóÑ ML',
      selectMarket: 'ÏãúÏû• ÏÑ†ÌÉù',
      selectMode: 'ÏÉùÏÑ± Î™®Îìú',
      top3Signals: 'ÏÉÅÏúÑ 3Í∞ú Ïã†Ìò∏',
      singleSignals: 'Îã®Ïùº Ïã†Ìò∏',
      active: 'ÌôúÏÑ±',
      history: 'Í∏∞Î°ù',
      back: 'Îí§Î°ú',
      admin: 'Í¥ÄÎ¶¨Ïûê Ìå®ÎÑê',
      buy: 'Íµ¨Îß§',
      monthly: 'ÏõîÍ∞Ñ',
      lifetime: 'ÌèâÏÉù'
    },
    ar: {
      welcome: 'ŸÖÿ±ÿ≠ÿ®ÿß',
      selectLanguage: 'ÿßÿÆÿ™ÿ± ÿßŸÑŸÑÿ∫ÿ©',
      continue: 'ŸÖÿ™ÿßÿ®ÿπÿ©',
      start: 'ÿßÿ®ÿØÿ£',
      menu: 'ÿßŸÑŸÇÿßÿ¶ŸÖÿ©',
      tradingSignals: 'ÿ•ÿ¥ÿßÿ±ÿßÿ™ ÿßŸÑÿ™ÿØÿßŸàŸÑ',
      analytics: 'ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™',
      community: 'ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ',
      settings: 'ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™',
      premium: 'ÿ®ÿ±ŸäŸÖŸäŸàŸÖ ML',
      selectMarket: 'ÿßÿÆÿ™ÿ± ÿßŸÑÿ≥ŸàŸÇ',
      selectMode: 'Ÿàÿ∂ÿπ ÿßŸÑÿ™ŸàŸÑŸäÿØ',
      top3Signals: 'ÿ£ŸÅÿ∂ŸÑ 3 ÿ•ÿ¥ÿßÿ±ÿßÿ™',
      singleSignals: 'ÿ•ÿ¥ÿßÿ±ÿßÿ™ ŸÅÿ±ÿØŸäÿ©',
      active: 'ŸÜÿ¥ÿ∑',
      history: 'ÿßŸÑÿ™ÿßÿ±ŸäÿÆ',
      back: 'ÿ±ÿ¨Ÿàÿπ',
      admin: 'ŸÑŸàÿ≠ÿ© ÿßŸÑŸÖÿ¥ÿ±ŸÅ',
      buy: 'ÿ¥ÿ±ÿßÿ°',
      monthly: 'ÿ¥Ÿáÿ±Ÿä',
      lifetime: 'ŸÖÿØŸâ ÿßŸÑÿ≠Ÿäÿßÿ©'
    },
    hi: {
      welcome: '‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à',
      selectLanguage: '‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç',
      continue: '‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç',
      start: '‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç',
      menu: '‡§Æ‡•á‡§®‡•Ç',
      tradingSignals: '‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤',
      analytics: '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
      community: '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø',
      settings: '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏',
      premium: '‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ML',
      selectMarket: '‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç',
      selectMode: '‡§ú‡§®‡§∞‡•á‡§∂‡§® ‡§Æ‡•ã‡§°',
      top3Signals: '‡§∂‡•Ä‡§∞‡•ç‡§∑ 3 ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤',
      singleSignals: '‡§è‡§ï‡§≤ ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤',
      active: '‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø',
      history: '‡§á‡§§‡§ø‡§π‡§æ‡§∏',
      back: '‡§µ‡§æ‡§™‡§∏',
      admin: '‡§è‡§°‡§Æ‡§ø‡§® ‡§™‡•à‡§®‡§≤',
      buy: '‡§ñ‡§∞‡•Ä‡§¶‡•á‡§Ç',
      monthly: '‡§Æ‡§æ‡§∏‡§ø‡§ï',
      lifetime: '‡§Ü‡§ú‡•Ä‡§µ‡§®'
    },
    tr: {
      welcome: 'Ho≈ü geldiniz',
      selectLanguage: 'Dil se√ßin',
      continue: 'Devam',
      start: 'Ba≈üla',
      menu: 'Men√º',
      tradingSignals: 'Alƒ±m satƒ±m sinyalleri',
      analytics: 'Analitik',
      community: 'Topluluk',
      settings: 'Ayarlar',
      premium: 'Premium ML',
      selectMarket: 'Pazar se√ßin',
      selectMode: '√úretim modu',
      top3Signals: 'ƒ∞lk 3 Sinyal',
      singleSignals: 'Tekli sinyaller',
      active: 'Aktif',
      history: 'Ge√ßmi≈ü',
      back: 'Geri',
      admin: 'Y√∂netici Paneli',
      buy: 'Satƒ±n al',
      monthly: 'Aylƒ±k',
      lifetime: '√ñm√ºr boyu'
    },
    vi: {
      welcome: 'Ch√†o m·ª´ng',
      selectLanguage: 'Ch·ªçn ng√¥n ng·ªØ',
      continue: 'Ti·∫øp t·ª•c',
      start: 'B·∫Øt ƒë·∫ßu',
      menu: 'Menu',
      tradingSignals: 'T√≠n hi·ªáu giao d·ªãch',
      analytics: 'Ph√¢n t√≠ch',
      community: 'C·ªông ƒë·ªìng',
      settings: 'C√†i ƒë·∫∑t',
      premium: 'ML Cao c·∫•p',
      selectMarket: 'Ch·ªçn th·ªã tr∆∞·ªùng',
      selectMode: 'Ch·∫ø ƒë·ªô t·∫°o',
      top3Signals: 'TOP-3 T√≠n hi·ªáu',
      singleSignals: 'T√≠n hi·ªáu ƒë∆°n',
      active: 'Ho·∫°t ƒë·ªông',
      history: 'L·ªãch s·ª≠',
      back: 'Quay l·∫°i',
      admin: 'B·∫£ng qu·∫£n tr·ªã',
      buy: 'Mua',
      monthly: 'H√†ng th√°ng',
      lifetime: 'Tr·ªçn ƒë·ªùi'
    },
    id: {
      welcome: 'Selamat datang',
      selectLanguage: 'Pilih bahasa',
      continue: 'Lanjutkan',
      start: 'Mulai',
      menu: 'Menu',
      tradingSignals: 'Sinyal trading',
      analytics: 'Analitik',
      community: 'Komunitas',
      settings: 'Pengaturan',
      premium: 'ML Premium',
      selectMarket: 'Pilih pasar',
      selectMode: 'Mode generasi',
      top3Signals: 'TOP-3 Sinyal',
      singleSignals: 'Sinyal tunggal',
      active: 'Aktif',
      history: 'Riwayat',
      back: 'Kembali',
      admin: 'Panel Admin',
      buy: 'Beli',
      monthly: 'Bulanan',
      lifetime: 'Seumur hidup'
    }
  }

  const t = (key) => {
    const lang = selectedLanguage || 'ru'
    return translations[lang]?.[key] || translations.ru[key] || key
  }

  // Mock data for signals
  const activeSignals = [
    {
      id: 1,
      pair: 'EUR/USD',
      type: 'BUY',
      entry: '1.0850',
      tp: ['1.0900', '1.0950', '1.1000'],
      sl: '1.0800',
      status: 'active',
      time: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
      progress: 60,
      confidence: 0.87
    },
    {
      id: 2,
      pair: 'GBP/JPY',
      type: 'SELL',
      entry: '188.50',
      tp: ['188.00', '187.50', '187.00'],
      sl: '189.00',
      status: 'active',
      time: '5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥',
      progress: 30,
      confidence: 0.82
    },
    {
      id: 3,
      pair: 'USD/JPY',
      type: 'BUY',
      entry: '149.80',
      tp: ['150.20', '150.50', '150.80'],
      sl: '149.50',
      status: 'pending',
      time: '1 —á–∞—Å –Ω–∞–∑–∞–¥',
      progress: 0,
      confidence: 0.79
    }
  ]

  const historySignals = [
    {
      signal_id: "otc_EUR_USD_1758239200",
      id: 1,
      pair: 'EUR/USD (OTC)',
      type: 'SELL',
      direction: 'SELL',
      entry: '1.0850',
      tp: ['1.0800', '1.0750'],
      sl: '1.0900',
      closePrice: '1.0920',
      confidence: 0.7426,
      expiration: 3,
      signal_type: 'otc',
      timestamp: '2025-10-10T14:30:00',
      feedback: 'failure',
      result: 'loss',
      time: '2 –¥–Ω—è –Ω–∞–∑–∞–¥'
    },
    {
      signal_id: "otc_GBP_JPY_1758240100",
      id: 2,
      pair: 'GBP/JPY (OTC)',
      type: 'BUY',
      direction: 'BUY',
      entry: '188.50',
      tp: ['189.00', '189.50'],
      sl: '188.00',
      closePrice: '189.30',
      confidence: 0.8215,
      expiration: 4,
      signal_type: 'otc',
      timestamp: '2025-10-10T16:45:00',
      feedback: 'success',
      result: 'profit',
      time: '2 –¥–Ω—è –Ω–∞–∑–∞–¥'
    },
    {
      signal_id: "forex_EUR_USD_1758241500",
      id: 3,
      pair: 'EUR/USD',
      type: 'BUY',
      direction: 'BUY',
      entry: '1.0920',
      tp: ['1.0970', '1.1020'],
      sl: '1.0870',
      closePrice: '1.0860',
      confidence: 0.7891,
      expiration: 60,
      signal_type: 'forex',
      timestamp: '2025-10-11T09:20:00',
      feedback: 'failure',
      result: 'loss',
      time: '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥'
    },
    {
      signal_id: "forex_USD_JPY_1758242800",
      id: 4,
      pair: 'USD/JPY',
      type: 'SELL',
      direction: 'SELL',
      entry: '149.80',
      tp: ['149.30', '148.80'],
      sl: '150.30',
      closePrice: '149.20',
      confidence: 0.8542,
      expiration: 90,
      signal_type: 'forex',
      timestamp: '2025-10-11T12:00:00',
      feedback: 'success',
      result: 'profit',
      time: '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥'
    },
    {
      signal_id: "otc_XAU_USD_1758244200",
      id: 5,
      pair: 'XAU/USD (OTC)',
      type: 'BUY',
      direction: 'BUY',
      entry: '2650.00',
      tp: ['2680.00', '2700.00'],
      sl: '2630.00',
      closePrice: '2625.00',
      confidence: 0.7654,
      expiration: 5,
      signal_type: 'otc',
      timestamp: '2025-10-11T18:30:00',
      feedback: 'failure',
      result: 'loss',
      time: '12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥'
    },
    {
      signal_id: "forex_GBP_USD_1758245600",
      id: 6,
      pair: 'GBP/USD',
      type: 'SELL',
      direction: 'SELL',
      entry: '1.2850',
      tp: ['1.2800', '1.2750'],
      sl: '1.2900',
      closePrice: '1.2790',
      confidence: 0.8123,
      expiration: 120,
      signal_type: 'forex',
      timestamp: '2025-10-12T08:00:00',
      feedback: 'success',
      result: 'profit',
      time: '6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥'
    }
  ]

  const copyToClipboard = (signal) => {
    const text = `${signal.pair} ${signal.type}`
    navigator.clipboard.writeText(text)
  }

  // Language data
  const languages = [
    { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { code: 'en', name: 'English', flag: 'üá∫üá∏' },
    { code: 'th', name: '‡πÑ‡∏ó‡∏¢', flag: 'üáπüá≠' },
    { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
    { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑' },
    { code: 'de', name: 'Deutsch', flag: 'üá©üá™' },
    { code: 'it', name: 'Italiano', flag: 'üáÆüáπ' },
    { code: 'pt', name: 'Portugu√™s', flag: 'üáµüáπ' },
    { code: 'zh', name: '‰∏≠Êñá', flag: 'üá®üá≥' },
    { code: 'ja', name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
    { code: 'ko', name: 'ÌïúÍµ≠Ïñ¥', flag: 'üá∞üá∑' },
    { code: 'ar', name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶' },
    { code: 'hi', name: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
    { code: 'tr', name: 'T√ºrk√ße', flag: 'üáπüá∑' },
    { code: 'vi', name: 'Ti·∫øng Vi·ªát', flag: 'üáªüá≥' },
    { code: 'id', name: 'Bahasa Indonesia', flag: 'üáÆüá©' }
  ]

  // ML Models data
  const mlModels = [
    {
      id: 'shadow-stack',
      name: '–¢–ï–ù–ï–í–û–ô –°–¢–ï–ö',
      emoji: 'üåë',
      algorithm: 'Ensemble (RandomForest, XGBoost, ExtraTrees, HistGB, LogisticRegression)',
      winrate: '65-70%',
      description: '–ù–µ –ø–∞–ª–∏—Ç—Å—è, –Ω–µ –ª–∞–≥–∞–µ—Ç, –Ω–µ –±—Ä–µ—à–µ—Ç. –ü—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ—Ç –≥—Ä—è–∑—å.',
      style: '–°—Ä–µ–¥–Ω–µ—Å—Ä–æ–∫, –∏–Ω—Ç—Ä–∞–¥–µ–π',
      status: 'available',
      color: 'from-slate-600 to-slate-800',
      price: '$299',
      monthlyPrice: '$49',
      lifetimePrice: '$299'
    },
    {
      id: 'forest-necromancer',
      name: '–õ–ï–°–ù–û–ô –ù–ï–ö–†–û–ú–ê–ù–¢',
      emoji: 'üå≤',
      algorithm: 'RandomForest - –ü—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –∏–∑ –ª–µ—Å–∞ —Ä–µ—à–µ–Ω–∏–π',
      winrate: '62-67%',
      description: '–° –≤–∏–¥—É –±–æ—Ç–∞–Ω–∏–∫, –ø–æ —Ñ–∞–∫—Ç—É —à–∞–º–∞–Ω —Ä—ã–Ω–∫–æ–≤.',
      style: '–ò–Ω—Ñ–æ—Ä–º–µ—Ä —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏–º–ø—É–ª—å—Å–Ω—ã—Ö –∑–æ–Ω',
      status: 'available',
      color: 'from-green-600 to-green-800',
      price: '$199',
      monthlyPrice: '$29',
      lifetimePrice: '$199'
    },
    {
      id: 'gray-cardinal',
      name: '–°–ï–†–´–ô –ö–ê–†–î–ò–ù–ê–õ',
      emoji: 'üé≠',
      algorithm: 'XGBoost - –ù–µ –Ω–∞ —Å–ª—É—Ö—É, –∑–∞—Ç–æ –≤—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º',
      winrate: '~66%',
      description: '–¢—ã –µ–≥–æ –Ω–µ –≤–∏–¥–∏—à—å, –Ω–æ –æ–Ω –∑–Ω–∞–µ—Ç —Ç–≤–æ–π –≤—Ö–æ–¥ —Ä–∞–Ω—å—à–µ —Ç–µ–±—è.',
      style: '–°–∏–≥–Ω–∞–ª—ã –Ω–∞ –º–ª–∞–¥—à–∏—Ö –¢–§, —Å –¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä–∞–º–∏',
      status: 'available',
      color: 'from-gray-600 to-gray-800',
      price: '$249',
      monthlyPrice: '$39',
      lifetimePrice: '$249'
    },
    {
      id: 'logistic-spy',
      name: '–õ–û–ì–ò–°–¢–ò–ß–ï–°–ö–ò–ô –®–ü–ò–û–ù',
      emoji: 'üïµÔ∏è',
      algorithm: 'LogisticRegression - –ö–ª–∞—Å—Å–∏–∫ –≤ –º–∏—Ä–µ ML',
      winrate: '~60-65%',
      description: '–°—Ç–∞—Ä–∞—è —à–∫–æ–ª–∞, –Ω–æ –∑–Ω–∞–µ—Ç –≤—Å–µ —Ö–æ–¥—ã.',
      style: '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–µ–º',
      status: 'active',
      color: 'from-blue-600 to-blue-800',
      price: '$99',
      monthlyPrice: '$19',
      lifetimePrice: '$99'
    },
    {
      id: 'sniper-80x',
      name: '–°–ù–ê–ô–ü–ï–† 80–•',
      emoji: 'üî´',
      algorithm: '–§–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å - –õ–µ–≥–µ–Ω–¥–∞ —Å—Ä–µ–¥–∏ —Å–≤–æ–∏—Ö',
      winrate: '80%+',
      description: '–ó–∞–ø—É—Å–∫–∞–µ—à—å ‚Äî –∏ —Ä—ã–Ω–æ–∫ –∑–∞–º–æ–ª–∫–∞–µ—Ç. –û–¥–∏–Ω –≤—Ö–æ–¥ ‚Äî –æ–¥–∏–Ω —Ç—Ä—É–ø.',
      style: '–¢–æ—á–Ω—ã–π –≤—Ö–æ–¥, –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π, –∏–Ω–æ–≥–¥–∞ —Å–∫–∞–ª—å–ø',
      status: 'restricted',
      color: 'from-red-600 to-red-800',
      warning: '–¢–æ–ª—å–∫–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ. –ê–≤—Ç–æ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è.',
      price: '$999',
      monthlyPrice: '$199',
      lifetimePrice: '$999'
    }
  ]

  // Mock admin data
  const adminStats = {
    totalUsers: 1247,
    activeUsers: 892,
    totalSignals: 15420,
    successfulSignals: 13461,
    failedSignals: 1959,
    newUsersToday: 23,
    topUsers: [
      { 
        id: 1, 
        name: 'User_001', 
        signals: 156, 
        successful: 139, 
        failed: 17,
        winRate: 89.1,
        bestPair: 'EUR/USD',
        worstPair: 'GBP/JPY',
        tradingDays: 42,
        avgSignalsPerDay: 3.7,
        signalsByMonth: [
          { month: '–Ø–Ω–≤', successful: 21, failed: 2 },
          { month: '–§–µ–≤', successful: 23, failed: 3 },
          { month: '–ú–∞—Ä', successful: 24, failed: 3 },
          { month: '–ê–ø—Ä', successful: 25, failed: 4 },
          { month: '–ú–∞–π', successful: 26, failed: 3 },
          { month: '–ò—é–Ω—å', successful: 20, failed: 2 }
        ]
      },
      { 
        id: 2, 
        name: 'Trader_Pro', 
        signals: 203, 
        successful: 185, 
        failed: 18,
        winRate: 91.1,
        bestPair: 'USD/JPY',
        worstPair: 'AUD/CAD',
        tradingDays: 55,
        avgSignalsPerDay: 3.7,
        signalsByMonth: [
          { month: '–Ø–Ω–≤', successful: 28, failed: 2 },
          { month: '–§–µ–≤', successful: 31, failed: 3 },
          { month: '–ú–∞—Ä', successful: 33, failed: 4 },
          { month: '–ê–ø—Ä', successful: 30, failed: 3 },
          { month: '–ú–∞–π', successful: 32, failed: 3 },
          { month: '–ò—é–Ω—å', successful: 31, failed: 3 }
        ]
      },
      { 
        id: 3, 
        name: 'FX_Master', 
        signals: 134, 
        successful: 116, 
        failed: 18,
        winRate: 86.6,
        bestPair: 'GBP/USD',
        worstPair: 'EUR/JPY',
        tradingDays: 38,
        avgSignalsPerDay: 3.5,
        signalsByMonth: [
          { month: '–Ø–Ω–≤', successful: 18, failed: 3 },
          { month: '–§–µ–≤', successful: 20, failed: 3 },
          { month: '–ú–∞—Ä', successful: 19, failed: 3 },
          { month: '–ê–ø—Ä', successful: 21, failed: 3 },
          { month: '–ú–∞–π', successful: 20, failed: 3 },
          { month: '–ò—é–Ω—å', successful: 18, failed: 3 }
        ]
      },
      { 
        id: 4, 
        name: 'Signal_Hunter', 
        signals: 178, 
        successful: 158, 
        failed: 20,
        winRate: 88.8,
        bestPair: 'EUR/GBP',
        worstPair: 'USD/CAD',
        tradingDays: 48,
        avgSignalsPerDay: 3.7,
        signalsByMonth: [
          { month: '–Ø–Ω–≤', successful: 24, failed: 3 },
          { month: '–§–µ–≤', successful: 26, failed: 3 },
          { month: '–ú–∞—Ä', successful: 28, failed: 4 },
          { month: '–ê–ø—Ä', successful: 27, failed: 4 },
          { month: '–ú–∞–π', successful: 28, failed: 3 },
          { month: '–ò—é–Ω—å', successful: 25, failed: 3 }
        ]
      },
      { 
        id: 5, 
        name: 'Forex_King', 
        signals: 245, 
        successful: 221, 
        failed: 24,
        winRate: 90.2,
        bestPair: 'USD/CHF',
        worstPair: 'NZD/USD',
        tradingDays: 62,
        avgSignalsPerDay: 4.0,
        signalsByMonth: [
          { month: '–Ø–Ω–≤', successful: 35, failed: 4 },
          { month: '–§–µ–≤', successful: 38, failed: 4 },
          { month: '–ú–∞—Ä', successful: 37, failed: 4 },
          { month: '–ê–ø—Ä', successful: 39, failed: 4 },
          { month: '–ú–∞–π', successful: 38, failed: 4 },
          { month: '–ò—é–Ω—å', successful: 34, failed: 4 }
        ]
      }
    ]
  }

  const deleteUser = (userId) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
    console.log(`–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
    alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–¥–∞–ª—ë–Ω –∏–∑ –±–æ—Ç–∞`)
  }

  // –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ OpenRouter GPT-4o mini
  const analyzeSignal = async (signal) => {
    setIsAnalyzing(true)
    setAnalysisResult(null)
    
    const isLoss = signal.result === 'loss' || signal.feedback === 'failure'
    
    const prompt = `–¢—ã —Å—Ç—Ä–æ–≥–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ Forex/OTC —Ä—ã–Ω–∫–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π ${isLoss ? '–£–ë–´–¢–û–ß–ù–£–Æ' : '—É—Å–ø–µ—à–Ω—É—é'} —Å–¥–µ–ª–∫—É —Ç—Ä–µ–π–¥–µ—Ä–∞.

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: ${isLoss ? '–í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π —á—Ç–æ —ç—Ç–æ –í–ò–ù–ê –¢–†–ï–ô–î–ï–†–ê (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—Ö–æ–¥, –ø–ª–æ—Ö–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ), –∞ –ù–ï —Ä—ã–Ω–∫–∞ –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞!' : '–ü–æ–∫–∞–∂–∏ —á—Ç–æ —Ç—Ä–µ–π–¥–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.'}

üìä –î–ê–ù–ù–´–ï –°–î–ï–õ–ö–ò:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ID —Å–∏–≥–Ω–∞–ª–∞: ${signal.signal_id}
–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: ${signal.pair}
–¢–∏–ø —Ä—ã–Ω–∫–∞: ${signal.signal_type === 'otc' ? 'OTC (–≤–Ω–µ–±–∏—Ä–∂–µ–≤–æ–π)' : 'Forex'}
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${signal.direction}
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: ${signal.entry}
Take Profit: ${signal.tp.join(', ')}
Stop Loss: ${signal.sl}
–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${signal.closePrice}
–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞: ${(signal.confidence * 100).toFixed(1)}%
–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: ${signal.expiration} –º–∏–Ω
–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: ${signal.timestamp}
–†–µ–∑—É–ª—å—Ç–∞—Ç: ${isLoss ? '‚ùå –£–ë–´–¢–û–ö' : '‚úÖ –ü–†–ò–ë–´–õ–¨'}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${isLoss ? `
üî¥ –ê–ù–ê–õ–ò–ó –£–ë–´–¢–û–ß–ù–û–ô –°–î–ï–õ–ö–ò:

1Ô∏è‚É£ –ß–¢–û –¢–†–ï–ô–î–ï–† –°–î–ï–õ–ê–õ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:
- –û–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ
- –ü–æ—á–µ–º—É —Ç—Ä–µ–π–¥–µ—Ä –Ω–µ –¥–æ–∂–¥–∞–ª—Å—è –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
- –ö–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª

2Ô∏è‚É£ –û–®–ò–ë–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ò–°–ö–ê–ú–ò:
- –ü–æ—á–µ–º—É Stop Loss –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
- –ö–∞–∫ —Ç—Ä–µ–π–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞—â–∏—Ç–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç
- –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–∑–∏—Ü–∏–∏

3Ô∏è‚É£ –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
- FOMO (—Å—Ç—Ä–∞—Ö —É–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–±—ã–ª—å)
- –ñ–∞–¥–Ω–æ—Å—Ç—å –∏–ª–∏ –ø–∞–Ω–∏–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏

4Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- –ß—Ç–æ —Ç—Ä–µ–π–¥–µ—Ä –û–ë–Ø–ó–ê–ù –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ—ë–º –ø–æ–¥—Ö–æ–¥–µ
- –ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –±—É–¥—É—â–µ–º
- –ß–µ–º—É –Ω—É–∂–Ω–æ –Ω–∞—É—á–∏—Ç—å—Å—è

‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ–∫–∞–∂–∏ —á—Ç–æ —Å–∏–≥–Ω–∞–ª –±—ã–ª –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º (${(signal.confidence * 100).toFixed(1)}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏), –Ω–æ –¢–†–ï–ô–î–ï–† –Ω–µ —Å–º–æ–≥ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!
` : `
‚úÖ –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–û–ô –°–î–ï–õ–ö–ò:

1Ô∏è‚É£ –ß–¢–û –¢–†–ï–ô–î–ï–† –°–î–ï–õ–ê–õ –ü–†–ê–í–ò–õ–¨–ù–û:
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—Ö–æ–¥ –ø–æ —Ç—Ä–µ–Ω–¥—É
- –ì—Ä–∞–º–æ—Ç–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
- –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –≤ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

2Ô∏è‚É£ –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´ –£–°–ü–ï–•–ê:
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
- –¢–µ—Ä–ø–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ
- –°–æ–±–ª—é–¥–µ–Ω–∏–µ Stop Loss –∏ Take Profit

3Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥
- –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
`}

–¢–æ–Ω: –°–¢–†–û–ì–ò–ô, –ü–†–Ø–ú–û–ô, –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô. –ú–∏–Ω–∏–º—É–º –≤–æ–¥—ã, –º–∞–∫—Å–∏–º—É–º –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏!`

    try {
      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': 'Bearer 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',
          'Content-Type': 'application/json',
          'HTTP-Referer': window.location.origin,
          'X-Title': 'Forex Signals Pro'
        },
        body: JSON.stringify({
          model: 'openai/gpt-4o-mini',
          messages: [
            {
              role: 'user',
              content: prompt
            }
          ]
        })
      })

      const data = await response.json()
      
      if (data.choices && data.choices[0]) {
        setAnalysisResult(data.choices[0].message.content)
      } else {
        setAnalysisResult('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error)
      setAnalysisResult('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter API')
    } finally {
      setIsAnalyzing(false)
    }
  }

  const toggleNotification = (key) => {
    setNotificationSettings(prev => ({
      ...prev,
      [key]: !prev[key]
    }))
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥ API
  const authorizeUser = async (userData, initData = '') => {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã
      const startTime = Date.now()
      
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          initData: initData,
          userData: userData
        })
      })
      
      const result = await response.json()
      
      if (result.success) {
        const user = result.user
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setUserId(user.telegram_id)
        setUserData({
          id: user.telegram_id,
          firstName: user.first_name,
          lastName: user.last_name,
          username: user.username,
          languageCode: user.language_code,
          isPremium: user.is_premium
        })
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
        setIsAdmin(user.is_admin)
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        setUserSubscriptions(user.subscriptions || ['logistic-spy'])
        
        // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        setIsAuthorized(true)
        
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API —É—Å–ø–µ—à–Ω–∞:', user.first_name)
        
        if (user.is_new_user) {
          console.log('üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
        }
        
        // –ñ–¥–µ–º –º–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const elapsed = Date.now() - startTime
        const remainingTime = Math.max(2000 - elapsed, 0)
        
        await new Promise(resolve => setTimeout(resolve, remainingTime))
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫
        const savedLanguage = localStorage.getItem('selectedLanguage')
        if (savedLanguage) {
          setSelectedLanguage(savedLanguage)
          setCurrentScreen('welcome')
        } else {
          setCurrentScreen('language-select')
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const savedSignal = localStorage.getItem('pendingSignal')
        if (savedSignal) {
          const signal = JSON.parse(savedSignal)
          const startTime = parseInt(localStorage.getItem('signalStartTime')) || Date.now()
          const waitingFeedback = localStorage.getItem('isWaitingFeedback') === 'true'
          
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
          signal.startTime = startTime
          
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
          const remainingTime = calculateRemainingTime(signal)
          
          if (remainingTime > 0) {
            setPendingSignal(signal)
            setSignalTimer(remainingTime)
            setIsWaitingFeedback(waitingFeedback)
            setShowReloadWarning(true)
            setCurrentScreen('main')
          } else {
            // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–¥–±–µ–∫
            setPendingSignal(signal)
            setSignalTimer(0)
            setIsWaitingFeedback(true)
            setShowReloadWarning(true)
            setCurrentScreen('main')
          }
        }
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', result.error)
        setIsAuthorized(false)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', error)
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –±–µ–∑ –±—ç–∫–µ–Ω–¥–∞
      console.warn('‚ö†Ô∏è –†–∞–±–æ—Ç–∞ –±–µ–∑ –±—ç–∫–µ–Ω–¥–∞ (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)')
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      setIsAuthorized(true)
      
      const savedLanguage = localStorage.getItem('selectedLanguage')
      if (savedLanguage) {
        setSelectedLanguage(savedLanguage)
        setCurrentScreen('welcome')
      } else {
        setCurrentScreen('language-select')
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const savedSignal = localStorage.getItem('pendingSignal')
      if (savedSignal) {
        const signal = JSON.parse(savedSignal)
        const startTime = parseInt(localStorage.getItem('signalStartTime')) || Date.now()
        const waitingFeedback = localStorage.getItem('isWaitingFeedback') === 'true'
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        signal.startTime = startTime
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const remainingTime = calculateRemainingTime(signal)
        
        if (remainingTime > 0) {
          setPendingSignal(signal)
          setSignalTimer(remainingTime)
          setIsWaitingFeedback(waitingFeedback)
          setShowReloadWarning(true)
          setCurrentScreen('main')
        } else {
          // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–¥–±–µ–∫
          setPendingSignal(signal)
          setSignalTimer(0)
          setIsWaitingFeedback(true)
          setShowReloadWarning(true)
          setCurrentScreen('main')
        }
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram User ID –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  // –û–¢–ö–õ–Æ–ß–ï–ù–û: –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç TelegramAuth
  /*
  useEffect(() => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp...')
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Telegram SDK
    const initTelegramAuth = () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram WebApp
      if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp
        
        console.log('‚úÖ Telegram WebApp SDK –∑–∞–≥—Ä—É–∂–µ–Ω')
        console.log('üì± Platform:', tg.platform)
        console.log('üé® Theme:', tg.colorScheme)
        
        tg.ready()
        tg.expand() // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = tg.initDataUnsafe?.user
        const initData = tg.initData
        
        console.log('üë§ User data:', user)
        console.log('üîê Init data length:', initData?.length || 0)
        
        if (user) {
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.first_name} (ID: ${user.id})`)
          
          // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
          authorizeUser({
            id: user.id,
            first_name: user.first_name,
            last_name: user.last_name || '',
            username: user.username || '',
            language_code: user.language_code || 'ru',
            is_premium: user.is_premium || false
          }, initData)
        } else {
          // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram')
          console.log('initDataUnsafe:', tg.initDataUnsafe)
          
          // –ü—Ä–æ–±—É–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
          console.warn('‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...')
          const testUserData = {
            id: 123456789,
            first_name: 'Test',
            last_name: 'User',
            username: 'testuser',
            language_code: 'ru',
            is_premium: false
          }
          authorizeUser(testUserData)
        }
      } else {
        // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram (–≤ –±—Ä–∞—É–∑–µ—Ä–µ)
        console.warn('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram WebApp')
        console.warn('üß™ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const testUserData = {
          id: 123456789,
          first_name: 'Test',
          last_name: 'User',
          username: 'testuser',
          language_code: 'ru',
          is_premium: false
        }
        
        // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        authorizeUser(testUserData)
      }
    }
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É Telegram SDK
    if (document.readyState === 'complete') {
      initTelegramAuth()
    } else {
      window.addEventListener('load', initTelegramAuth)
      return () => window.removeEventListener('load', initTelegramAuth)
    }
  }, [ADMIN_TELEGRAM_ID])
  */

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    const savedLanguage = localStorage.getItem('selectedLanguage')
    if (savedLanguage) {
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫:', savedLanguage)
      setSelectedLanguage(savedLanguage)
    }
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω user-stats
  useEffect(() => {
    if (currentScreen === 'user-stats') {
      loadUserStats()
    }
  }, [currentScreen])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ —Ä—ã–Ω–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–∂–∏–º–∞ single
  useEffect(() => {
    if (currentScreen === 'signal-selection' && selectedMode === 'single') {
      loadMarketMetrics()
    }
  }, [currentScreen, selectedMode])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø–∞—Ä
  useEffect(() => {
    if (currentScreen === 'signal-selection') {
      loadMarketMetrics()
    }
  }, [currentScreen])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  useEffect(() => {
    if (currentScreen === 'analytics') {
      loadUserSignalsHistory()
    }
  }, [currentScreen])

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ localStorage
  useEffect(() => {
    if (pendingSignal) {
      localStorage.setItem('pendingSignal', JSON.stringify(pendingSignal))
      localStorage.setItem('signalTimer', signalTimer.toString())
      localStorage.setItem('isWaitingFeedback', isWaitingFeedback.toString())
      if (pendingSignal.startTime) {
        localStorage.setItem('signalStartTime', pendingSignal.startTime.toString())
      }
    } else {
      localStorage.removeItem('pendingSignal')
      localStorage.removeItem('signalTimer')
      localStorage.removeItem('isWaitingFeedback')
      localStorage.removeItem('signalStartTime')
    }
  }, [pendingSignal, signalTimer, isWaitingFeedback])

  // –¢–∞–π–º–µ—Ä –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
  useEffect(() => {
    let interval = null
    if (pendingSignal && !isWaitingFeedback) {
      interval = setInterval(() => {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const remainingTime = calculateRemainingTime(pendingSignal)
        
        if (remainingTime <= 0) {
          setSignalTimer(0)
          setIsWaitingFeedback(true)
        } else {
          setSignalTimer(remainingTime)
        }
      }, 1000)
    }
    return () => clearInterval(interval)
  }, [pendingSignal, signalTimer, isWaitingFeedback])

  // –¢–∞–π–º–µ—Ä cooldown –¥–ª—è –¢–û–ü-3
  useEffect(() => {
    let interval = null
    if (top3Cooldown > 0) {
      interval = setInterval(() => {
        setTop3Cooldown(cd => Math.max(0, cd - 1))
      }, 1000)
    }
    return () => clearInterval(interval)
  }, [top3Cooldown])

  // –¢–∞–π–º–µ—Ä cooldown –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
  useEffect(() => {
    let interval = null
    if (signalCooldown > 0) {
      interval = setInterval(() => {
        setSignalCooldown(cd => Math.max(0, cd - 1))
      }, 1000)
    }
    return () => clearInterval(interval)
  }, [signalCooldown])

  // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"
  useEffect(() => {
    if (noSignalAvailable) {
      const timeout = setTimeout(() => {
        setNoSignalAvailable(false)
      }, 5000) // –°–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      return () => clearTimeout(timeout)
    }
  }, [noSignalAvailable])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–û–ü-3
  const canGenerateTop3 = () => {
    if (!lastTop3Generation) return true
    const now = Date.now()
    const timePassed = now - lastTop3Generation
    const tenMinutes = 10 * 60 * 1000
    return timePassed >= tenMinutes
  }

  // –†–ï–ê–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¢–û–ü-3 —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ API –±–æ—Ç–∞
  const generateTop3Signals = async () => {
    setIsGenerating(true)
    setCurrentScreen('generating')
    
    // –≠—Ç–∞–ø—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const stages = [
      { stage: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä—ã–Ω–∫—É...', delay: 800 },
      { stage: '–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...', delay: 1200 },
      { stage: '–û—Ü–µ–Ω–∫–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞...', delay: 1000 },
      { stage: '–†–∞—Å—á—ë—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏...', delay: 900 },
      { stage: '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π...', delay: 1100 },
      { stage: '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–û–ü-3 —Å–∏–≥–Ω–∞–ª–æ–≤...', delay: 1000 }
    ]
    
    for (const { stage, delay } of stages) {
      setGenerationStage(stage)
      await new Promise(resolve => setTimeout(resolve, delay))
    }
    
    try {
      // –†–ï–ê–õ–¨–ù–´–ô –∑–∞–ø—Ä–æ—Å –∫ Signal API
      const response = await fetch(`${getApiUrl(5002)}/api/signal/generate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          user_id: userId,
          market: selectedMarket,
          mode: 'top3'
        })
      })
      
      const result = await response.json()
      
      if (result.success && result.signals) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è UI
        const signals = result.signals.map((signal, index) => ({
          ...signal,
          id: Date.now() + index,
          status: 'generated',
          time: '–¢–æ–ª—å–∫–æ —á—Ç–æ'
        }))
        
        setGeneratedSignals(signals)
        setLastTop3Generation(Date.now())
        setTop3Cooldown(600)
        setIsGenerating(false)
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏–∑ –¢–û–ü-3
        if (signals.length > 0) {
          activateSignal(signals[0])
          setCurrentScreen('main')
          console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª:', signals[0])
        } else {
          setCurrentScreen('signal-selection')
        }
        
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –†–ï–ê–õ–¨–ù–´–ï —Å–∏–≥–Ω–∞–ª—ã:', signals)
      } else {
        // –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        setIsGenerating(false)
        setNoSignalAvailable(true)
        setSignalCooldown(30)
        setCurrentScreen('signal-selection')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:', error)
      
      // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º mock —Å–∏–≥–Ω–∞–ª—ã (API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)')
      const pairs = selectedMarket === 'forex' 
        ? ['EUR/USD', 'GBP/USD', 'USD/JPY']
        : ['EUR/USD (OTC)', 'NZD/USD (OTC)', 'USD/CHF (OTC)']
      
      const signals = []
      for (let i = 0; i < 3; i++) {
        signals.push({
          signal_id: `mock_${pairs[i].replace('/', '_')}_${Date.now()}_${i}`,
          id: Date.now() + i,
          pair: pairs[i],
          type: Math.random() > 0.5 ? 'BUY' : 'SELL',
          direction: Math.random() > 0.5 ? 'BUY' : 'SELL',
          entry: selectedMarket === 'forex' ? (Math.random() * 2 + 1).toFixed(4) : (Math.random() * 10000 + 1000).toFixed(2),
          confidence: Math.random() * 0.3 + 0.7,
          expiration: Math.floor(Math.random() * 5) + 1,
          signal_type: selectedMarket === 'otc' ? 'otc' : 'forex',
          timestamp: new Date().toISOString(),
          status: 'generated',
          time: '–¢–æ–ª—å–∫–æ —á—Ç–æ'
        })
      }
      
      setGeneratedSignals(signals)
      setLastTop3Generation(Date.now())
      setTop3Cooldown(600)
      setIsGenerating(false)
      setCurrentScreen('signal-selection')
    }
  }

  // –†–ï–ê–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø–∞—Ä—ã —á–µ—Ä–µ–∑ API
  const generateSignalForPair = async (pair) => {
    setIsGenerating(true)
    setCurrentScreen('generating')
    
    // –≠—Ç–∞–ø—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const stages = [
      { stage: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä—ã–Ω–∫—É...', delay: 600 },
      { stage: `–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã ${pair}...`, delay: 800 },
      { stage: '–†–∞—Å—á—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...', delay: 700 },
      { stage: '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏...', delay: 900 },
      { stage: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞...', delay: 700 }
    ]
    
    for (const { stage, delay } of stages) {
      setGenerationStage(stage)
      await new Promise(resolve => setTimeout(resolve, delay))
    }
    
    try {
      // –†–ï–ê–õ–¨–ù–´–ô –∑–∞–ø—Ä–æ—Å –∫ Signal API
      const response = await fetch('/api/signal/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          user_id: userId,
          market: selectedMarket,
          mode: 'single',
          pair: pair
        })
      })
      
      const result = await response.json()
      
      if (result.success && result.signals && result.signals.length > 0) {
        // –ü–æ–ª—É—á–∏–ª–∏ –†–ï–ê–õ–¨–ù–´–ô —Å–∏–≥–Ω–∞–ª
        const signal = {
          ...result.signals[0],
          id: Date.now(),
          status: 'generated',
          time: '–¢–æ–ª—å–∫–æ —á—Ç–æ'
        }
        
        setGeneratedSignals([signal])
        setIsGenerating(false)
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        activateSignal(signal)
        setCurrentScreen('main')
        
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –†–ï–ê–õ–¨–ù–´–ô —Å–∏–≥–Ω–∞–ª:', signal)
      } else {
        // –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        setIsGenerating(false)
        setNoSignalAvailable(true)
        setSignalCooldown(30)
        setCurrentScreen('signal-selection')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞:', error)
      
      // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º mock —Å–∏–≥–Ω–∞–ª (API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)')
      
      const mockSignal = {
        signal_id: `mock_${pair.replace('/', '_')}_${Date.now()}`,
        id: Date.now(),
        pair: pair,
        type: Math.random() > 0.5 ? 'BUY' : 'SELL',
        direction: Math.random() > 0.5 ? 'BUY' : 'SELL',
        entry: selectedMarket === 'forex' ? (Math.random() * 2 + 1).toFixed(4) : (Math.random() * 10000 + 1000).toFixed(2),
        confidence: Math.random() * 0.3 + 0.7,
        expiration: Math.floor(Math.random() * 5) + 1,
        signal_type: pair.includes('OTC') ? 'otc' : 'forex',
        timestamp: new Date().toISOString(),
        status: 'generated',
        time: '–¢–æ–ª—å–∫–æ —á—Ç–æ'
      }
      
      setGeneratedSignals([mockSignal])
      setIsGenerating(false)
      setCurrentScreen('signal-selection')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const calculateRemainingTime = (signal) => {
    if (!signal || !signal.startTime) return 0
    
    const startTime = signal.startTime
    const expirationSeconds = signal.expiration * 60
    const currentTime = Date.now()
    const elapsedSeconds = Math.floor((currentTime - startTime) / 1000)
    const remainingSeconds = Math.max(0, expirationSeconds - elapsedSeconds)
    
    return remainingSeconds
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
  const clearSignalState = () => {
    setGeneratedSignals([])
    setPendingSignal(null)
    setSignalTimer(0)
    setIsWaitingFeedback(false)
    // –û—á–∏—â–∞–µ–º localStorage
    localStorage.removeItem('pendingSignal')
    localStorage.removeItem('signalTimer')
    localStorage.removeItem('isWaitingFeedback')
    localStorage.removeItem('signalStartTime')
  }

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
  const activateSignal = (signal) => {
    const expirationSeconds = signal.expiration * 60 // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
    const startTime = Date.now() // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
    
    setPendingSignal({
      ...signal,
      startTime: startTime
    })
    setSignalTimer(expirationSeconds)
    setIsWaitingFeedback(false)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ localStorage
    localStorage.setItem('signalStartTime', startTime.toString())
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–¥–±–µ–∫–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥
  const submitFeedback = async (isSuccess) => {
    if (!pendingSignal) return
    
    const feedbackData = {
      user_id: userId,
      signal_id: pendingSignal.signal_id,
      feedback: isSuccess ? 'success' : 'failure'
    }
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±–µ–∫ –Ω–∞ –±—ç–∫–µ–Ω–¥
      const response = await fetch('/api/signal/feedback', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(feedbackData)
      })
      
      const result = await response.json()
      
      if (result.success) {
        console.log('‚úÖ –§–∏–¥–±–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É:', result.user_stats)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±–µ–∫–∞:', error)
      console.warn('‚ö†Ô∏è –§–∏–¥–±–µ–∫ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (—Ä–∞–±–æ—Ç–∞ –±–µ–∑ API)')
    }
    
    // –õ–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`üìä –§–∏–¥–±–µ–∫: ${isSuccess ? 'success' : 'failure'} –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ ${pendingSignal.signal_id}`)
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    clearSignalState()
    
    alert(`‚úÖ –§–∏–¥–±–µ–∫ –ø—Ä–∏–Ω—è—Ç: ${isSuccess ? '–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞' : '–£–±—ã—Ç–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞'}`)
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setCurrentScreen('user-stats')
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const isNavigationBlocked = () => {
    return pendingSignal !== null
  }

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  const navigateWithCheck = (screen) => {
    if (isNavigationBlocked()) {
      alert('‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª!\n\n–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–∏–¥–±–µ–∫ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–¥–µ–ª–∫–∏.\n\n–ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±–µ–∫–∞.')
      return false
    }
    setCurrentScreen(screen)
    return true
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const handleAuthSuccess = (authData) => {
    setUserId(authData.userId)
    setIsAdmin(authData.isAdmin)
    setUserData(authData.userData)
    setUserSubscriptions(authData.subscriptions)
    setIsAuthorized(true)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫
    const savedLanguage = localStorage.getItem('selectedLanguage')
    if (savedLanguage) {
      setSelectedLanguage(savedLanguage)
      setCurrentScreen('welcome')
    } else {
      setCurrentScreen('language-select')
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const savedSignal = localStorage.getItem('pendingSignal')
    if (savedSignal) {
      const signal = JSON.parse(savedSignal)
      const startTime = parseInt(localStorage.getItem('signalStartTime')) || Date.now()
      const waitingFeedback = localStorage.getItem('isWaitingFeedback') === 'true'
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
      signal.startTime = startTime
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      const remainingTime = calculateRemainingTime(signal)
      
      if (remainingTime > 0) {
        setPendingSignal(signal)
        setSignalTimer(remainingTime)
        setIsWaitingFeedback(waitingFeedback)
        setShowReloadWarning(true)
        setCurrentScreen('main')
      } else {
        // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–¥–±–µ–∫
        setPendingSignal(signal)
        setSignalTimer(0)
        setIsWaitingFeedback(true)
        setShowReloadWarning(true)
        setCurrentScreen('main')
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const handleAuthError = (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
  }

  // Authorization Screen
  if (currentScreen === 'auth') {
    return (
      <TelegramAuth 
        onAuthSuccess={handleAuthSuccess}
        onAuthError={handleAuthError}
      />
    )
  }

  // Language Selection Screen
  if (currentScreen === 'language-select') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 flex items-center justify-center p-4 overflow-hidden relative">
        {/* Animated background elements */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute top-20 left-20 w-72 h-72 bg-emerald-500/10 rounded-full blur-3xl animate-glow-pulse"></div>
          <div className="absolute bottom-20 right-20 w-96 h-96 bg-cyan-500/10 rounded-full blur-3xl animate-glow-pulse" style={{animationDelay: '1s'}}></div>
          <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-64 h-64 bg-purple-500/5 rounded-full blur-3xl animate-glow-pulse" style={{animationDelay: '2s'}}></div>
        </div>

        <div className="max-w-4xl w-full space-y-8 animate-fade-in relative z-10 perspective-container">
          {/* Logo with enhanced animation */}
          <div className="flex justify-center">
            <div className="relative animate-float">
              <div className="absolute inset-0 bg-gradient-to-br from-emerald-400 to-cyan-500 rounded-3xl blur-2xl opacity-50 animate-glow-pulse"></div>
              <div className="relative w-28 h-28 rounded-3xl bg-gradient-to-br from-emerald-400 to-cyan-500 flex items-center justify-center shadow-2xl shadow-emerald-500/50 icon-3d hover:scale-110 transition-transform duration-500">
                <Globe className="w-14 h-14 text-white animate-spin-slow" />
              </div>
              <div className="absolute -inset-2 bg-gradient-to-br from-emerald-400/20 to-cyan-500/20 rounded-3xl blur-lg animate-pulse"></div>
            </div>
          </div>

          {/* Enhanced Header */}
          <div className="text-center space-y-6">
            <div className="relative">
              <h1 className="text-5xl font-bold text-white mb-4">
                {t('selectLanguage')}
              </h1>
              <h2 className="text-3xl font-bold bg-gradient-to-r from-emerald-400 to-cyan-500 bg-clip-text text-transparent">
                Select Language
              </h2>
              <div className="absolute -inset-4 bg-gradient-to-r from-emerald-500/10 to-cyan-500/10 rounded-2xl blur-xl"></div>
            </div>
            <p className="text-slate-400 text-xl max-w-2xl mx-auto leading-relaxed">
              –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è / Choose your preferred language to continue
            </p>
          </div>

          {/* Language Cards */}
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4">
            {languages.map((language, index) => (
              <Card 
                key={language.code}
                onClick={() => {
                  setSelectedLanguage(language.code)
                }}
                className={`glass-effect p-6 backdrop-blur-sm cursor-pointer transition-all duration-500 group card-3d border-slate-700/50 shadow-xl hover:shadow-2xl hover:shadow-emerald-500/20 hover:scale-110 hover:-translate-y-2 ${
                  selectedLanguage === language.code 
                    ? 'border-emerald-500/70 bg-emerald-500/10 scale-105' 
                    : 'hover:border-emerald-500/50'
                }`}
                style={{
                  animationDelay: `${index * 100}ms`
                }}
              >
                <div className="flex flex-col items-center gap-4">
                  <div className="relative">
                    <div className={`text-5xl transition-all duration-300 group-hover:scale-125 ${
                      selectedLanguage === language.code ? 'animate-bounce' : ''
                    }`}>
                      {language.flag}
                    </div>
                    {selectedLanguage === language.code && (
                      <div className="absolute -inset-2 bg-emerald-500/20 rounded-full blur-lg animate-pulse"></div>
                    )}
                  </div>
                  <div className="text-center">
                    <h3 className={`font-bold text-sm transition-colors duration-300 ${
                      selectedLanguage === language.code ? 'text-emerald-400' : 'text-white'
                    }`}>
                      {language.name}
                    </h3>
                    <p className="text-xs text-slate-500 mt-1">{language.code.toUpperCase()}</p>
                  </div>
                  {selectedLanguage === language.code && (
                    <div className="absolute top-2 right-2">
                      <div className="w-6 h-6 rounded-full bg-emerald-500 flex items-center justify-center">
                        <CheckCircle2 className="w-4 h-4 text-white" />
                      </div>
                    </div>
                  )}
                </div>
              </Card>
            ))}
          </div>

          {/* Continue Button */}
          {selectedLanguage && (
            <div className="flex justify-center">
              <Button 
                onClick={() => {
                  localStorage.setItem('selectedLanguage', selectedLanguage)
                  setCurrentScreen('welcome')
                }}
                className="bg-gradient-to-r from-emerald-500 to-cyan-500 hover:from-emerald-600 hover:to-cyan-600 text-white py-6 px-12 text-xl font-bold rounded-2xl shadow-2xl shadow-emerald-500/30 transition-all duration-500 hover:shadow-emerald-500/50 hover:scale-110 hover:-translate-y-2 animate-pulse-slow"
              >
                <span className="flex items-center gap-3">
                  {t('continue')} / Continue
                  <ArrowRight className="w-6 h-6 group-hover:translate-x-1 transition-transform" />
                </span>
              </Button>
            </div>
          )}
        </div>
      </div>
    )
  }

  // Welcome Screen
  if (currentScreen === 'welcome') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 flex items-center justify-center p-4 overflow-hidden relative">
        {/* Animated background elements */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute top-20 left-20 w-72 h-72 bg-emerald-500/10 rounded-full blur-3xl animate-glow-pulse"></div>
          <div className="absolute bottom-20 right-20 w-96 h-96 bg-cyan-500/10 rounded-full blur-3xl animate-glow-pulse" style={{animationDelay: '1s'}}></div>
        </div>

        <div className="max-w-md w-full space-y-8 animate-fade-in relative z-10 perspective-container">
          {/* Logo */}
          <div className="flex justify-center">
            <div className="relative animate-float">
              <div className="absolute inset-0 bg-gradient-to-br from-emerald-400 to-cyan-500 rounded-3xl blur-2xl opacity-50 animate-glow-pulse"></div>
              <div className="relative w-24 h-24 rounded-3xl bg-gradient-to-br from-emerald-400 to-cyan-500 flex items-center justify-center shadow-2xl shadow-emerald-500/50 icon-3d">
                <Activity className="w-12 h-12 text-white" />
              </div>
            </div>
          </div>

          {/* Welcome Text */}
          <div className="text-center space-y-4">
            <h1 className="text-4xl font-bold text-white">
              {t('welcomeTo')}
              <span className="block bg-gradient-to-r from-emerald-400 to-cyan-500 bg-clip-text text-transparent mt-2">
                Forex Signals Pro
              </span>
            </h1>
            <p className="text-slate-400 text-lg">
              {t('premiumSignals')}
            </p>
          </div>

          {/* Features */}
          <div className="space-y-4">
            <Card className="glass-effect p-4 backdrop-blur-sm card-3d border-slate-700/50 shadow-xl">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-lg bg-emerald-500/20 flex items-center justify-center icon-3d shadow-lg shadow-emerald-500/20">
                  <Sparkles className="w-5 h-5 text-emerald-400" />
                </div>
                <div>
                  <h3 className="text-white font-semibold">{t('accurateSignals')}</h3>
                  <p className="text-slate-400 text-sm">{t('successfulTrades')}</p>
                </div>
              </div>
            </Card>

            <Card className="glass-effect p-4 backdrop-blur-sm card-3d border-slate-700/50 shadow-xl">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-lg bg-cyan-500/20 flex items-center justify-center icon-3d shadow-lg shadow-cyan-500/20">
                  <Zap className="w-5 h-5 text-cyan-400" />
                </div>
                <div>
                  <h3 className="text-white font-semibold">{t('instantNotifications')}</h3>
                  <p className="text-slate-400 text-sm">{t('realTimeSignals')}</p>
                </div>
              </div>
            </Card>

            <Card className="glass-effect p-4 backdrop-blur-sm card-3d border-slate-700/50 shadow-xl">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-lg bg-amber-500/20 flex items-center justify-center icon-3d shadow-lg shadow-amber-500/20">
                  <Crown className="w-5 h-5 text-amber-400" />
                </div>
                <div>
                  <h3 className="text-white font-semibold">{t('premiumQuality')}</h3>
                  <p className="text-slate-400 text-sm">{t('professionalAnalysis')}</p>
                </div>
              </div>
            </Card>
          </div>

          {/* Start Button */}
          <Button 
            onClick={() => setCurrentScreen('menu')}
            className="w-full bg-gradient-to-r from-emerald-500 to-cyan-500 hover:from-emerald-600 hover:to-cyan-600 text-white py-6 text-lg font-semibold rounded-xl shadow-2xl shadow-emerald-500/30 transition-all duration-300 hover:shadow-emerald-500/50 hover:scale-105 hover:-translate-y-1"
          >
            {t('start')}
            <ArrowRight className="w-5 h-5 ml-2" />
          </Button>
        </div>
      </div>
    )
  }

  // Main Menu Screen
  if (currentScreen === 'menu') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 flex items-center justify-center p-4 overflow-hidden relative">
        {/* Animated background */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-emerald-500/5 rounded-full blur-3xl animate-glow-pulse"></div>
          <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-cyan-500/5 rounded-full blur-3xl animate-glow-pulse" style={{animationDelay: '1.5s'}}></div>
        </div>

        <div className="max-w-md w-full space-y-8 animate-fade-in relative z-10 perspective-container">
          {/* Header */}
          <div className="text-center space-y-2">
            <h2 className="text-3xl font-bold text-white">{t('menu')}</h2>
            <p className="text-slate-400">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ / Choose action</p>
          </div>

          {/* Menu Options */}
          <div className="space-y-4">
            <Card 
              onClick={() => setCurrentScreen('market-select')}
              className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-emerald-500/50 transition-all duration-300 group card-3d border-slate-700/50 shadow-xl"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-emerald-500/20 to-emerald-600/10 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 icon-3d shadow-xl shadow-emerald-500/20">
                    <TrendingUp className="w-8 h-8 text-emerald-400" />
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-white mb-1">{t('tradingSignals')}</h3>
                    <p className="text-slate-400 text-sm">–ü–æ–ª—É—á–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ / Get trading signals</p>
                  </div>
                </div>
                <ChevronRight className="w-6 h-6 text-slate-600 group-hover:text-emerald-400 group-hover:translate-x-1 transition-all duration-300" />
              </div>
            </Card>

            <Card 
              onClick={() => setCurrentScreen('analytics')}
              className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-cyan-500/50 transition-all duration-300 group card-3d border-slate-700/50 shadow-xl"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-cyan-500/20 to-cyan-600/10 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 icon-3d shadow-xl shadow-cyan-500/20">
                    <BarChart3 className="w-8 h-8 text-cyan-400" />
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-white mb-1">{t('analytics')}</h3>
                    <p className="text-slate-400 text-sm">–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å AI / AI signal analysis</p>
                  </div>
                </div>
                <ChevronRight className="w-6 h-6 text-slate-600 group-hover:text-cyan-400 group-hover:translate-x-1 transition-all duration-300" />
              </div>
            </Card>

            <Card 
              onClick={() => window.open('https://t.me/NeKnopkaBabl0', '_blank')}
              className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-purple-500/50 transition-all duration-300 group card-3d border-slate-700/50 shadow-xl"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-purple-500/20 to-purple-600/10 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 icon-3d shadow-xl shadow-purple-500/20">
                    <Users className="w-8 h-8 text-purple-400" />
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-white mb-1">{t('community')}</h3>
                    <p className="text-slate-400 text-sm">–û–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞–º–∏ / Chat with other traders</p>
                  </div>
                </div>
                <ChevronRight className="w-6 h-6 text-slate-600 group-hover:text-purple-400 group-hover:translate-x-1 transition-all duration-300" />
              </div>
            </Card>

            <Card 
              onClick={() => setCurrentScreen('premium')}
              className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-yellow-500/50 transition-all duration-300 group card-3d border-yellow-500/30 shadow-xl"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-yellow-500/20 to-yellow-600/10 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 icon-3d shadow-xl shadow-yellow-500/20">
                    <Crown className="w-8 h-8 text-yellow-400" />
                  </div>
                  <div>
                    <div className="flex items-center gap-2 mb-1">
                      <h3 className="text-xl font-bold text-white">{t('premium')}</h3>
                      <Badge className="bg-yellow-500/20 text-yellow-400 border-yellow-500/50">
                        VIP
                      </Badge>
                    </div>
                    <p className="text-slate-400 text-sm">–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ ML-–º–æ–¥–µ–ª–∏</p>
                  </div>
                </div>
                <ChevronRight className="w-6 h-6 text-slate-600 group-hover:text-yellow-400 group-hover:translate-x-1 transition-all duration-300" />
              </div>
            </Card>

            <Card 
              onClick={() => setCurrentScreen('settings')}
              className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-amber-500/50 transition-all duration-300 group card-3d border-slate-700/50 shadow-xl"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-amber-500/20 to-amber-600/10 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 icon-3d shadow-xl shadow-amber-500/20">
                    <Settings className="w-8 h-8 text-amber-400" />
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-white mb-1">{t('settings')}</h3>
                    <p className="text-slate-400 text-sm">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏</p>
                  </div>
                </div>
                <ChevronRight className="w-6 h-6 text-slate-600 group-hover:text-amber-400 group-hover:translate-x-1 transition-all duration-300" />
              </div>
            </Card>
          </div>

          {/* Back Button */}
          <Button 
            onClick={() => setCurrentScreen('welcome')}
            variant="ghost"
            className="w-full text-slate-400 hover:text-white hover:bg-slate-800/50"
          >
            {t('back')}
          </Button>
        </div>
      </div>
    )
  }

  // Generating Screen - –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  if (currentScreen === 'generating') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 flex items-center justify-center p-4 overflow-hidden relative">
        {/* Animated background */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute top-1/3 left-1/3 w-96 h-96 bg-cyan-500/10 rounded-full blur-3xl animate-glow-pulse"></div>
          <div className="absolute bottom-1/3 right-1/3 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-glow-pulse" style={{animationDelay: '1s'}}></div>
        </div>

        <div className="max-w-2xl w-full space-y-8 animate-fade-in relative z-10">
          {/* Animated Brain Icon */}
          <div className="flex justify-center">
            <div className="relative">
              <div className="absolute inset-0 bg-gradient-to-br from-cyan-400 to-purple-500 rounded-3xl blur-2xl opacity-50 animate-glow-pulse"></div>
              <div className="relative w-32 h-32 rounded-3xl bg-gradient-to-br from-cyan-400 to-purple-500 flex items-center justify-center shadow-2xl shadow-cyan-500/50 icon-3d animate-float">
                <Brain className="w-16 h-16 text-white animate-pulse" />
              </div>
            </div>
          </div>

          {/* Generation Status */}
          <Card className="glass-effect border-cyan-500/30 p-8 card-3d shadow-2xl text-center">
            <h2 className="text-3xl font-bold text-white mb-4">üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤</h2>
            <div className="space-y-4">
              <div className="flex items-center justify-center gap-3">
                <Activity className="w-6 h-6 text-cyan-400 animate-pulse" />
                <p className="text-xl text-cyan-400 font-semibold animate-pulse">
                  {generationStage}
                </p>
              </div>
              
              {/* Progress bar */}
              <div className="w-full bg-slate-800/50 rounded-full h-3 overflow-hidden">
                <div className="h-full bg-gradient-to-r from-cyan-500 to-purple-500 rounded-full animate-pulse"></div>
              </div>

              <div className="grid grid-cols-3 gap-4 mt-6">
                <div className="p-4 bg-slate-800/50 rounded-lg border border-cyan-500/30">
                  <BarChart3 className="w-6 h-6 text-cyan-400 mx-auto mb-2 animate-bounce" />
                  <p className="text-xs text-slate-400">–ê–Ω–∞–ª–∏–∑</p>
                </div>
                <div className="p-4 bg-slate-800/50 rounded-lg border border-purple-500/30">
                  <Brain className="w-6 h-6 text-purple-400 mx-auto mb-2 animate-spin-slow" />
                  <p className="text-xs text-slate-400">ML –º–æ–¥–µ–ª—å</p>
                </div>
                <div className="p-4 bg-slate-800/50 rounded-lg border border-emerald-500/30">
                  <Target className="w-6 h-6 text-emerald-400 mx-auto mb-2 animate-pulse" />
                  <p className="text-xs text-slate-400">–¢–æ—á–Ω–æ—Å—Ç—å</p>
                </div>
              </div>
            </div>
          </Card>

          <p className="text-slate-400 text-center text-sm">
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫...
          </p>
        </div>
      </div>
    )
  }

  // Signal Selection Screen - –í—ã–±–æ—Ä —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
  if (currentScreen === 'signal-selection') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950">
        {/* Header */}
        <header className="sticky top-0 z-50 backdrop-blur-xl bg-slate-950/80 border-b border-slate-800/50 shadow-xl">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-emerald-400 to-cyan-500 flex items-center justify-center shadow-lg shadow-emerald-500/30 icon-3d">
                  <Sparkles className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-white">
                    {selectedMode === 'top3' ? '–¢–û–ü-3 –°–∏–≥–Ω–∞–ª–∞' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª'}
                  </h1>
                  <Badge className="bg-emerald-500/20 text-emerald-400 border-emerald-500/50 text-xs">
                    {generatedSignals.length} —Å–∏–≥–Ω–∞–ª{generatedSignals.length > 1 ? '–∞' : ''}
                  </Badge>
                </div>
              </div>
              {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –Ω–µ –∏–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è */}
              {generatedSignals.length === 0 && !isGenerating && (
                <Button 
                  onClick={() => setCurrentScreen('mode-select')}
                  variant="ghost" 
                  size="icon" 
                  className="text-slate-400 hover:text-white hover:bg-slate-800/50"
                >
                  <ChevronRight className="w-5 h-5 rotate-180" />
                </Button>
              )}
            </div>
          </div>
        </header>

        {/* Content based on mode */}
        <div className="container mx-auto px-4 py-6">
          {selectedMode === 'top3' ? (
            // –¢–û–ü-3 —Ä–µ–∂–∏–º: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            <>
              <div className="mb-6 text-center">
                <h2 className="text-2xl font-bold text-white mb-2">
                  üèÜ –¢–û–ü-3 —Å–∏–≥–Ω–∞–ª–∞ –≥–æ—Ç–æ–≤—ã!
                </h2>
                <p className="text-slate-400">–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–≥–Ω–∞–ª –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {generatedSignals.map((signal, index) => (
                  <Card 
                    key={signal.id}
                    onClick={() => {
                      activateSignal(signal)
                      setCurrentScreen('main')
                    }}
                    className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-emerald-500/50 transition-all duration-300 card-3d border-slate-700/50 shadow-xl hover:scale-105"
                  >
                    <div className="space-y-4">
                      {/* Header */}
                      <div className="flex items-center justify-between">
                        <h3 className="text-xl font-bold text-white">{signal.pair}</h3>
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                          signal.type === 'BUY' ? 'bg-emerald-500/20' : 'bg-rose-500/20'
                        }`}>
                          {signal.type === 'BUY' ? (
                            <TrendingUp className="w-4 h-4 text-emerald-400" />
                          ) : (
                            <TrendingDown className="w-4 h-4 text-rose-400" />
                          )}
                        </div>
                      </div>

                      {/* Signal Type */}
                      <div className="flex items-center justify-between">
                        <span className="text-slate-400 text-sm">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</span>
                        <Badge className={`${
                          signal.type === 'BUY' 
                            ? 'bg-emerald-500/20 text-emerald-400 border-emerald-500/50' 
                            : 'bg-rose-500/20 text-rose-400 border-rose-500/50'
                        }`}>
                          {signal.type}
                        </Badge>
                      </div>

                      {/* Expiration Time */}
                      <div className="flex items-center justify-between">
                        <span className="text-slate-400 text-sm">–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è:</span>
                        <span className="text-white font-semibold">
                          {signal.expiration} –º–∏–Ω
                        </span>
                      </div>

                      {/* Confidence Score */}
                      <div className="space-y-2">
                        <div className="flex items-center justify-between text-xs">
                          <span className="text-slate-400 flex items-center gap-1">
                            <Target className="w-3 h-3" />
                            –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                          </span>
                          <span className="text-white font-semibold">
                            {(signal.confidence * 100).toFixed(1)}%
                          </span>
                        </div>
                        <div className="w-full h-2 bg-slate-800 rounded-full overflow-hidden shadow-inner">
                          <div 
                            className="h-full transition-all duration-500 shadow-lg"
                            style={{ 
                              width: `${signal.confidence * 100}%`,
                              background: `linear-gradient(to right, 
                                #ef4444 0%, 
                                #f97316 20%, 
                                #eab308 40%, 
                                #84cc16 60%, 
                                #22c55e 80%, 
                                #16a34a 100%)`
                            }}
                          />
                        </div>
                      </div>

                      {/* Click to Activate */}
                      <div className="text-center pt-2">
                        <span className="text-emerald-400 text-sm font-semibold">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</span>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>
            </>
          ) : generatedSignals.length > 0 ? (
            // –û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            <>
              <div className="mb-6 text-center">
                <h2 className="text-2xl font-bold text-white mb-2">
                  ‚úÖ –°–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤!
                </h2>
                <p className="text-slate-400">–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏</p>
              </div>

              <div className="max-w-md mx-auto">
                {generatedSignals.map((signal, index) => (
                  <Card 
                    key={signal.id}
                    onClick={() => {
                      activateSignal(signal)
                      setCurrentScreen('main')
                    }}
                    className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-emerald-500/50 transition-all duration-300 card-3d border-slate-700/50 shadow-xl hover:scale-105"
                  >
                    <div className="space-y-4">
                      {/* Header */}
                      <div className="flex items-center justify-between">
                        <h3 className="text-xl font-bold text-white">{signal.pair}</h3>
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                          signal.type === 'BUY' ? 'bg-emerald-500/20' : 'bg-rose-500/20'
                        }`}>
                          {signal.type === 'BUY' ? (
                            <TrendingUp className="w-4 h-4 text-emerald-400" />
                          ) : (
                            <TrendingDown className="w-4 h-4 text-rose-400" />
                          )}
                        </div>
                      </div>

                      {/* Signal Type */}
                      <div className="flex items-center justify-between">
                        <span className="text-slate-400 text-sm">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</span>
                        <Badge className={`${
                          signal.type === 'BUY' 
                            ? 'bg-emerald-500/20 text-emerald-400 border-emerald-500/50' 
                            : 'bg-rose-500/20 text-rose-400 border-rose-500/50'
                        }`}>
                          {signal.type}
                        </Badge>
                      </div>

                      {/* Expiration Time */}
                      <div className="flex items-center justify-between">
                        <span className="text-slate-400 text-sm">–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è:</span>
                        <span className="text-white font-semibold">
                          {signal.expiration} –º–∏–Ω
                        </span>
                      </div>

                      {/* Confidence Score */}
                      <div className="space-y-2">
                        <div className="flex items-center justify-between text-xs">
                          <span className="text-slate-400 flex items-center gap-1">
                            <Target className="w-3 h-3" />
                            –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                          </span>
                          <span className="text-white font-semibold">
                            {(signal.confidence * 100).toFixed(1)}%
                          </span>
                        </div>
                        <div className="w-full h-2 bg-slate-800 rounded-full overflow-hidden shadow-inner">
                          <div 
                            className="h-full transition-all duration-500 shadow-lg"
                            style={{ 
                              width: `${signal.confidence * 100}%`,
                              background: `linear-gradient(to right, 
                                #ef4444 0%, 
                                #f97316 20%, 
                                #eab308 40%, 
                                #84cc16 60%, 
                                #22c55e 80%, 
                                #16a34a 100%)`
                            }}
                          />
                        </div>
                      </div>

                      {/* Click to Activate */}
                      <div className="text-center pt-2">
                        <span className="text-emerald-400 text-sm font-semibold">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</span>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>
            </>
          ) : (
            // –û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
            <>
              <div className="mb-6 text-center">
                <h2 className="text-2xl font-bold text-white mb-2">
                  üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
                </h2>
                <p className="text-slate-400">–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞</p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {(marketMetrics[selectedMarket]?.length > 0
                  ? marketMetrics[selectedMarket]
                  : (selectedMarket === 'forex' ? [
                      { pair: 'EUR/USD', sentiment: '–ó–∞–≥—Ä—É–∑–∫–∞...', volatility: 0, trend: 'HOLD' },
                      { pair: 'GBP/USD', sentiment: '–ó–∞–≥—Ä—É–∑–∫–∞...', volatility: 0, trend: 'HOLD' },
                      { pair: 'USD/JPY', sentiment: '–ó–∞–≥—Ä—É–∑–∫–∞...', volatility: 0, trend: 'HOLD' },
                      { pair: 'USD/CHF', sentiment: '–ó–∞–≥—Ä—É–∑–∫–∞...', volatility: 0, trend: 'HOLD' }
                    ] : [
                      { pair: 'EUR/USD (OTC)', sentiment: '–ó–∞–≥—Ä—É–∑–∫–∞...', volatility: 0, trend: 'HOLD' },
                      { pair: 'NZD/USD (OTC)', sentiment: '–ó–∞–≥—Ä—É–∑–∫–∞...', volatility: 0, trend: 'HOLD' },
                      { pair: 'USD/CHF (OTC)', sentiment: '–ó–∞–≥—Ä—É–∑–∫–∞...', volatility: 0, trend: 'HOLD' },
                      { pair: 'GBP/USD (OTC)', sentiment: '–ó–∞–≥—Ä—É–∑–∫–∞...', volatility: 0, trend: 'HOLD' }
                    ])
                ).map((market, index) => (
                  <Card 
                    key={market.pair}
                    onClick={() => {
                      // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                      generateSignalForPair(market.pair)
                    }}
                    className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-emerald-500/50 transition-all duration-300 card-3d border-slate-700/50 shadow-xl hover:scale-105"
                  >
                <div className="space-y-4">
                  {/* Header */}
                  <div className="flex items-center justify-between">
                    <h3 className="text-xl font-bold text-white">{market.pair}</h3>
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                      market.sentiment === '–ë—ã—á–∏–π' ? 'bg-emerald-500/20' :
                      market.sentiment === '–ú–µ–¥–≤–µ–∂–∏–π' ? 'bg-rose-500/20' :
                      'bg-amber-500/20'
                    }`}>
                      {market.sentiment === '–ë—ã—á–∏–π' ? (
                        <TrendingUp className="w-4 h-4 text-emerald-400" />
                      ) : market.sentiment === '–ú–µ–¥–≤–µ–∂–∏–π' ? (
                        <TrendingDown className="w-4 h-4 text-rose-400" />
                      ) : (
                        <Activity className="w-4 h-4 text-amber-400" />
                      )}
                    </div>
                  </div>

                  {/* Market Status */}
                  <div className="grid grid-cols-2 gap-4">
                    <div className="p-3 bg-slate-800/50 rounded-lg border border-slate-700/30">
                      <span className="text-slate-400 text-xs block mb-1">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</span>
                      <Badge className={`${
                        market.sentiment === '–ë—ã—á–∏–π' ? 'bg-emerald-500/20 text-emerald-400 border-emerald-500/50' :
                        market.sentiment === '–ú–µ–¥–≤–µ–∂–∏–π' ? 'bg-rose-500/20 text-rose-400 border-rose-500/50' :
                        'bg-amber-500/20 text-amber-400 border-amber-500/50'
                      }`}>
                        {market.sentiment}
                      </Badge>
                    </div>
                    <div className="p-3 bg-slate-800/50 rounded-lg border border-slate-700/30">
                      <span className="text-slate-400 text-xs block mb-1">–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å</span>
                      <span className="text-white font-bold">{market.volatility}%</span>
                    </div>
                  </div>

                  {/* Trend Indicator */}
                  <div className="flex items-center justify-between">
                    <span className="text-slate-400 text-sm">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</span>
                    <Badge className={`${
                      market.trend === 'BUY' ? 'bg-emerald-500/20 text-emerald-400 border-emerald-500/50' :
                      market.trend === 'SELL' ? 'bg-rose-500/20 text-rose-400 border-rose-500/50' :
                      'bg-amber-500/20 text-amber-400 border-amber-500/50'
                    }`}>
                      {market.trend === 'HOLD' ? '–û–ñ–ò–î–ê–ù–ò–ï' : market.trend}
                    </Badge>
                  </div>

                  {/* Click to Generate */}
                  <div className="text-center pt-2">
                    <span className="text-emerald-400 text-sm font-semibold">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞</span>
                  </div>
                </div>
              </Card>
            ))}
          </div>

          {/* Info */}
          <Card className="glass-effect border-cyan-500/30 p-6 mt-6 card-3d shadow-2xl">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 rounded-lg bg-cyan-500/20 flex items-center justify-center icon-3d shadow-lg shadow-cyan-500/20">
                <Target className="w-5 h-5 text-cyan-400" />
              </div>
              <div>
                <h3 className="text-lg font-bold text-white mb-1">–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–≥–Ω–∞–ª</h3>
                <p className="text-slate-400 text-sm">
                  –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏. –í—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫.
                </p>
              </div>
            </div>
          </Card>
            </>
          )}
        </div>
      </div>
    )
  }

  // Analytics Screen - List of completed signals for AI analysis
  if (currentScreen === 'analytics') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950">
        {/* Header */}
        <header className="sticky top-0 z-50 backdrop-blur-xl bg-slate-950/80 border-b border-slate-800/50 shadow-xl">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-cyan-400 to-cyan-600 flex items-center justify-center shadow-lg shadow-cyan-500/30 icon-3d">
                  <BarChart3 className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-white">AI –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
                  <Badge className="bg-cyan-500/20 text-cyan-400 border-cyan-500/50 text-xs">
                    GPT-4O MINI
                  </Badge>
                </div>
              </div>
              <Button 
                onClick={() => setCurrentScreen('menu')}
                variant="ghost" 
                size="icon" 
                className="text-slate-400 hover:text-white hover:bg-slate-800/50"
              >
                <ChevronRight className="w-5 h-5 rotate-180" />
              </Button>
            </div>
          </div>
        </header>

        {/* Analytics Content */}
        <div className="container mx-auto px-4 py-6">
          {!selectedSignalForAnalysis ? (
            // List of completed signals
            <>
              <div className="mb-6">
                <h2 className="text-2xl font-bold text-white mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–≥–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h2>
                <p className="text-slate-400">AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫—É –∏ –¥–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</p>
              </div>

              <div className="space-y-4">
                {historySignals.map((signal) => (
                  <Card 
                    key={signal.id}
                    onClick={() => setSelectedSignalForAnalysis(signal)}
                    className="glass-effect backdrop-blur-sm overflow-hidden transition-all duration-300 card-3d border-slate-700/50 shadow-xl cursor-pointer hover:border-cyan-500/50 hover:scale-102"
                  >
                    <div className="p-5">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <div className={`w-12 h-12 rounded-xl flex items-center justify-center icon-3d shadow-xl ${
                            signal.result === 'profit'
                              ? 'bg-gradient-to-br from-emerald-500/20 to-emerald-600/10 shadow-emerald-500/30' 
                              : 'bg-gradient-to-br from-rose-500/20 to-rose-600/10 shadow-rose-500/30'
                          }`}>
                            {signal.type === 'BUY' ? (
                              <TrendingUp className={`w-6 h-6 ${signal.result === 'profit' ? 'text-emerald-400' : 'text-rose-400'}`} />
                            ) : (
                              <TrendingDown className={`w-6 h-6 ${signal.result === 'profit' ? 'text-emerald-400' : 'text-rose-400'}`} />
                            )}
                          </div>
                          <div>
                            <h3 className="text-lg font-bold text-white">{signal.pair}</h3>
                            <div className="flex items-center gap-2 mt-1">
                              <Badge className={`${
                                signal.type === 'BUY' 
                                  ? 'bg-emerald-500/20 text-emerald-400 border-emerald-500/50' 
                                  : 'bg-rose-500/20 text-rose-400 border-rose-500/50'
                              } text-xs`}>
                                {signal.type}
                              </Badge>
                              <span className="text-xs text-slate-500">{signal.time}</span>
                            </div>
                          </div>
                        </div>
                        <div className="text-right">
                          <Badge className={`${
                            signal.result === 'profit' 
                              ? 'bg-emerald-500/20 text-emerald-400 border-emerald-500/50' 
                              : 'bg-rose-500/20 text-rose-400 border-rose-500/50'
                          }`}>
                            {signal.result === 'profit' ? '–£—Å–ø–µ—à–Ω–æ' : '–ü—Ä–æ–∏–≥—Ä—ã—à'}
                          </Badge>
                          <div className="text-xs text-slate-500 mt-2">
                            {signal.entry} ‚Üí {signal.closePrice}
                          </div>
                          <ChevronRight className="w-5 h-5 text-slate-600 group-hover:text-cyan-400 mt-2" />
                        </div>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>
            </>
          ) : (
            // Signal analysis view
            <>
              <div className="mb-6">
                <Button 
                  onClick={() => {
                    setSelectedSignalForAnalysis(null)
                    setAnalysisResult(null)
                  }}
                  variant="ghost"
                  className="text-slate-400 hover:text-white mb-4"
                >
                  <ChevronRight className="w-5 h-5 rotate-180 mr-2" />
                  –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
                </Button>
              </div>

              {/* Signal Details Card */}
              <Card className="glass-effect border-slate-700/50 p-6 card-3d shadow-2xl mb-6">
                <div className="flex items-center gap-4 mb-6">
                  <div className={`w-16 h-16 rounded-xl flex items-center justify-center icon-3d shadow-xl ${
                    selectedSignalForAnalysis.result === 'profit'
                      ? 'bg-gradient-to-br from-emerald-500/20 to-emerald-600/10 shadow-emerald-500/30' 
                      : 'bg-gradient-to-br from-rose-500/20 to-rose-600/10 shadow-rose-500/30'
                  }`}>
                    {selectedSignalForAnalysis.type === 'BUY' ? (
                      <TrendingUp className={`w-8 h-8 ${selectedSignalForAnalysis.result === 'profit' ? 'text-emerald-400' : 'text-rose-400'}`} />
                    ) : (
                      <TrendingDown className={`w-8 h-8 ${selectedSignalForAnalysis.result === 'profit' ? 'text-emerald-400' : 'text-rose-400'}`} />
                    )}
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold text-white">{selectedSignalForAnalysis.pair}</h2>
                    <div className="flex items-center gap-2 mt-1">
                      <Badge className={`${
                        selectedSignalForAnalysis.type === 'BUY' 
                          ? 'bg-emerald-500/20 text-emerald-400 border-emerald-500/50' 
                          : 'bg-rose-500/20 text-rose-400 border-rose-500/50'
                      }`}>
                        {selectedSignalForAnalysis.type}
                      </Badge>
                      <Badge className={`${
                        selectedSignalForAnalysis.result === 'profit' 
                          ? 'bg-emerald-500/20 text-emerald-400 border-emerald-500/50' 
                          : 'bg-rose-500/20 text-rose-400 border-rose-500/50'
                      }`}>
                        {selectedSignalForAnalysis.result === 'profit' ? '–£—Å–ø–µ—à–Ω–æ' : '–ü—Ä–æ–∏–≥—Ä—ã—à'}
                      </Badge>
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="p-3 bg-slate-800/50 rounded-lg border border-slate-700/30">
                    <span className="text-slate-400 text-xs block mb-1">–í—Ö–æ–¥</span>
                    <span className="text-white font-bold">{selectedSignalForAnalysis.entry}</span>
                  </div>
                  <div className="p-3 bg-slate-800/50 rounded-lg border border-slate-700/30">
                    <span className="text-slate-400 text-xs block mb-1">Take Profit</span>
                    <span className="text-white font-bold">{selectedSignalForAnalysis.tp.join(', ')}</span>
                  </div>
                  <div className="p-3 bg-slate-800/50 rounded-lg border border-slate-700/30">
                    <span className="text-slate-400 text-xs block mb-1">Stop Loss</span>
                    <span className="text-white font-bold">{selectedSignalForAnalysis.sl}</span>
                  </div>
                  <div className="p-3 bg-slate-800/50 rounded-lg border border-slate-700/30">
                    <span className="text-slate-400 text-xs block mb-1">–ó–∞–∫—Ä—ã—Ç–∏–µ</span>
                    <span className="text-white font-bold">{selectedSignalForAnalysis.closePrice}</span>
                  </div>
                </div>
              </Card>

              {/* Analyze Button */}
              {!analysisResult && !isAnalyzing && (
                <Button
                  onClick={() => analyzeSignal(selectedSignalForAnalysis)}
                  className="w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white py-6 text-lg font-bold shadow-xl shadow-cyan-500/30 mb-6"
                >
                  <Brain className="w-6 h-6 mr-2" />
                  –ó–∞–ø—É—Å—Ç–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑
                </Button>
              )}

              {/* Loading state */}
              {isAnalyzing && (
                <Card className="glass-effect border-cyan-500/30 p-8 card-3d shadow-2xl text-center mb-6">
                  <div className="flex flex-col items-center gap-4">
                    <div className="w-16 h-16 rounded-full bg-cyan-500/20 flex items-center justify-center animate-pulse">
                      <Brain className="w-8 h-8 text-cyan-400 animate-spin" />
                    </div>
                    <h3 className="text-xl font-bold text-white">–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–¥–µ–ª–∫—É...</h3>
                    <p className="text-slate-400">GPT-4o mini –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ</p>
                  </div>
                </Card>
              )}

              {/* Analysis Result */}
              {analysisResult && (
                <Card className="glass-effect border-cyan-500/30 p-6 card-3d shadow-2xl">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-cyan-500/20 to-cyan-600/10 flex items-center justify-center icon-3d shadow-xl shadow-cyan-500/20">
                      <Brain className="w-6 h-6 text-cyan-400" />
                    </div>
                    <div>
                      <h3 className="text-xl font-bold text-white">AI –ê–Ω–∞–ª–∏–∑</h3>
                      <Badge className="bg-cyan-500/20 text-cyan-400 border-cyan-500/50 text-xs">
                        GPT-4O MINI
                      </Badge>
                    </div>
                  </div>

                  <div className="prose prose-invert max-w-none">
                    <div className="text-slate-300 whitespace-pre-wrap leading-relaxed">
                      {analysisResult}
                    </div>
                  </div>

                  <Button
                    onClick={() => {
                      setSelectedSignalForAnalysis(null)
                      setAnalysisResult(null)
                    }}
                    variant="outline"
                    className="w-full mt-6 border-cyan-500/50 text-cyan-400 hover:bg-cyan-500/10"
                  >
                    –ó–∞–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏–∑
                  </Button>
                </Card>
              )}
            </>
          )}
        </div>
      </div>
    )
  }

  // Main Screen - –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  if (currentScreen === 'main') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950">
        {/* Header —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π */}
        <header className="sticky top-0 z-50 backdrop-blur-xl bg-red-950/80 border-b border-red-800/50 shadow-xl">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-center">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-red-500 to-red-600 flex items-center justify-center shadow-xl">
                  <Lock className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-white">–°–î–ï–õ–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê</h1>
                  <p className="text-red-400 text-sm">–ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞</p>
                </div>
              </div>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <div className="container mx-auto px-4 py-6">
          {pendingSignal && (
            <>
              {/* –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª */}
              <Card className="glass-effect backdrop-blur-sm border-emerald-500/50 p-6 mb-6 shadow-xl shadow-emerald-500/20">
                <div className="text-center mb-6">
                  <h2 className="text-2xl font-bold text-white mb-2">{pendingSignal.pair}</h2>
                  <div className="flex items-center justify-center gap-2 mb-4">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                      pendingSignal.type === 'BUY' ? 'bg-emerald-500/20' : 'bg-rose-500/20'
                    }`}>
                      {pendingSignal.type === 'BUY' ? (
                        <TrendingUp className="w-4 h-4 text-emerald-400" />
                      ) : (
                        <TrendingDown className="w-4 h-4 text-rose-400" />
                      )}
                    </div>
                    <Badge className={`${
                      pendingSignal.type === 'BUY' 
                        ? 'bg-emerald-500/20 text-emerald-400 border-emerald-500/50' 
                        : 'bg-rose-500/20 text-rose-400 border-rose-500/50'
                    }`}>
                      {pendingSignal.type}
                    </Badge>
                  </div>
                </div>
              </Card>

              {/* –¢–∞–π–º–µ—Ä */}
              <Card className="glass-effect backdrop-blur-sm border-amber-500/50 p-6 mb-6 shadow-xl shadow-amber-500/20">
                <div className="text-center">
                  <div className="flex items-center justify-center gap-3 mb-4">
                    <Clock className="w-6 h-6 text-amber-400" />
                    <span className="text-3xl font-bold text-white">
                      {Math.floor(signalTimer / 60)}:{(signalTimer % 60).toString().padStart(2, '0')}
                    </span>
                  </div>
                  <p className="text-slate-400 mb-4">–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏</p>
                  <div className="w-full bg-slate-700 rounded-full h-3">
                    <div 
                      className="bg-gradient-to-r from-orange-500 to-red-500 h-3 rounded-full transition-all duration-1000"
                      style={{ width: `${((pendingSignal.expiration * 60 - signalTimer) / (pendingSignal.expiration * 60)) * 100}%` }}
                    ></div>
                  </div>
                </div>
              </Card>

              {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ */}
              <Card className="glass-effect backdrop-blur-sm border-red-500/50 p-6 mb-6 shadow-xl shadow-red-500/20">
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-8 h-8 rounded-full bg-red-500/20 flex items-center justify-center">
                    <Shield className="w-4 h-4 text-red-400" />
                  </div>
                  <span className="text-blue-400 font-semibold">–ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞</span>
                </div>
                <p className="text-slate-400">
                  –î–æ–∂–¥–∏—Ç–µ—Å—å —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–∏–¥–±–µ–∫
                </p>
              </Card>

              {/* –ö–Ω–æ–ø–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ */}
              {isWaitingFeedback && (
                <Card className="glass-effect backdrop-blur-sm border-cyan-500/50 p-6 shadow-xl shadow-cyan-500/20">
                  <div className="text-center">
                    <p className="text-white mb-4 text-lg">–ö–∞–∫ –ø—Ä–æ—à–ª–∞ —Å–¥–µ–ª–∫–∞?</p>
                    <div className="flex gap-4 justify-center">
                      <Button 
                        onClick={() => submitFeedback(true)}
                        className="bg-emerald-500 hover:bg-emerald-600 text-white px-8 py-3"
                      >
                        ‚úÖ –£—Å–ø–µ—à–Ω–æ
                      </Button>
                      <Button 
                        onClick={() => submitFeedback(false)}
                        className="bg-rose-500 hover:bg-rose-600 text-white px-8 py-3"
                      >
                        ‚ùå –£–±—ã—Ç–æ–∫
                      </Button>
                    </div>
                  </div>
                </Card>
              )}
            </>
          )}
        </div>
      </div>
    )
  }

  // Notifications Settings Screen
  if (currentScreen === 'notifications') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950">
        {/* Header */}
        <header className="sticky top-0 z-50 backdrop-blur-xl bg-slate-950/80 border-b border-slate-800/50 shadow-xl">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-amber-400 to-amber-600 flex items-center justify-center shadow-lg shadow-amber-500/30 icon-3d">
                  <Bell className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-white">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h1>
                  <Badge className="bg-amber-500/20 text-amber-400 border-amber-500/50 text-xs">
                    NOTIFICATIONS
                  </Badge>
                </div>
              </div>
              <Button 
                onClick={() => setCurrentScreen('settings')}
                variant="ghost" 
                size="icon" 
                className="text-slate-400 hover:text-white hover:bg-slate-800/50"
              >
                <ChevronRight className="w-5 h-5 rotate-180" />
              </Button>
            </div>
          </div>
        </header>

        {/* Notification Settings */}
        <div className="container mx-auto px-4 py-6 max-w-2xl">
          <div className="space-y-6">
            {/* Signal Notifications */}
            <Card className="glass-effect border-slate-700/50 p-6 card-3d shadow-2xl">
              <h3 className="text-lg font-bold text-white mb-4 flex items-center gap-2">
                <Sparkles className="w-5 h-5 text-emerald-400" />
                –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
              </h3>
              
              <div className="space-y-4">
                <div className="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
                  <div className="flex items-center gap-3">
                    <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                      notificationSettings.newSignals ? 'bg-emerald-500/20' : 'bg-slate-700/50'
                    }`}>
                      <Bell className={`w-5 h-5 ${notificationSettings.newSignals ? 'text-emerald-400' : 'text-slate-500'}`} />
                    </div>
                    <div>
                      <h4 className="text-white font-semibold">–ù–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã</h4>
                      <p className="text-slate-400 text-sm">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö</p>
                    </div>
                  </div>
                  <Button
                    onClick={() => toggleNotification('newSignals')}
                    variant={notificationSettings.newSignals ? 'default' : 'outline'}
                    size="sm"
                    className={notificationSettings.newSignals 
                      ? 'bg-emerald-500 hover:bg-emerald-600' 
                      : 'border-slate-600 text-slate-400'
                    }
                  >
                    {notificationSettings.newSignals ? '–í–ö–õ' : '–í–´–ö–õ'}
                  </Button>
                </div>

                <div className="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
                  <div className="flex items-center gap-3">
                    <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                      notificationSettings.signalResults ? 'bg-cyan-500/20' : 'bg-slate-700/50'
                    }`}>
                      <CheckCircle2 className={`w-5 h-5 ${notificationSettings.signalResults ? 'text-cyan-400' : 'text-slate-500'}`} />
                    </div>
                    <div>
                      <h4 className="text-white font-semibold">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤</h4>
                      <p className="text-slate-400 text-sm">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–æ–∫</p>
                    </div>
                  </div>
                  <Button
                    onClick={() => toggleNotification('signalResults')}
                    variant={notificationSettings.signalResults ? 'default' : 'outline'}
                    size="sm"
                    className={notificationSettings.signalResults 
                      ? 'bg-cyan-500 hover:bg-cyan-600' 
                      : 'border-slate-600 text-slate-400'
                    }
                  >
                    {notificationSettings.signalResults ? '–í–ö–õ' : '–í–´–ö–õ'}
                  </Button>
                </div>

                <div className="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
                  <div className="flex items-center gap-3">
                    <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                      notificationSettings.dailySummary ? 'bg-purple-500/20' : 'bg-slate-700/50'
                    }`}>
                      <BarChart3 className={`w-5 h-5 ${notificationSettings.dailySummary ? 'text-purple-400' : 'text-slate-500'}`} />
                    </div>
                    <div>
                      <h4 className="text-white font-semibold">–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞</h4>
                      <p className="text-slate-400 text-sm">–ò—Ç–æ–≥–∏ –¥–Ω—è –≤ 21:00</p>
                    </div>
                  </div>
                  <Button
                    onClick={() => toggleNotification('dailySummary')}
                    variant={notificationSettings.dailySummary ? 'default' : 'outline'}
                    size="sm"
                    className={notificationSettings.dailySummary 
                      ? 'bg-purple-500 hover:bg-purple-600' 
                      : 'border-slate-600 text-slate-400'
                    }
                  >
                    {notificationSettings.dailySummary ? '–í–ö–õ' : '–í–´–ö–õ'}
                  </Button>
                </div>
              </div>
            </Card>

            {/* System Notifications */}
            <Card className="glass-effect border-slate-700/50 p-6 card-3d shadow-2xl">
              <h3 className="text-lg font-bold text-white mb-4 flex items-center gap-2">
                <Newspaper className="w-5 h-5 text-amber-400" />
                –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </h3>
              
              <div className="space-y-4">
                <div className="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
                  <div className="flex items-center gap-3">
                    <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                      notificationSettings.marketNews ? 'bg-blue-500/20' : 'bg-slate-700/50'
                    }`}>
                      <Newspaper className={`w-5 h-5 ${notificationSettings.marketNews ? 'text-blue-400' : 'text-slate-500'}`} />
                    </div>
                    <div>
                      <h4 className="text-white font-semibold">–ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞</h4>
                      <p className="text-slate-400 text-sm">–í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ</p>
                    </div>
                  </div>
                  <Button
                    onClick={() => toggleNotification('marketNews')}
                    variant={notificationSettings.marketNews ? 'default' : 'outline'}
                    size="sm"
                    className={notificationSettings.marketNews 
                      ? 'bg-blue-500 hover:bg-blue-600' 
                      : 'border-slate-600 text-slate-400'
                    }
                  >
                    {notificationSettings.marketNews ? '–í–ö–õ' : '–í–´–ö–õ'}
                  </Button>
                </div>

                <div className="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
                  <div className="flex items-center gap-3">
                    <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                      notificationSettings.systemUpdates ? 'bg-green-500/20' : 'bg-slate-700/50'
                    }`}>
                      <Settings className={`w-5 h-5 ${notificationSettings.systemUpdates ? 'text-green-400' : 'text-slate-500'}`} />
                    </div>
                    <div>
                      <h4 className="text-white font-semibold">–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã</h4>
                      <p className="text-slate-400 text-sm">–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è</p>
                    </div>
                  </div>
                  <Button
                    onClick={() => toggleNotification('systemUpdates')}
                    variant={notificationSettings.systemUpdates ? 'default' : 'outline'}
                    size="sm"
                    className={notificationSettings.systemUpdates 
                      ? 'bg-green-500 hover:bg-green-600' 
                      : 'border-slate-600 text-slate-400'
                    }
                  >
                    {notificationSettings.systemUpdates ? '–í–ö–õ' : '–í–´–ö–õ'}
                  </Button>
                </div>
              </div>
            </Card>

            {/* Sound & Vibration */}
            <Card className="glass-effect border-slate-700/50 p-6 card-3d shadow-2xl">
              <h3 className="text-lg font-bold text-white mb-4 flex items-center gap-2">
                <Volume2 className="w-5 h-5 text-purple-400" />
                –ó–≤—É–∫ –∏ –≤–∏–±—Ä–∞—Ü–∏—è
              </h3>
              
              <div className="space-y-4">
                <div className="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
                  <div className="flex items-center gap-3">
                    <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                      notificationSettings.soundEnabled ? 'bg-purple-500/20' : 'bg-slate-700/50'
                    }`}>
                      {notificationSettings.soundEnabled ? (
                        <Volume2 className="w-5 h-5 text-purple-400" />
                      ) : (
                        <VolumeX className="w-5 h-5 text-slate-500" />
                      )}
                    </div>
                    <div>
                      <h4 className="text-white font-semibold">–ó–≤—É–∫</h4>
                      <p className="text-slate-400 text-sm">–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
                    </div>
                  </div>
                  <Button
                    onClick={() => toggleNotification('soundEnabled')}
                    variant={notificationSettings.soundEnabled ? 'default' : 'outline'}
                    size="sm"
                    className={notificationSettings.soundEnabled 
                      ? 'bg-purple-500 hover:bg-purple-600' 
                      : 'border-slate-600 text-slate-400'
                    }
                  >
                    {notificationSettings.soundEnabled ? '–í–ö–õ' : '–í–´–ö–õ'}
                  </Button>
                </div>

                <div className="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
                  <div className="flex items-center gap-3">
                    <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                      notificationSettings.vibrationEnabled ? 'bg-pink-500/20' : 'bg-slate-700/50'
                    }`}>
                      <Vibrate className={`w-5 h-5 ${notificationSettings.vibrationEnabled ? 'text-pink-400' : 'text-slate-500'}`} />
                    </div>
                    <div>
                      <h4 className="text-white font-semibold">–í–∏–±—Ä–∞—Ü–∏—è</h4>
                      <p className="text-slate-400 text-sm">–í–∏–±—Ä–æ-—Å–∏–≥–Ω–∞–ª –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö</p>
                    </div>
                  </div>
                  <Button
                    onClick={() => toggleNotification('vibrationEnabled')}
                    variant={notificationSettings.vibrationEnabled ? 'default' : 'outline'}
                    size="sm"
                    className={notificationSettings.vibrationEnabled 
                      ? 'bg-pink-500 hover:bg-pink-600' 
                      : 'border-slate-600 text-slate-400'
                    }
                  >
                    {notificationSettings.vibrationEnabled ? '–í–ö–õ' : '–í–´–ö–õ'}
                  </Button>
                </div>

                <div className="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
                  <div className="flex items-center gap-3">
                    <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                      notificationSettings.emailNotifications ? 'bg-indigo-500/20' : 'bg-slate-700/50'
                    }`}>
                      <Mail className={`w-5 h-5 ${notificationSettings.emailNotifications ? 'text-indigo-400' : 'text-slate-500'}`} />
                    </div>
                    <div>
                      <h4 className="text-white font-semibold">Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                      <p className="text-slate-400 text-sm">–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É</p>
                    </div>
                  </div>
                  <Button
                    onClick={() => toggleNotification('emailNotifications')}
                    variant={notificationSettings.emailNotifications ? 'default' : 'outline'}
                    size="sm"
                    className={notificationSettings.emailNotifications 
                      ? 'bg-indigo-500 hover:bg-indigo-600' 
                      : 'border-slate-600 text-slate-400'
                    }
                  >
                    {notificationSettings.emailNotifications ? '–í–ö–õ' : '–í–´–ö–õ'}
                  </Button>
                </div>
              </div>
            </Card>

            {/* Info Card */}
            <Card className="glass-effect border-cyan-500/30 p-6 card-3d shadow-2xl">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-lg bg-cyan-500/20 flex items-center justify-center icon-3d shadow-lg shadow-cyan-500/20">
                  <Bell className="w-5 h-5 text-cyan-400" />
                </div>
                <div>
                  <h3 className="text-lg font-bold text-white mb-1">–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                  <p className="text-slate-400 text-sm">
                    –ü–æ–ª—É—á–∞–π—Ç–µ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–∂–¥—ã–π —Ç–∏–ø –æ—Ç–¥–µ–ª—å–Ω–æ.
                  </p>
                </div>
              </div>
            </Card>
          </div>
        </div>
      </div>
    )
  }

  // Market Selection Screen
  if (currentScreen === 'market-select') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 flex items-center justify-center p-4 overflow-hidden relative">
        {/* Animated background */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-emerald-500/5 rounded-full blur-3xl animate-glow-pulse"></div>
          <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-cyan-500/5 rounded-full blur-3xl animate-glow-pulse" style={{animationDelay: '1.5s'}}></div>
        </div>

        <div className="max-w-md w-full space-y-8 animate-fade-in relative z-10 perspective-container">
          {/* Header */}
          <div className="text-center space-y-2">
            <h2 className="text-3xl font-bold text-white">{t('selectMarket')}</h2>
            <p className="text-slate-400">{t('whatSignals')}</p>
          </div>

          {/* Market Options */}
          <div className="space-y-4">
            <Card 
              onClick={() => {
                setSelectedMarket('forex')
                setCurrentScreen('mode-select')
              }}
              className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-emerald-500/50 transition-all duration-300 group card-3d border-slate-700/50 shadow-xl"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-emerald-500/20 to-emerald-600/10 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 icon-3d shadow-xl shadow-emerald-500/20">
                    <TrendingUp className="w-8 h-8 text-emerald-400" />
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-white mb-1">Forex</h3>
                    <p className="text-slate-400 text-sm">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ Forex —Ä—ã–Ω–∫–∞</p>
                    <div className="flex gap-2 mt-2">
                      <Badge variant="outline" className="border-emerald-500/50 text-emerald-400 text-xs">
                        EUR/USD
                      </Badge>
                      <Badge variant="outline" className="border-emerald-500/50 text-emerald-400 text-xs">
                        GBP/JPY
                      </Badge>
                    </div>
                  </div>
                </div>
                <ChevronRight className="w-6 h-6 text-slate-600 group-hover:text-emerald-400 group-hover:translate-x-1 transition-all duration-300" />
              </div>
            </Card>

            <Card 
              onClick={() => {
                setSelectedMarket('otc')
                setCurrentScreen('mode-select')
              }}
              className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-cyan-500/50 transition-all duration-300 group card-3d border-slate-700/50 shadow-xl"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-cyan-500/20 to-cyan-600/10 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 icon-3d shadow-xl shadow-cyan-500/20">
                    <BarChart3 className="w-8 h-8 text-cyan-400" />
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-white mb-1">OTC</h3>
                    <p className="text-slate-400 text-sm">24/7</p>
                  </div>
                </div>
                <ChevronRight className="w-6 h-6 text-slate-600 group-hover:text-cyan-400 group-hover:translate-x-1 transition-all duration-300" />
              </div>
            </Card>
          </div>

          {/* Back Button */}
          <Button 
            onClick={() => setCurrentScreen('menu')}
            variant="ghost"
            className="w-full text-slate-400 hover:text-white hover:bg-slate-800/50"
          >
            {t('back')}
          </Button>
        </div>
      </div>
    )
  }

  // Mode Selection Screen
  if (currentScreen === 'mode-select') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 flex items-center justify-center p-4 overflow-hidden relative">
        {/* Animated background */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute top-1/3 left-1/3 w-96 h-96 bg-amber-500/5 rounded-full blur-3xl animate-glow-pulse"></div>
          <div className="absolute bottom-1/3 right-1/3 w-96 h-96 bg-purple-500/5 rounded-full blur-3xl animate-glow-pulse" style={{animationDelay: '1s'}}></div>
        </div>

        <div className="max-w-md w-full space-y-8 animate-fade-in relative z-10 perspective-container">
          {/* Header */}
          <div className="text-center space-y-2">
            <h2 className="text-3xl font-bold text-white">–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h2>
            <p className="text-slate-400">–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã?</p>
          </div>

          {/* Mode Options */}
          <div className="space-y-4">
            <Card 
              onClick={() => {
                setSelectedMode('top3')
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                clearSignalState()
                generateTop3Signals()
              }}
              className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-amber-500/50 transition-all duration-300 group card-3d border-slate-700/50 shadow-xl"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-amber-500/20 to-amber-600/10 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 icon-3d shadow-xl shadow-amber-500/20">
                    <Crown className="w-8 h-8 text-amber-400" />
                  </div>
                  <div>
                    <div className="flex items-center gap-2 mb-1">
                      <h3 className="text-xl font-bold text-white">–¢–û–ü-3 —Å–∏–≥–Ω–∞–ª–∞</h3>
                      <Badge className="bg-amber-500/20 text-amber-400 border-amber-500/50">
                        –ü–æ–ø—É–ª—è—Ä–Ω–æ
                      </Badge>
                    </div>
                    <p className="text-slate-400 text-sm mb-3">–õ—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–Ω—è</p>
                    <div className="space-y-1">
                      <div className="flex items-center gap-2 text-xs text-slate-400">
                        <CheckCircle2 className="w-4 h-4 text-emerald-400" />
                        <span>3 –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</span>
                      </div>
                      <div className="flex items-center gap-2 text-xs text-slate-400">
                        <CheckCircle2 className="w-4 h-4 text-emerald-400" />
                        <span>–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞</span>
                      </div>
                      <div className="flex items-center gap-2 text-xs text-slate-400">
                        <CheckCircle2 className="w-4 h-4 text-emerald-400" />
                        <span>–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤</span>
                      </div>
                    </div>
                  </div>
                </div>
                <ChevronRight className="w-6 h-6 text-slate-600 group-hover:text-amber-400 group-hover:translate-x-1 transition-all duration-300" />
              </div>
            </Card>

            <Card 
              onClick={() => {
                setSelectedMode('single')
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                clearSignalState()
                setCurrentScreen('signal-selection')
              }}
              className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-purple-500/50 transition-all duration-300 group card-3d border-slate-700/50 shadow-xl"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-purple-500/20 to-purple-600/10 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 icon-3d shadow-xl shadow-purple-500/20">
                    <Zap className="w-8 h-8 text-purple-400" />
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-white mb-1">–û–¥–∏–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã</h3>
                    <p className="text-slate-400 text-sm mb-3">–ü–æ –æ–¥–Ω–æ–º—É —Å–∏–≥–Ω–∞–ª—É –∑–∞ —Ä–∞–∑</p>
                    <div className="space-y-1">
                      <div className="flex items-center gap-2 text-xs text-slate-400">
                        <CheckCircle2 className="w-4 h-4 text-emerald-400" />
                        <span>–§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ</span>
                      </div>
                      <div className="flex items-center gap-2 text-xs text-slate-400">
                        <CheckCircle2 className="w-4 h-4 text-emerald-400" />
                        <span>–ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</span>
                      </div>
                      <div className="flex items-center gap-2 text-xs text-slate-400">
                        <CheckCircle2 className="w-4 h-4 text-emerald-400" />
                        <span>–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö</span>
                      </div>
                    </div>
                  </div>
                </div>
                <ChevronRight className="w-6 h-6 text-slate-600 group-hover:text-purple-400 group-hover:translate-x-1 transition-all duration-300" />
              </div>
            </Card>
          </div>

          {/* Back Button */}
          <Button 
            onClick={() => setCurrentScreen('market-select')}
            variant="ghost"
            className="w-full text-slate-400 hover:text-white hover:bg-slate-800/50"
          >
            {t('back')}
          </Button>
        </div>
      </div>
    )
  }

  // Settings Screen
  if (currentScreen === 'settings') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 flex items-center justify-center p-4 overflow-hidden relative">
        {/* Animated background */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-emerald-500/5 rounded-full blur-3xl animate-glow-pulse"></div>
          <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-cyan-500/5 rounded-full blur-3xl animate-glow-pulse" style={{animationDelay: '1.5s'}}></div>
        </div>

        <div className="max-w-md w-full space-y-8 animate-fade-in relative z-10 perspective-container">
          {/* Header */}
          <div className="text-center space-y-2">
            <h2 className="text-3xl font-bold text-white">{t('settings')}</h2>
            <p className="text-slate-400">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
          </div>

          {/* Settings Options */}
          <div className="space-y-4">
            <Card 
              onClick={() => setCurrentScreen('ml-selector')}
              className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-purple-500/50 transition-all duration-300 group card-3d border-slate-700/50 shadow-xl"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-purple-500/20 to-purple-600/10 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 icon-3d shadow-xl shadow-purple-500/20">
                    <Brain className="w-6 h-6 text-purple-400" />
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-white">ML –ú–æ–¥–µ–ª—å</h3>
                    <p className="text-slate-400 text-sm">
                      {mlModels.find(m => m.id === selectedMLModel)?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}
                    </p>
                  </div>
                </div>
                <ChevronRight className="w-5 h-5 text-slate-600 group-hover:text-purple-400 group-hover:translate-x-1 transition-all duration-300" />
              </div>
            </Card>

            <Card 
              onClick={() => setCurrentScreen('user-stats')}
              className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-cyan-500/50 transition-all duration-300 group card-3d border-slate-700/50 shadow-xl"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-cyan-500/20 to-cyan-600/10 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 icon-3d shadow-xl shadow-cyan-500/20">
                    <BarChart3 className="w-6 h-6 text-cyan-400" />
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-white">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <p className="text-slate-400 text-sm">–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</p>
                  </div>
                </div>
                <ChevronRight className="w-5 h-5 text-slate-600 group-hover:text-cyan-400 group-hover:translate-x-1 transition-all duration-300" />
              </div>
            </Card>

            <Card 
              onClick={() => setCurrentScreen('notifications')}
              className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-amber-500/50 transition-all duration-300 group card-3d border-slate-700/50 shadow-xl"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-amber-500/20 to-amber-600/10 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 icon-3d shadow-xl shadow-amber-500/20">
                    <Bell className="w-6 h-6 text-amber-400" />
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-white">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                    <p className="text-slate-400 text-sm">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
                  </div>
                </div>
                <ChevronRight className="w-5 h-5 text-slate-600 group-hover:text-amber-400 group-hover:translate-x-1 transition-all duration-300" />
              </div>
            </Card>

            {/* Admin Panel - Only visible for admins */}
            {isAdmin && (
              <Card 
                onClick={() => setCurrentScreen('admin')}
                className="glass-effect p-6 backdrop-blur-sm cursor-pointer hover:border-red-500/50 transition-all duration-300 group card-3d border-red-500/30 shadow-xl"
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-red-500/20 to-red-600/10 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 icon-3d shadow-xl shadow-red-500/20">
                      <Shield className="w-6 h-6 text-red-400" />
                    </div>
                    <div>
                      <div className="flex items-center gap-2 mb-1">
                        <h3 className="text-lg font-bold text-white">{t('admin')}</h3>
                        <Badge className="bg-red-500/20 text-red-400 border-red-500/50">
                          ADMIN
                        </Badge>
                      </div>
                      <p className="text-slate-400 text-sm">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                    </div>
                  </div>
                  <ChevronRight className="w-5 h-5 text-slate-600 group-hover:text-red-400 group-hover:translate-x-1 transition-all duration-300" />
                </div>
              </Card>
            )}
          </div>

          {/* Back Button */}
          <Button 
            onClick={() => setCurrentScreen('menu')}
            variant="ghost"
            className="w-full text-slate-400 hover:text-white hover:bg-slate-800/50"
          >
            {t('back')}
          </Button>
        </div>
      </div>
    )
  }

  // ML Model Selector Screen
  if (currentScreen === 'ml-selector') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950">
        {/* Header */}
        <header className="sticky top-0 z-50 backdrop-blur-xl bg-slate-950/80 border-b border-slate-800/50 shadow-xl">
          <div className="container mx-auto px-3 py-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-purple-400 to-purple-600 flex items-center justify-center shadow-lg shadow-purple-500/30 icon-3d">
                  <Brain className="w-4 h-4 text-white" />
                </div>
                <div>
                  <h1 className="text-lg font-bold text-white">–í—ã–±–æ—Ä ML –º–æ–¥–µ–ª–∏</h1>
                  <Badge className="bg-purple-500/20 text-purple-400 border-purple-500/50 text-xs">
                    SELECT MODEL
                  </Badge>
                </div>
              </div>
              <Button 
                onClick={() => setCurrentScreen('settings')}
                variant="ghost" 
                size="icon" 
                className="text-slate-400 hover:text-white hover:bg-slate-800/50 w-10 h-10"
              >
                <ChevronRight className="w-4 h-4 rotate-180" />
              </Button>
            </div>
          </div>
        </header>

        {/* ML Models List */}
        <div className="container mx-auto px-3 py-4">
          <div className="space-y-3">
            {mlModels.map((model) => {
              const isOwned = userSubscriptions.includes(model.id)
              const isActive = selectedMLModel === model.id
              const isRestricted = model.status === 'restricted'
              
              return (
                <Card 
                  key={model.id}
                  onClick={() => {
                    if (isOwned && !isRestricted) {
                      setSelectedMLModel(model.id)
                    } else if (isRestricted) {
                      alert('–≠—Ç–∞ –º–æ–¥–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ')
                    } else {
                      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–º–∏—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                      setCurrentScreen('premium')
                    }
                  }}
                  className={`glass-effect p-4 backdrop-blur-sm transition-all duration-300 card-3d border-slate-700/50 shadow-xl cursor-pointer ${
                    isActive 
                      ? 'border-emerald-500/70 bg-emerald-500/10' 
                      : isOwned
                      ? 'hover:border-purple-500/50 hover:scale-102'
                      : isRestricted
                      ? 'border-red-500/30 bg-red-500/5 opacity-60 cursor-not-allowed'
                      : 'hover:border-yellow-500/50 hover:scale-102'
                  }`}
                >
                  <div className="flex flex-col gap-3">
                    {/* Top row: Icon and title */}
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className={`w-12 h-12 rounded-lg bg-gradient-to-br ${model.color} flex items-center justify-center icon-3d shadow-xl`}>
                          <span className="text-2xl">{model.emoji}</span>
                        </div>
                        <div className="flex-1">
                          <h3 className="text-lg font-bold text-white">{model.name}</h3>
                          <p className="text-slate-300 text-sm">{model.algorithm}</p>
                        </div>
                      </div>
                      <div className="flex flex-col items-end gap-1">
                        {isActive && (
                          <Badge className="bg-emerald-500/20 text-emerald-400 border-emerald-500/50 text-xs">
                            ‚úì –ê–ö–¢–ò–í–ù–ê
                          </Badge>
                        )}
                        {isRestricted && (
                          <Badge className="bg-red-500/20 text-red-400 border-red-500/50 text-xs">
                            <Lock className="w-3 h-3 mr-1" />
                            –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê
                          </Badge>
                        )}
                        {!isOwned && !isRestricted && (
                          <Badge className="bg-yellow-500/20 text-yellow-400 border-yellow-500/50 text-xs">
                            <Lock className="w-3 h-3 mr-1" />
                            –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–î–ü–ò–°–ö–ê
                          </Badge>
                        )}
                      </div>
                    </div>
                    
                    {/* Stats row */}
                    <div className="flex items-center gap-4 text-sm">
                      <div className="flex items-center gap-1">
                        <Target className="w-4 h-4 text-emerald-400" />
                        <span className="text-emerald-400 font-semibold">{model.winrate}</span>
                      </div>
                      <span className="text-slate-600">‚Ä¢</span>
                      <span className="text-slate-400">{model.style}</span>
                    </div>
                    
                    {/* Description */}
                    <p className="text-slate-400 text-sm italic">üí¨ {model.description}</p>
                    
                    {model.warning && (
                      <p className="text-red-400 text-sm font-semibold">‚ö†Ô∏è {model.warning}</p>
                    )}
                    
                    {/* Bottom row: Pricing and button */}
                    <div className="flex items-center justify-between">
                      {!isOwned && !isRestricted && (
                        <div className="flex items-center gap-2 text-sm">
                          <span className="text-yellow-400 font-bold">{model.monthlyPrice}/–º–µ—Å</span>
                          <span className="text-slate-600">–∏–ª–∏</span>
                          <span className="text-green-400 font-bold">{model.lifetimePrice} –Ω–∞–≤—Å–µ–≥–¥–∞</span>
                        </div>
                      )}
                      <div className="flex items-center">
                        {isActive ? (
                          <div className="w-10 h-10 rounded-full bg-emerald-500/20 flex items-center justify-center">
                            <CheckCircle2 className="w-5 h-5 text-emerald-400" />
                          </div>
                        ) : isOwned && !isRestricted ? (
                          <Button
                            variant="outline"
                            size="sm"
                            className="border-purple-500/50 text-purple-400 hover:bg-purple-500/10 h-8 px-3"
                          >
                            –í—ã–±—Ä–∞—Ç—å
                          </Button>
                        ) : isRestricted ? (
                          <Lock className="w-5 h-5 text-red-400" />
                        ) : (
                          <Button
                            variant="outline"
                            size="sm"
                            className="border-yellow-500/50 text-yellow-400 hover:bg-yellow-500/10 h-8 px-3"
                          >
                            –ö—É–ø–∏—Ç—å
                          </Button>
                        )}
                      </div>
                    </div>
                  </div>
                </Card>
              )
            })}
          </div>

          {/* Info */}
          <Card className="glass-effect border-cyan-500/30 p-4 mt-4 card-3d shadow-2xl">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 rounded-lg bg-cyan-500/20 flex items-center justify-center icon-3d shadow-lg shadow-cyan-500/20">
                <Brain className="w-4 h-4 text-cyan-400" />
              </div>
              <div>
                <h3 className="text-base font-bold text-white mb-1">–û ML –º–æ–¥–µ–ª—è—Ö</h3>
                <p className="text-slate-400 text-sm">
                  –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –∫—É–ø–ª–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è. –ö–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏ –≤–∏–Ω—Ä–µ–π—Ç.
                </p>
              </div>
            </div>
          </Card>
        </div>
      </div>
    )
  }

  // User Statistics Screen
  if (currentScreen === 'user-stats') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950">
        {/* Header */}
        <header className="sticky top-0 z-50 backdrop-blur-xl bg-slate-950/80 border-b border-slate-800/50 shadow-xl">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-cyan-400 to-cyan-600 flex items-center justify-center shadow-lg shadow-cyan-500/30 icon-3d">
                  <BarChart3 className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-white">–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h1>
                  <Badge className="bg-cyan-500/20 text-cyan-400 border-cyan-500/50 text-xs">
                    PERSONAL STATS
                  </Badge>
                </div>
              </div>
              <Button 
                onClick={() => setCurrentScreen('settings')}
                variant="ghost" 
                size="icon" 
                className="text-slate-400 hover:text-white hover:bg-slate-800/50"
              >
                <ChevronRight className="w-5 h-5 rotate-180" />
              </Button>
            </div>
          </div>
        </header>

        {/* User Stats Content */}
        <div className="container mx-auto px-4 py-6">
          {/* Main Stats Grid */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3 perspective-container mb-8">
            <Card className="glass-effect border-emerald-500/20 p-4 card-3d shadow-xl shadow-emerald-500/10">
              <div className="flex flex-col">
                <span className="text-emerald-400 text-xs font-medium mb-1">–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤</span>
                <span className="text-2xl font-bold text-white">{userStats.totalSignals}</span>
              </div>
            </Card>
            <Card className="glass-effect border-green-500/20 p-4 card-3d shadow-xl shadow-green-500/10">
              <div className="flex flex-col">
                <span className="text-green-400 text-xs font-medium mb-1">–£—Å–ø–µ—à–Ω—ã—Ö</span>
                <span className="text-2xl font-bold text-white">{userStats.successfulSignals}</span>
              </div>
            </Card>
            <Card className="glass-effect border-rose-500/20 p-4 card-3d shadow-xl shadow-rose-500/10">
              <div className="flex flex-col">
                <span className="text-rose-400 text-xs font-medium mb-1">–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö</span>
                <span className="text-2xl font-bold text-white">{userStats.failedSignals}</span>
              </div>
            </Card>
            <Card className="glass-effect border-cyan-500/20 p-4 card-3d shadow-xl shadow-cyan-500/10">
              <div className="flex flex-col">
                <span className="text-cyan-400 text-xs font-medium mb-1">Win Rate</span>
                <span className="text-2xl font-bold text-white">{userStats.winRate}%</span>
              </div>
            </Card>
          </div>

          {/* Detailed Stats */}
          <Card className="glass-effect border-slate-700/50 p-6 card-3d shadow-2xl mb-8">
            <div className="flex items-center gap-3 mb-6">
              <div className="w-10 h-10 rounded-lg bg-purple-500/20 flex items-center justify-center icon-3d shadow-lg shadow-purple-500/20">
                <Activity className="w-5 h-5 text-purple-400" />
              </div>
              <h3 className="text-lg font-bold text-white">–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 text-center">
                <span className="text-slate-400 text-xs block mb-2">–î–Ω–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏</span>
                <span className="text-purple-400 font-bold text-xl">{userStats.tradingDays}</span>
              </div>
              <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 text-center">
                <span className="text-slate-400 text-xs block mb-2">–°–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å</span>
                <span className="text-cyan-400 font-bold text-xl">{userStats.avgSignalsPerDay}</span>
              </div>
              <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 text-center">
                <span className="text-slate-400 text-xs block mb-2">–õ—É—á—à–∞—è –ø–∞—Ä–∞</span>
                <span className="text-emerald-400 font-bold text-xl">{userStats.bestPair}</span>
              </div>
              <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 text-center">
                <span className="text-slate-400 text-xs block mb-2">–•—É–¥—à–∞—è –ø–∞—Ä–∞</span>
                <span className="text-rose-400 font-bold text-xl">{userStats.worstPair}</span>
              </div>
            </div>
          </Card>

          {/* Signals Chart */}
          <Card className="glass-effect border-slate-700/50 p-6 card-3d shadow-2xl">
            <div className="flex items-center gap-3 mb-6">
              <div className="w-10 h-10 rounded-lg bg-amber-500/20 flex items-center justify-center icon-3d shadow-lg shadow-amber-500/20">
                <BarChart3 className="w-5 h-5 text-amber-400" />
              </div>
              <h3 className="text-lg font-bold text-white">–ì—Ä–∞—Ñ–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º</h3>
            </div>
            
            <div className="space-y-4">
              {userStats.signalsByMonth.map((item, index) => {
                const totalSignals = item.successful + item.failed
                const successPercentage = (item.successful / totalSignals) * 100
                
                return (
                  <div key={index} className="space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-slate-400 font-medium">{item.month}</span>
                      <div className="flex items-center gap-3">
                        <span className="text-emerald-400 font-bold">{item.successful} —É—Å–ø–µ—à–Ω—ã—Ö</span>
                        <span className="text-slate-600">‚Ä¢</span>
                        <span className="text-rose-400 font-bold">{item.failed} –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö</span>
                      </div>
                    </div>
                    <div className="w-full bg-slate-800/50 rounded-full h-4 overflow-hidden border border-slate-700/30 flex">
                      <div 
                        className="h-full bg-gradient-to-r from-emerald-500 to-emerald-600 transition-all duration-500 flex items-center justify-center"
                        style={{ width: `${successPercentage}%` }}
                      >
                        {successPercentage > 15 && (
                          <span className="text-white text-xs font-bold">{successPercentage.toFixed(0)}%</span>
                        )}
                      </div>
                      <div 
                        className="h-full bg-gradient-to-r from-rose-500 to-rose-600 transition-all duration-500 flex items-center justify-center"
                        style={{ width: `${100 - successPercentage}%` }}
                      >
                        {(100 - successPercentage) > 15 && (
                          <span className="text-white text-xs font-bold">{(100 - successPercentage).toFixed(0)}%</span>
                        )}
                      </div>
                    </div>
                  </div>
                )
              })}
            </div>
          </Card>
        </div>
      </div>
    )
  }

  // Admin Panel Screen
  if (currentScreen === 'admin') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950">
        {/* Header */}
        <header className="sticky top-0 z-50 backdrop-blur-xl bg-slate-950/80 border-b border-slate-800/50 shadow-xl">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-red-400 to-red-600 flex items-center justify-center shadow-lg shadow-red-500/30 icon-3d">
                  <Shield className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-white">{t('admin')}</h1>
                  <Badge className="bg-red-500/20 text-red-400 border-red-500/50 text-xs">
                    ADMIN ACCESS
                  </Badge>
                </div>
              </div>
              <Button 
                onClick={() => setCurrentScreen('settings')}
                variant="ghost" 
                size="icon" 
                className="text-slate-400 hover:text-white hover:bg-slate-800/50"
              >
                <ChevronRight className="w-5 h-5 rotate-180" />
              </Button>
            </div>
          </div>
        </header>

        {/* Admin Stats */}
        <div className="container mx-auto px-4 py-6">
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3 perspective-container mb-8">
            <Card className="glass-effect border-emerald-500/20 p-4 card-3d shadow-xl shadow-emerald-500/10">
              <div className="flex flex-col">
                <span className="text-emerald-400 text-xs font-medium mb-1">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</span>
                <span className="text-2xl font-bold text-white">{adminStats.totalUsers.toLocaleString()}</span>
              </div>
            </Card>
            <Card className="glass-effect border-cyan-500/20 p-4 card-3d shadow-xl shadow-cyan-500/10">
              <div className="flex flex-col">
                <span className="text-cyan-400 text-xs font-medium mb-1">–ê–∫—Ç–∏–≤–Ω—ã—Ö</span>
                <span className="text-2xl font-bold text-white">{adminStats.activeUsers.toLocaleString()}</span>
              </div>
            </Card>
            <Card className="glass-effect border-purple-500/20 p-4 card-3d shadow-xl shadow-purple-500/10">
              <div className="flex flex-col">
                <span className="text-purple-400 text-xs font-medium mb-1">–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤</span>
                <span className="text-2xl font-bold text-white">{adminStats.totalSignals.toLocaleString()}</span>
              </div>
            </Card>
            <Card className="glass-effect border-green-500/20 p-4 card-3d shadow-xl shadow-green-500/10">
              <div className="flex flex-col">
                <span className="text-green-400 text-xs font-medium mb-1">–£—Å–ø–µ—à–Ω—ã—Ö</span>
                <span className="text-2xl font-bold text-white">{adminStats.successfulSignals.toLocaleString()}</span>
              </div>
            </Card>
            <Card className="glass-effect border-rose-500/20 p-4 card-3d shadow-xl shadow-rose-500/10">
              <div className="flex flex-col">
                <span className="text-rose-400 text-xs font-medium mb-1">–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö</span>
                <span className="text-2xl font-bold text-white">{adminStats.failedSignals.toLocaleString()}</span>
              </div>
            </Card>
          </div>

          {/* Top Users */}
          <Card className="glass-effect border-slate-700/50 p-6 card-3d shadow-2xl">
            <div className="flex items-center gap-3 mb-6">
              <div className="w-10 h-10 rounded-lg bg-emerald-500/20 flex items-center justify-center icon-3d shadow-lg shadow-emerald-500/20">
                <Users className="w-5 h-5 text-emerald-400" />
              </div>
              <h3 className="text-lg font-bold text-white">–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
            </div>
            
            <div className="space-y-3">
              {adminStats.topUsers.map((user, index) => (
                <div 
                  key={user.id} 
                  className="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 hover:border-cyan-500/50 transition-all duration-300 cursor-pointer group"
                  onClick={() => {
                    setSelectedUser(user)
                    setCurrentScreen('admin-user-detail')
                  }}
                >
                  <div className="flex items-center gap-4">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
                      index === 0 ? 'bg-gradient-to-br from-yellow-400 to-yellow-600 text-yellow-900' :
                      index === 1 ? 'bg-gradient-to-br from-gray-300 to-gray-500 text-gray-900' :
                      index === 2 ? 'bg-gradient-to-br from-amber-600 to-amber-800 text-amber-100' :
                      'bg-gradient-to-br from-slate-600 to-slate-800 text-slate-200'
                    }`}>
                      {index + 1}
                    </div>
                    <div>
                      <div className="text-white font-semibold group-hover:text-cyan-400 transition-colors">{user.name}</div>
                      <div className="text-xs text-slate-400">{user.signals} —Å–∏–≥–Ω–∞–ª–æ–≤</div>
                    </div>
                  </div>
                  <div className="flex items-center gap-4">
                    <div className="text-right">
                      <div className="flex items-center gap-2 text-sm">
                        <span className="text-emerald-400 font-semibold">{user.successful}</span>
                        <span className="text-slate-500">/</span>
                        <span className="text-rose-400 font-semibold">{user.failed}</span>
                      </div>
                      <div className="text-xs text-slate-400">—É—Å–ø–µ—à–Ω—ã—Ö/–ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö</div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button
                        onClick={(e) => {
                          e.stopPropagation()
                          setSelectedUser(user)
                          setCurrentScreen('admin-user-detail')
                        }}
                        variant="ghost"
                        size="icon"
                        className="text-cyan-400 hover:text-white hover:bg-cyan-500/20 hover:scale-110 transition-all"
                      >
                        <Eye className="w-4 h-4" />
                      </Button>
                      <Button
                        onClick={(e) => {
                          e.stopPropagation()
                          deleteUser(user.id)
                        }}
                        variant="ghost"
                        size="icon"
                        className="text-rose-400 hover:text-white hover:bg-rose-500/20 hover:scale-110 transition-all"
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </Card>
        </div>
      </div>
    )
  }

  // Admin User Detail Screen
  if (currentScreen === 'admin-user-detail' && selectedUser) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950">
        {/* Header */}
        <header className="sticky top-0 z-50 backdrop-blur-xl bg-slate-950/80 border-b border-slate-800/50 shadow-xl">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-cyan-400 to-cyan-600 flex items-center justify-center shadow-lg shadow-cyan-500/30 icon-3d">
                  <UserCheck className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-white">{selectedUser.name}</h1>
                  <Badge className="bg-cyan-500/20 text-cyan-400 border-cyan-500/50 text-xs">
                    USER STATS
                  </Badge>
                </div>
              </div>
              <Button 
                onClick={() => setCurrentScreen('admin')}
                variant="ghost" 
                size="icon" 
                className="text-slate-400 hover:text-white hover:bg-slate-800/50"
              >
                <ChevronRight className="w-5 h-5 rotate-180" />
              </Button>
            </div>
          </div>
        </header>

        {/* User Stats Content */}
        <div className="container mx-auto px-4 py-6">
          {/* Main Stats Grid */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3 perspective-container mb-8">
            <Card className="glass-effect border-emerald-500/20 p-4 card-3d shadow-xl shadow-emerald-500/10">
              <div className="flex flex-col">
                <span className="text-emerald-400 text-xs font-medium mb-1">–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤</span>
                <span className="text-2xl font-bold text-white">{selectedUser.signals}</span>
              </div>
            </Card>
            <Card className="glass-effect border-green-500/20 p-4 card-3d shadow-xl shadow-green-500/10">
              <div className="flex flex-col">
                <span className="text-green-400 text-xs font-medium mb-1">–£—Å–ø–µ—à–Ω—ã—Ö</span>
                <span className="text-2xl font-bold text-white">{selectedUser.successful}</span>
              </div>
            </Card>
            <Card className="glass-effect border-rose-500/20 p-4 card-3d shadow-xl shadow-rose-500/10">
              <div className="flex flex-col">
                <span className="text-rose-400 text-xs font-medium mb-1">–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö</span>
                <span className="text-2xl font-bold text-white">{selectedUser.failed}</span>
              </div>
            </Card>
            <Card className="glass-effect border-cyan-500/20 p-4 card-3d shadow-xl shadow-cyan-500/10">
              <div className="flex flex-col">
                <span className="text-cyan-400 text-xs font-medium mb-1">Win Rate</span>
                <span className="text-2xl font-bold text-white">{selectedUser.winRate}%</span>
              </div>
            </Card>
          </div>

          {/* Detailed Stats */}
          <Card className="glass-effect border-slate-700/50 p-6 card-3d shadow-2xl mb-8">
            <div className="flex items-center gap-3 mb-6">
              <div className="w-10 h-10 rounded-lg bg-purple-500/20 flex items-center justify-center icon-3d shadow-lg shadow-purple-500/20">
                <Activity className="w-5 h-5 text-purple-400" />
              </div>
              <h3 className="text-lg font-bold text-white">–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 text-center">
                <span className="text-slate-400 text-xs block mb-2">–î–Ω–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏</span>
                <span className="text-purple-400 font-bold text-xl">{selectedUser.tradingDays}</span>
              </div>
              <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 text-center">
                <span className="text-slate-400 text-xs block mb-2">–°–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å</span>
                <span className="text-cyan-400 font-bold text-xl">{selectedUser.avgSignalsPerDay}</span>
              </div>
              <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 text-center">
                <span className="text-slate-400 text-xs block mb-2">–õ—É—á—à–∞—è –ø–∞—Ä–∞</span>
                <span className="text-emerald-400 font-bold text-xl">{selectedUser.bestPair}</span>
              </div>
              <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 text-center">
                <span className="text-slate-400 text-xs block mb-2">–•—É–¥—à–∞—è –ø–∞—Ä–∞</span>
                <span className="text-rose-400 font-bold text-xl">{selectedUser.worstPair}</span>
              </div>
            </div>
          </Card>

          {/* Signals Chart */}
          <Card className="glass-effect border-slate-700/50 p-6 card-3d shadow-2xl">
            <div className="flex items-center gap-3 mb-6">
              <div className="w-10 h-10 rounded-lg bg-amber-500/20 flex items-center justify-center icon-3d shadow-lg shadow-amber-500/20">
                <BarChart3 className="w-5 h-5 text-amber-400" />
              </div>
              <h3 className="text-lg font-bold text-white">–ì—Ä–∞—Ñ–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º</h3>
            </div>
            
            <div className="space-y-4">
              {selectedUser.signalsByMonth.map((item, index) => {
                const totalSignals = item.successful + item.failed
                const successPercentage = (item.successful / totalSignals) * 100
                
                return (
                  <div key={index} className="space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-slate-400 font-medium">{item.month}</span>
                      <div className="flex items-center gap-3">
                        <span className="text-emerald-400 font-bold">{item.successful} —É—Å–ø–µ—à–Ω—ã—Ö</span>
                        <span className="text-slate-600">‚Ä¢</span>
                        <span className="text-rose-400 font-bold">{item.failed} –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö</span>
                      </div>
                    </div>
                    <div className="w-full bg-slate-800/50 rounded-full h-4 overflow-hidden border border-slate-700/30 flex">
                      <div 
                        className="h-full bg-gradient-to-r from-emerald-500 to-emerald-600 transition-all duration-500 flex items-center justify-center"
                        style={{ width: `${successPercentage}%` }}
                      >
                        {successPercentage > 15 && (
                          <span className="text-white text-xs font-bold">{successPercentage.toFixed(0)}%</span>
                        )}
                      </div>
                      <div 
                        className="h-full bg-gradient-to-r from-rose-500 to-rose-600 transition-all duration-500 flex items-center justify-center"
                        style={{ width: `${100 - successPercentage}%` }}
                      >
                        {(100 - successPercentage) > 15 && (
                          <span className="text-white text-xs font-bold">{(100 - successPercentage).toFixed(0)}%</span>
                        )}
                      </div>
                    </div>
                  </div>
                )
              })}
            </div>
          </Card>
        </div>
      </div>
    )
  }

  // Premium ML Models Screen
  if (currentScreen === 'premium') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950">
        {/* Header */}
        <header className="sticky top-0 z-50 backdrop-blur-xl bg-slate-950/80 border-b border-slate-800/50 shadow-xl">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-yellow-400 to-yellow-600 flex items-center justify-center shadow-lg shadow-yellow-500/30 icon-3d">
                  <Crown className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-white">–ü—Ä–µ–º–∏—É–º ML-–º–æ–¥–µ–ª–∏</h1>
                  <Badge className="bg-yellow-500/20 text-yellow-400 border-yellow-500/50 text-xs">
                    VIP ACCESS
                  </Badge>
                </div>
              </div>
              <Button 
                onClick={() => setCurrentScreen('menu')}
                variant="ghost" 
                size="icon" 
                className="text-slate-400 hover:text-white hover:bg-slate-800/50"
              >
                <ChevronRight className="w-5 h-5 rotate-180" />
              </Button>
            </div>
          </div>
        </header>

        {/* Premium Content */}
        <div className="container mx-auto px-4 py-6">
          {/* Header Section */}
          <div className="text-center mb-8">
            <div className="relative">
              <h2 className="text-4xl font-bold text-white mb-4">
                üß† –ö–ê–¢–ê–õ–û–ì –ü–†–ò–í–ê–¢–ù–´–• ML-–ú–û–î–ï–õ–ï–ô
              </h2>
              <div className="absolute -inset-4 bg-gradient-to-r from-yellow-500/10 to-amber-500/10 rounded-2xl blur-xl"></div>
            </div>
            <p className="text-slate-400 text-lg max-w-2xl mx-auto">
              üíÄ –¢–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö. –î–æ—Å—Ç—É–ø –ø–æ —Ä—É–∫–∞–º. –ö–∞–∂–¥—ã–π –≤—Ö–æ–¥ ‚Äî –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π —Ä–∏—Å–∫.
            </p>
          </div>

          {/* Active Model Status */}
          <Card className="glass-effect border-emerald-500/30 p-6 mb-8 card-3d shadow-2xl">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <div className="w-16 h-16 rounded-xl bg-gradient-to-br from-emerald-500/20 to-emerald-600/10 flex items-center justify-center icon-3d shadow-xl shadow-emerald-500/20">
                  <Brain className="w-8 h-8 text-emerald-400" />
                </div>
                <div>
                  <h3 className="text-xl font-bold text-white mb-1">
                    üéØ –ê–ö–¢–ò–í–ù–ê–Ø –ú–û–î–ï–õ–¨: {mlModels.find(m => m.status === 'active')?.emoji} {mlModels.find(m => m.status === 'active')?.name}
                  </h3>
                  <p className="text-emerald-400 text-sm">‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ</p>
                </div>
              </div>
              <Badge className="bg-emerald-500/20 text-emerald-400 border-emerald-500/50">
                –ê–ö–¢–ò–í–ù–ê
              </Badge>
            </div>
          </Card>

          {/* ML Models Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {mlModels.sort((a, b) => {
              // –°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
              if (a.status === 'active') return -1
              if (b.status === 'active') return 1
              return 0
            }).map((model, index) => (
              <Card 
                key={model.id}
                onClick={() => model.status !== 'restricted' && setSelectedMLModel(model.id)}
                className={`glass-effect p-6 backdrop-blur-sm transition-all duration-300 card-3d border-slate-700/50 shadow-xl hover:scale-105 ${
                  model.status === 'active' 
                    ? 'border-emerald-500/50 bg-emerald-500/10 cursor-default' 
                    : model.status === 'restricted'
                    ? 'border-red-500/30 bg-red-500/5 cursor-not-allowed opacity-60'
                    : selectedMLModel === model.id
                    ? 'border-yellow-500/50 bg-yellow-500/10 cursor-pointer hover:border-yellow-500/70'
                    : 'cursor-pointer hover:border-yellow-500/30'
                }`}
              >
                <div className="flex flex-col h-full">
                  {/* Header with emoji and title */}
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <div className={`w-16 h-16 rounded-xl bg-gradient-to-br ${model.color} flex items-center justify-center icon-3d shadow-xl`}>
                        <span className="text-3xl">{model.emoji}</span>
                      </div>
                      <div>
                        <h3 className="text-lg font-bold text-white mb-1">{model.name}</h3>
                        {model.status === 'active' && (
                          <Badge className="bg-emerald-500/20 text-emerald-400 border-emerald-500/50 text-xs">
                            –ê–ö–¢–ò–í–ù–ê
                          </Badge>
                        )}
                        {model.status === 'restricted' && (
                          <Badge className="bg-red-500/20 text-red-400 border-red-500/50 text-xs">
                            <Lock className="w-3 h-3 mr-1" />
                            BLOCKED
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Algorithm */}
                  <p className="text-slate-300 text-xs mb-3 line-clamp-2">{model.algorithm}</p>

                  {/* Stats */}
                  <div className="flex items-center gap-3 mb-3">
                    <div className="flex items-center gap-1">
                      <Target className="w-4 h-4 text-emerald-400" />
                      <span className="text-emerald-400 font-semibold text-sm">{model.winrate}</span>
                    </div>
                    <span className="text-slate-600">‚Ä¢</span>
                    <span className="text-slate-400 text-xs">{model.style}</span>
                  </div>

                  {/* Description */}
                  <p className="text-slate-400 text-xs mb-3 italic line-clamp-2">üí¨ {model.description}</p>

                  {/* Warning */}
                  {model.warning && (
                    <p className="text-red-400 text-xs mb-3 font-semibold">‚ö†Ô∏è {model.warning}</p>
                  )}

                  {/* Pricing */}
                  <div className="mt-auto">
                    {model.status === 'restricted' ? (
                      <Button
                        variant="outline"
                        size="sm"
                        className="w-full border-red-500/50 text-red-400 opacity-50 cursor-not-allowed"
                        disabled
                      >
                        <Lock className="w-4 h-4 mr-2" />
                        –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - {model.price}
                      </Button>
                    ) : (
                      <div className="flex items-center justify-between p-3 bg-slate-800/50 rounded-lg border border-slate-700/30">
                        <div className="flex flex-col">
                          <span className="text-xs text-slate-500">{t('monthly')}</span>
                          <span className="text-yellow-400 font-bold text-sm">{model.monthlyPrice}</span>
                        </div>
                        <div className="h-8 w-px bg-slate-700"></div>
                        <div className="flex flex-col">
                          <span className="text-xs text-slate-500">{t('lifetime')}</span>
                          <span className="text-green-400 font-bold text-sm">{model.lifetimePrice}</span>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </Card>
            ))}
          </div>
        </div>
      </div>
    )
  }

  // Main App Screen
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950">
      {/* Header */}
      <header className="sticky top-0 z-50 backdrop-blur-xl bg-slate-950/80 border-b border-slate-800/50 shadow-xl">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-emerald-400 to-cyan-500 flex items-center justify-center shadow-lg shadow-emerald-500/30 icon-3d">
                <Activity className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-white">Forex Signals Pro</h1>
                <div className="flex items-center gap-2">
                  <Badge variant="outline" className="text-xs border-emerald-500/50 text-emerald-400">
                    {selectedMarket === 'forex' ? 'Forex' : 'OTC'}
                  </Badge>
                  <Badge variant="outline" className="text-xs border-purple-500/50 text-purple-400">
                    {selectedMode === 'top3' ? '–¢–û–ü-3' : '–û–¥–∏–Ω–æ—á–Ω—ã–µ'}
                  </Badge>
                </div>
              </div>
            </div>
            <Button 
              variant="ghost" 
              size="icon" 
              className="text-slate-400 hover:text-white hover:bg-slate-800/50"
              onClick={() => {
                if (isNavigationBlocked()) {
                  alert('‚ö†Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–∏–¥–±–µ–∫ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º!')
                } else {
                  setCurrentScreen('settings')
                }
              }}
            >
              <Settings className="w-5 h-5" />
            </Button>
          </div>
        </div>
      </header>

      {/* Stats Bar */}
      <div className="container mx-auto px-4 py-6">
        <div className="grid grid-cols-2 gap-3 perspective-container">
          <Card className="glass-effect border-emerald-500/20 p-4 card-3d shadow-xl shadow-emerald-500/10">
            <div className="flex flex-col">
              <span className="text-emerald-400 text-xs font-medium mb-1">Win Rate</span>
              <span className="text-2xl font-bold text-white">87%</span>
            </div>
          </Card>
          <Card className="glass-effect border-cyan-500/20 p-4 card-3d shadow-xl shadow-cyan-500/10">
            <div className="flex flex-col">
              <span className="text-cyan-400 text-xs font-medium mb-1">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤</span>
              <span className="text-2xl font-bold text-white">{selectedMode === 'top3' ? '3' : '1'}</span>
            </div>
          </Card>
        </div>
      </div>

      {/* Main Content */}
      <div className="container mx-auto px-4 pb-6">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-2 glass-effect border-slate-800/50 p-1 shadow-lg">
            <TabsTrigger value="active" className="data-[state=active]:bg-slate-800 data-[state=active]:text-white data-[state=active]:shadow-lg">
              –ê–∫—Ç–∏–≤–Ω—ã–µ
            </TabsTrigger>
            <TabsTrigger value="history" className="data-[state=active]:bg-slate-800 data-[state=active]:text-white data-[state=active]:shadow-lg">
              –ò—Å—Ç–æ—Ä–∏—è
            </TabsTrigger>
          </TabsList>

          {/* Active Signals */}
          <TabsContent value="active" className="mt-6 space-y-4 perspective-container">
            {(selectedMode === 'top3' ? activeSignals : [activeSignals[0]]).map((signal) => (
              <Card key={signal.id} className="glass-effect backdrop-blur-sm overflow-hidden transition-all duration-300 card-3d border-slate-700/50 shadow-xl">
                <div className="p-5">
                  {/* Header */}
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <div className={`w-12 h-12 rounded-xl flex items-center justify-center icon-3d shadow-xl ${
                        signal.type === 'BUY' 
                          ? 'bg-gradient-to-br from-emerald-500/20 to-emerald-600/10 shadow-emerald-500/30' 
                          : 'bg-gradient-to-br from-rose-500/20 to-rose-600/10 shadow-rose-500/30'
                      }`}>
                        {signal.type === 'BUY' ? (
                          <TrendingUp className="w-6 h-6 text-emerald-400" />
                        ) : (
                          <TrendingDown className="w-6 h-6 text-rose-400" />
                        )}
                      </div>
                      <div>
                        <h3 className="text-lg font-bold text-white">{signal.pair}</h3>
                        <div className="flex items-center gap-2 mt-1">
                          <Badge 
                            variant="outline" 
                            className={`${
                              signal.type === 'BUY' 
                                ? 'border-emerald-500/50 text-emerald-400' 
                                : 'border-rose-500/50 text-rose-400'
                            } text-xs`}
                          >
                            {signal.type}
                          </Badge>
                          <span className="text-xs text-slate-500 flex items-center gap-1">
                            <Clock className="w-3 h-3" />
                            {signal.time}
                          </span>
                        </div>
                        
                        {/* Confidence Score Bar */}
                        <div className="mt-3">
                          <div className="flex items-center justify-between text-xs mb-1">
                            <span className="text-slate-400 flex items-center gap-1">
                              <Target className="w-3 h-3" />
                              –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                            </span>
                            <span className="text-white font-semibold">
                              {(signal.confidence * 100).toFixed(1)}%
                            </span>
                          </div>
                          <div className="w-full h-2 bg-slate-800 rounded-full overflow-hidden shadow-inner">
                            <div 
                              className="h-full transition-all duration-500 shadow-lg"
                              style={{ 
                                width: `${signal.confidence * 100}%`,
                                background: `linear-gradient(to right, 
                                  #ef4444 0%, 
                                  #f97316 20%, 
                                  #eab308 40%, 
                                  #84cc16 60%, 
                                  #22c55e 80%, 
                                  #16a34a 100%)`
                              }}
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                    <Button 
                      variant="ghost" 
                      size="icon"
                      onClick={() => copyToClipboard(signal)}
                      className="text-slate-400 hover:text-white hover:bg-slate-800/50 hover:scale-110 transition-transform"
                    >
                      <Copy className="w-4 h-4" />
                    </Button>
                  </div>


                  {/* Progress Bar */}
                  {signal.status === 'active' && (
                    <div className="space-y-2">
                      <div className="flex items-center justify-between text-xs">
                        <span className="text-slate-400">–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ TP1</span>
                        <span className="text-emerald-400 font-semibold">{signal.progress}%</span>
                      </div>
                      <div className="w-full h-2 bg-slate-800 rounded-full overflow-hidden shadow-inner">
                        <div 
                          className="h-full bg-gradient-to-r from-emerald-500 to-cyan-500 transition-all duration-500 shadow-lg shadow-emerald-500/50"
                          style={{ width: `${signal.progress}%` }}
                        />
                      </div>
                    </div>
                  )}

                  {signal.status === 'pending' && (
                    <div className="flex items-center gap-2 text-amber-400 text-sm">
                      <Clock className="w-4 h-4" />
                      <span>–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞</span>
                    </div>
                  )}

                  {/* View Details Button */}
                  <Button 
                    variant="ghost" 
                    className="w-full mt-4 text-slate-400 hover:text-white hover:bg-slate-800/50 group hover:scale-105 transition-all"
                  >
                    <span>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</span>
                    <ChevronRight className="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform" />
                  </Button>
                </div>
              </Card>
            ))}

            {/* Single Mode Generation Buttons */}
            {selectedMode === 'single' && (
              <div className="mt-6">
                <Card className="glass-effect border-cyan-500/30 p-6 card-3d shadow-2xl">
                  <h3 className="text-lg font-bold text-white mb-4 text-center">
                    üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–∞—Ä—ã
                  </h3>
                  <div className="grid grid-cols-2 gap-3">
                    {selectedMarket === 'forex' ? (
                      <>
                        <Button 
                          onClick={() => generateSignalForPair('EUR/USD')}
                          className="bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white font-semibold py-3"
                        >
                          <TrendingUp className="w-4 h-4 mr-2" />
                          EUR/USD
                        </Button>
                        <Button 
                          onClick={() => generateSignalForPair('GBP/JPY')}
                          className="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white font-semibold py-3"
                        >
                          <TrendingUp className="w-4 h-4 mr-2" />
                          GBP/JPY
                        </Button>
                        <Button 
                          onClick={() => generateSignalForPair('USD/JPY')}
                          className="bg-gradient-to-r from-cyan-500 to-cyan-600 hover:from-cyan-600 hover:to-cyan-700 text-white font-semibold py-3"
                        >
                          <TrendingUp className="w-4 h-4 mr-2" />
                          USD/JPY
                        </Button>
                        <Button 
                          onClick={() => generateSignalForPair('AUD/USD')}
                          className="bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700 text-white font-semibold py-3"
                        >
                          <TrendingUp className="w-4 h-4 mr-2" />
                          AUD/USD
                        </Button>
                      </>
                    ) : (
                      <>
                        <Button 
                          onClick={() => generateSignalForPair('EUR/USD (OTC)')}
                          className="bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white font-semibold py-3"
                        >
                          <TrendingUp className="w-4 h-4 mr-2" />
                          EUR/USD (OTC)
                        </Button>
                        <Button 
                          onClick={() => generateSignalForPair('NZD/USD (OTC)')}
                          className="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold py-3"
                        >
                          <TrendingUp className="w-4 h-4 mr-2" />
                          NZD/USD (OTC)
                        </Button>
                        <Button 
                          onClick={() => generateSignalForPair('USD/CHF (OTC)')}
                          className="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white font-semibold py-3"
                        >
                          <TrendingUp className="w-4 h-4 mr-2" />
                          USD/CHF (OTC)
                        </Button>
                        <Button 
                          onClick={() => generateSignalForPair('GBP/USD (OTC)')}
                          className="bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700 text-white font-semibold py-3"
                        >
                          <TrendingUp className="w-4 h-4 mr-2" />
                          GBP/USD (OTC)
                        </Button>
                      </>
                    )}
                  </div>
                  <p className="text-slate-400 text-sm text-center mt-4">
                    –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
                  </p>
                </Card>
              </div>
            )}
          </TabsContent>

          {/* History Signals */}
          <TabsContent value="history" className="mt-6 space-y-4 perspective-container">
            {historySignals.map((signal) => (
              <Card key={signal.id} className="glass-effect backdrop-blur-sm overflow-hidden transition-all duration-300 card-3d border-slate-700/50 shadow-xl">
                <div className="p-5">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className={`w-12 h-12 rounded-xl flex items-center justify-center icon-3d shadow-xl ${
                        signal.result === 'profit'
                          ? 'bg-gradient-to-br from-emerald-500/20 to-emerald-600/10 shadow-emerald-500/30' 
                          : 'bg-gradient-to-br from-rose-500/20 to-rose-600/10 shadow-rose-500/30'
                      }`}>
                        {signal.type === 'BUY' ? (
                          <TrendingUp className={`w-6 h-6 ${signal.result === 'profit' ? 'text-emerald-400' : 'text-rose-400'}`} />
                        ) : (
                          <TrendingDown className={`w-6 h-6 ${signal.result === 'profit' ? 'text-emerald-400' : 'text-rose-400'}`} />
                        )}
                      </div>
                      <div>
                        <h3 className="text-lg font-bold text-white">{signal.pair}</h3>
                        <div className="flex items-center gap-2 mt-1">
                          <span className="text-xs text-slate-500">{signal.type}</span>
                          <span className="text-xs text-slate-600">‚Ä¢</span>
                          <span className="text-xs text-slate-500">{signal.time}</span>
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <Badge className={`${
                        signal.result === 'profit' 
                          ? 'bg-emerald-500/20 text-emerald-400 border-emerald-500/50' 
                          : 'bg-rose-500/20 text-rose-400 border-rose-500/50'
                      }`}>
                        {signal.result === 'profit' ? '–£—Å–ø–µ—à–Ω–æ' : '–ü—Ä–æ–∏–≥—Ä—ã—à'}
                      </Badge>
                      <div className="text-xs text-slate-500 mt-2">
                        {signal.entry} ‚Üí {signal.closePrice}
                      </div>
                    </div>
                  </div>
                </div>
              </Card>
            ))}

            {/* Stats Summary */}
            <Card className="glass-effect border-slate-700/50 p-6 mt-6 card-3d shadow-2xl">
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 rounded-lg bg-cyan-500/20 flex items-center justify-center icon-3d shadow-lg shadow-cyan-500/20">
                  <BarChart3 className="w-5 h-5 text-cyan-400" />
                </div>
                <h3 className="text-lg font-bold text-white">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü</h3>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <span className="text-slate-400 text-sm">–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤</span>
                  <div className="text-2xl font-bold text-white mt-1">47</div>
                </div>
                <div>
                  <span className="text-slate-400 text-sm">–£—Å–ø–µ—à–Ω—ã—Ö</span>
                  <div className="text-2xl font-bold text-emerald-400 mt-1">41</div>
                </div>
                <div>
                  <span className="text-slate-400 text-sm">–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö</span>
                  <div className="text-2xl font-bold text-rose-400 mt-1">6</div>
                </div>
                <div>
                  <span className="text-slate-400 text-sm">Win Rate</span>
                  <div className="text-2xl font-bold text-cyan-400 mt-1">87.2%</div>
                </div>
              </div>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Back Button */}
        <Button 
          onClick={() => {
            if (isNavigationBlocked()) {
              alert('‚ö†Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–∏–¥–±–µ–∫ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º!')
            } else {
              setCurrentScreen('mode-select')
            }
          }}
          variant="ghost"
          className="w-full mt-6 text-slate-400 hover:text-white hover:bg-slate-800/50"
        >
          {t('back')}
        </Button>
      </div>

      {/* Pending Signal Overlay - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      {pendingSignal && (
        <div className="fixed inset-0 bg-black/90 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <Card className="glass-effect border-slate-700/50 p-8 max-w-2xl w-full card-3d shadow-2xl">
            {!isWaitingFeedback ? (
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏ —Ç–∞–π–º–µ—Ä
              <>
                {/* Header */}
                <div className="flex items-center justify-center gap-3 mb-6">
                  <Lock className="w-8 h-8 text-red-400" />
                  <h1 className="text-2xl font-bold text-white">–°–î–ï–õ–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê</h1>
                </div>

                <div className="flex items-center justify-center gap-4 mb-6">
                  <div className={`w-20 h-20 rounded-xl flex items-center justify-center icon-3d shadow-xl ${
                    pendingSignal.type === 'BUY'
                      ? 'bg-gradient-to-br from-emerald-500/20 to-emerald-600/10 shadow-emerald-500/30' 
                      : 'bg-gradient-to-br from-rose-500/20 to-rose-600/10 shadow-rose-500/30'
                  }`}>
                    {pendingSignal.type === 'BUY' ? (
                      <TrendingUp className="w-10 h-10 text-emerald-400" />
                    ) : (
                      <TrendingDown className="w-10 h-10 text-rose-400" />
                    )}
                  </div>
                  <div className="text-center">
                    <h2 className="text-3xl font-bold text-white mb-2">{pendingSignal.pair}</h2>
                    <Badge className={`${
                      pendingSignal.type === 'BUY' 
                        ? 'bg-emerald-500/20 text-emerald-400 border-emerald-500/50' 
                        : 'bg-rose-500/20 text-rose-400 border-rose-500/50'
                    }`}>
                      {pendingSignal.type}
                    </Badge>
                  </div>
                </div>

                {/* Timer */}
                <Card className="glass-effect border-amber-500/30 p-6 mb-6 card-3d shadow-xl text-center">
                  <div className="flex items-center justify-center gap-4 mb-3">
                    <Clock className="w-8 h-8 text-amber-400 animate-pulse" />
                    <div>
                      <h3 className="text-4xl font-bold text-white">
                        {Math.floor(signalTimer / 60)}:{(signalTimer % 60).toString().padStart(2, '0')}
                      </h3>
                      <p className="text-slate-400 text-sm mt-1">–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏</p>
                    </div>
                  </div>
                  <div className="w-full bg-slate-800/50 rounded-full h-2 overflow-hidden">
                    <div 
                      className="h-full bg-gradient-to-r from-amber-500 to-red-500 transition-all duration-1000"
                      style={{ width: `${(signalTimer / (pendingSignal.expiration * 60)) * 100}%` }}
                    ></div>
                  </div>
                </Card>

                <div className="bg-cyan-500/10 border border-cyan-500/30 rounded-lg p-4 text-center">
                  <div className="flex items-center justify-center gap-2 mb-2">
                    <div className="w-6 h-6 rounded-full bg-red-500 flex items-center justify-center">
                      <span className="text-white text-xs font-bold">üö´</span>
                    </div>
                    <p className="text-cyan-400 font-semibold">–ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞</p>
                  </div>
                  <p className="text-slate-400 text-sm">–î–æ–∂–¥–∏—Ç–µ—Å—å —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–∏–¥–±–µ–∫</p>
                </div>
              </>
            ) : (
              // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–¥–±–µ–∫
              <>
                <div className="text-center mb-6">
                  <div className="w-20 h-20 rounded-full bg-amber-500/20 flex items-center justify-center mx-auto mb-4 animate-pulse">
                    <Clock className="w-10 h-10 text-amber-400" />
                  </div>
                  <h2 className="text-2xl font-bold text-white mb-2">‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!</h2>
                  <p className="text-slate-400">–û—Å—Ç–∞–≤—å—Ç–µ —Ñ–∏–¥–±–µ–∫ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–¥–µ–ª–∫–∏</p>
                </div>

                <Card className="glass-effect border-slate-700/50 p-6 mb-6">
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-slate-400">–ü–∞—Ä–∞:</span>
                      <span className="text-white font-bold">{pendingSignal.pair}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-slate-400">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</span>
                      <Badge className={pendingSignal.type === 'BUY' ? 'bg-emerald-500/20 text-emerald-400' : 'bg-rose-500/20 text-rose-400'}>
                        {pendingSignal.type}
                      </Badge>
                    </div>
                  </div>
                </Card>

                {/* Instructions */}
                <div className="bg-amber-500/10 border border-amber-500/30 rounded-lg p-4 mb-6">
                  <div className="flex items-center gap-2 mb-2">
                    <div className="w-6 h-6 rounded-full bg-amber-500 flex items-center justify-center">
                      <span className="text-white text-xs font-bold">üí°</span>
                    </div>
                    <p className="text-amber-400 font-semibold">–ö–Ω–æ–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏</p>
                  </div>
                  <p className="text-slate-400 text-sm">–ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏</p>
                </div>

                <div className="space-y-4">
                  <Button
                    onClick={() => submitFeedback(true)}
                    className="w-full bg-gradient-to-r from-emerald-500 via-green-600 to-emerald-500 hover:from-emerald-600 hover:via-green-700 hover:to-emerald-600 text-white py-8 text-xl font-bold shadow-2xl shadow-emerald-500/40 transition-all duration-300 hover:scale-105 relative overflow-hidden group"
                  >
                    <span className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent translate-x-[-200%] group-hover:translate-x-[200%] transition-transform duration-1000"></span>
                    <span className="relative flex items-center justify-center gap-3">
                      <span className="text-3xl animate-bounce">‚úÖ</span>
                      <span>–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞</span>
                      <TrendingUp className="w-6 h-6" />
                    </span>
                  </Button>
                  <Button
                    onClick={() => submitFeedback(false)}
                    className="w-full bg-gradient-to-r from-rose-500 via-red-600 to-rose-500 hover:from-rose-600 hover:via-red-700 hover:to-rose-600 text-white py-8 text-xl font-bold shadow-2xl shadow-rose-500/40 transition-all duration-300 hover:scale-105 relative overflow-hidden group"
                  >
                    <span className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent translate-x-[-200%] group-hover:translate-x-[200%] transition-transform duration-1000"></span>
                    <span className="relative flex items-center justify-center gap-3">
                      <span className="text-3xl animate-pulse">‚ùå</span>
                      <span>–£–±—ã—Ç–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞</span>
                      <TrendingDown className="w-6 h-6" />
                    </span>
                  </Button>
                </div>

                <p className="text-amber-400 text-sm text-center mt-4">
                  ‚ö†Ô∏è –û—Å—Ç–∞–≤—å—Ç–µ —Ñ–∏–¥–±–µ–∫ —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                </p>
              </>
            )}
          </Card>
        </div>
      )}

      {/* No Signal Available Notification */}
      {noSignalAvailable && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4 animate-fade-in">
          <Card className="glass-effect border-amber-500/50 p-8 card-3d shadow-2xl max-w-lg w-full">
            <div className="text-center mb-6">
              <div className="w-20 h-20 rounded-full bg-amber-500/20 flex items-center justify-center mx-auto mb-4 animate-pulse">
                <Activity className="w-10 h-10 text-amber-400" />
              </div>
              <h3 className="text-2xl font-bold text-white mb-3">‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞</h3>
              <p className="text-slate-400 text-base mb-2">
                –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
              </p>
              <Badge className="bg-amber-500/20 text-amber-400 border-amber-500/50 text-sm">
                –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω
              </Badge>
            </div>

            <Card className="glass-effect border-slate-700/50 p-6 mb-6 bg-slate-900/50">
              <h4 className="text-lg font-bold text-white mb-4 flex items-center gap-2">
                <Target className="w-5 h-5 text-cyan-400" />
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
              </h4>
              <div className="space-y-3">
                <div className="flex items-start gap-3 p-3 bg-slate-800/50 rounded-lg border border-cyan-500/20">
                  <div className="w-8 h-8 rounded-full bg-cyan-500/20 flex items-center justify-center flex-shrink-0 mt-0.5">
                    <span className="text-cyan-400 font-bold">1</span>
                  </div>
                  <div>
                    <p className="text-white font-semibold mb-1">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ø–∞—Ä—É</p>
                    <p className="text-slate-400 text-sm">–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É —Å –±–æ–ª–µ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏</p>
                  </div>
                </div>
                <div className="flex items-start gap-3 p-3 bg-slate-800/50 rounded-lg border border-purple-500/20">
                  <div className="w-8 h-8 rounded-full bg-purple-500/20 flex items-center justify-center flex-shrink-0 mt-0.5">
                    <span className="text-purple-400 font-bold">2</span>
                  </div>
                  <div>
                    <p className="text-white font-semibold mb-1">–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π</p>
                    <p className="text-slate-400 text-sm">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {signalCooldown} —Å–µ–∫—É–Ω–¥, –∫–æ–≥–¥–∞ —Ä—ã–Ω–æ–∫ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è</p>
                  </div>
                </div>
              </div>
            </Card>

            <Button
              onClick={() => {
                setNoSignalAvailable(false)
                setGeneratedSignals([])
              }}
              className="w-full bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 text-white py-6 text-lg font-bold shadow-lg shadow-amber-500/30"
            >
              <ChevronRight className="w-5 h-5 mr-2 rotate-180" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä—ã
            </Button>

            <p className="text-slate-500 text-xs text-center mt-4">
              üí° –¢–µ—Ä–ø–µ–Ω–∏–µ ‚Äî –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ
            </p>
          </Card>
        </div>
      )}

      {/* Reload Warning Modal */}
      {showReloadWarning && pendingSignal && (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-[100] flex items-center justify-center p-4 animate-fade-in">
          <Card className="glass-effect border-red-500/50 p-8 max-w-lg w-full card-3d shadow-2xl">
            <div className="text-center mb-6">
              <div className="w-20 h-20 rounded-full bg-red-500/20 flex items-center justify-center mx-auto mb-4 animate-pulse">
                <Shield className="w-10 h-10 text-red-400" />
              </div>
              <h2 className="text-3xl font-bold text-white mb-3">‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!</h2>
              <p className="text-red-400 text-lg font-semibold mb-2">
                –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ —Å–∏—Å—Ç–µ–º—ã
              </p>
              <p className="text-slate-400">
                –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. 
                –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –ø–æ–º–æ–∂–µ—Ç –æ–±–æ–π—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
              </p>
            </div>

            <Card className="glass-effect border-slate-700/50 p-6 mb-6 bg-slate-900/50">
              <h3 className="text-lg font-bold text-white mb-4 flex items-center gap-2">
                <Activity className="w-5 h-5 text-cyan-400" />
                –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª
              </h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-slate-400">–ü–∞—Ä–∞:</span>
                  <span className="text-white font-bold text-lg">{pendingSignal.pair}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-slate-400">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</span>
                  <Badge className={`${
                    pendingSignal.type === 'BUY' 
                      ? 'bg-emerald-500/20 text-emerald-400 border-emerald-500/50' 
                      : 'bg-rose-500/20 text-rose-400 border-rose-500/50'
                  }`}>
                    {pendingSignal.type === 'BUY' ? 'üìà BUY' : 'üìâ SELL'}
                  </Badge>
                </div>
                {!isWaitingFeedback && (
                  <div className="flex items-center justify-between">
                    <span className="text-slate-400">–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</span>
                    <span className="text-amber-400 font-bold text-lg">
                      {Math.floor(signalTimer / 60)}:{(signalTimer % 60).toString().padStart(2, '0')}
                    </span>
                  </div>
                )}
                {isWaitingFeedback && (
                  <div className="text-center py-2">
                    <span className="text-red-400 font-semibold">‚è∞ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∏–¥–±–µ–∫!</span>
                  </div>
                )}
              </div>
            </Card>

            <Button
              onClick={() => {
                setShowReloadWarning(false)
                setCurrentScreen('main')
              }}
              className="w-full bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white py-6 text-lg font-bold shadow-lg shadow-cyan-500/30"
            >
              <ArrowRight className="w-5 h-5 mr-2" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–µ
            </Button>

            <p className="text-slate-500 text-xs text-center mt-4">
              –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
            </p>
          </Card>
        </div>
      )}
    </div>
  )
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –í–°–ï–• —ç–∫—Ä–∞–Ω–∞—Ö
function AppWrapper() {
  return <App />
}

export default AppWrapper


