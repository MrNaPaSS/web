import { useState, useEffect } from 'react'
import { Card } from '@/components/ui/card.jsx'
import { Button } from '@/components/ui/button.jsx'
import { Shield, Loader2, AlertCircle, Check } from 'lucide-react'

export function TelegramAuth({ onAuthSuccess, onAuthError }) {
  const [authState, setAuthState] = useState('checking') // checking, authenticating, success, error, dev-mode
  const [errorMessage, setErrorMessage] = useState('')
  const [userData, setUserData] = useState(null)

  useEffect(() => {
    initTelegramAuth()
  }, [])

  const initTelegramAuth = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram WebApp
      if (typeof window.Telegram === 'undefined' || !window.Telegram.WebApp) {
        console.warn('‚ö†Ô∏è Telegram WebApp SDK –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
        setAuthState('dev-mode')
        return
      }

      const tg = window.Telegram.WebApp
      
      // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º WebApp –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
      tg.expand()
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      tg.setHeaderColor('#0f172a')
      tg.setBackgroundColor('#0f172a')

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const initData = tg.initData
      const user = tg.initDataUnsafe?.user

      if (!user) {
        console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
        setAuthState('dev-mode')
        return
      }

      console.log('‚úÖ Telegram –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', user)
      
      setUserData(user)
      setAuthState('authenticating')

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ backend –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          initData: initData,
          userData: {
            id: user.id,
            first_name: user.first_name || '',
            last_name: user.last_name || '',
            username: user.username || '',
            language_code: user.language_code || 'en',
            is_premium: user.is_premium || false
          }
        })
      })

      const data = await response.json()

      if (data.success) {
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', data.user)
        setAuthState('success')
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        setTimeout(() => {
          onAuthSuccess({
            userId: data.user.telegram_id,
            isAdmin: data.user.is_admin,
            userData: data.user,
            subscriptions: data.user.subscriptions || []
          })
        }, 1000)
      } else {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
      setErrorMessage(error.message)
      setAuthState('error')
      
      if (onAuthError) {
        onAuthError(error)
      }
    }
  }

  const handleDevModeLogin = async () => {
    // –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏–º–∏—Ç–∞—Ü–∏—è –≤—Ö–æ–¥–∞
    const devUser = {
      userId: '123456789',
      isAdmin: true,
      userData: {
        telegram_id: '123456789',
        first_name: 'Dev',
        last_name: 'User',
        username: 'devuser',
        language_code: 'ru',
        is_admin: true
      },
      subscriptions: ['logistic-spy']
    }
    
    console.log('üîß DEV MODE: –í—Ö–æ–¥ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram')
    setAuthState('success')
    
    setTimeout(() => {
      onAuthSuccess(devUser)
    }, 500)
  }

  const handleRetry = () => {
    setAuthState('checking')
    setErrorMessage('')
    initTelegramAuth()
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-slate-950 via-blue-950 to-slate-950">
      <Card className="glass-effect backdrop-blur-xl border-slate-700/50 p-8 max-w-md w-full shadow-2xl">
        
        {/* Checking State */}
        {authState === 'checking' && (
          <div className="text-center">
            <div className="w-20 h-20 rounded-full bg-blue-500/20 flex items-center justify-center mx-auto mb-6 animate-pulse">
              <Shield className="w-10 h-10 text-blue-400" />
            </div>
            <h2 className="text-2xl font-bold text-white mb-3">–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞</h2>
            <p className="text-slate-400 mb-6">–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...</p>
            <div className="flex items-center justify-center gap-2">
              <Loader2 className="w-5 h-5 text-blue-400 animate-spin" />
              <span className="text-slate-400 text-sm">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</span>
            </div>
          </div>
        )}

        {/* Authenticating State */}
        {authState === 'authenticating' && (
          <div className="text-center">
            <div className="w-20 h-20 rounded-full bg-cyan-500/20 flex items-center justify-center mx-auto mb-6">
              <Loader2 className="w-10 h-10 text-cyan-400 animate-spin" />
            </div>
            <h2 className="text-2xl font-bold text-white mb-3">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
            {userData && (
              <div className="bg-slate-800/50 rounded-lg p-4 mb-4">
                <p className="text-white font-semibold">
                  {userData.first_name} {userData.last_name}
                </p>
                {userData.username && (
                  <p className="text-slate-400 text-sm">@{userData.username}</p>
                )}
              </div>
            )}
            <p className="text-slate-400">–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...</p>
          </div>
        )}

        {/* Success State */}
        {authState === 'success' && (
          <div className="text-center">
            <div className="w-20 h-20 rounded-full bg-emerald-500/20 flex items-center justify-center mx-auto mb-6">
              <Check className="w-10 h-10 text-emerald-400" />
            </div>
            <h2 className="text-2xl font-bold text-white mb-3">–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω</h2>
            <p className="text-slate-400">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...</p>
          </div>
        )}

        {/* Error State */}
        {authState === 'error' && (
          <div className="text-center">
            <div className="w-20 h-20 rounded-full bg-red-500/20 flex items-center justify-center mx-auto mb-6">
              <AlertCircle className="w-10 h-10 text-red-400" />
            </div>
            <h2 className="text-2xl font-bold text-white mb-3">–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
            <div className="bg-red-500/10 border border-red-500/30 rounded-lg p-4 mb-6">
              <p className="text-red-400 text-sm">{errorMessage}</p>
            </div>
            <Button 
              onClick={handleRetry}
              className="w-full bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </div>
        )}

        {/* Dev Mode */}
        {authState === 'dev-mode' && (
          <div className="text-center">
            <div className="w-20 h-20 rounded-full bg-amber-500/20 flex items-center justify-center mx-auto mb-6">
              <AlertCircle className="w-10 h-10 text-amber-400" />
            </div>
            <h2 className="text-2xl font-bold text-white mb-3">–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</h2>
            <div className="bg-amber-500/10 border border-amber-500/30 rounded-lg p-4 mb-6">
              <p className="text-amber-400 text-sm mb-2">
                ‚ö†Ô∏è Telegram WebApp SDK –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω
              </p>
              <p className="text-slate-400 text-xs">
                –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
              </p>
            </div>
            <Button 
              onClick={handleDevModeLogin}
              className="w-full bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600"
            >
              –í–æ–π—Ç–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ (DEV)
            </Button>
          </div>
        )}

      </Card>
    </div>
  )
}


