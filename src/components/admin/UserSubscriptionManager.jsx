import React, { useState, useEffect } from 'react'
import { Card } from '@/components/ui/card.jsx'
import { Button } from '@/components/ui/button.jsx'
import { Badge } from '@/components/ui/badge.jsx'
import { CheckCircle2, Lock, Crown, Brain, Target, AlertCircle } from 'lucide-react'

const UserSubscriptionManager = ({ userId, userData, onSubscriptionChange }) => {
  const [userSubscriptions, setUserSubscriptions] = useState([])
  const [isLoading, setIsLoading] = useState(false)
  const [notification, setNotification] = useState(null)

  // ML –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const mlModels = [
    {
      id: 'shadow-stack',
      name: 'Shadow Stack',
      emoji: 'üåë',
      algorithm: 'Neural Network Stack',
      winrate: '65-70%',
      color: 'from-slate-600 to-slate-800'
    },
    {
      id: 'forest-necromancer',
      name: 'Forest Necromancer',
      emoji: 'üå≤',
      algorithm: 'Random Forest Ensemble',
      winrate: '62-67%',
      color: 'from-green-600 to-green-800'
    },
    {
      id: 'gray-cardinal',
      name: 'Gray Cardinal',
      emoji: 'üé≠',
      algorithm: 'Gradient Boosting',
      winrate: '~66%',
      color: 'from-gray-600 to-gray-800'
    },
    {
      id: 'logistic-spy',
      name: 'Logistic Spy',
      emoji: 'üïµÔ∏è',
      algorithm: 'Logistic Regression',
      winrate: '~60-65%',
      color: 'from-blue-600 to-blue-800'
    },
    {
      id: 'sniper-80x',
      name: 'Sniper 80X',
      emoji: 'üî´',
      algorithm: 'Deep Learning CNN',
      winrate: '80%+',
      color: 'from-red-600 to-red-800'
    }
  ]

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUserSubscriptions = async () => {
    if (!userId) return
    
    try {
      setIsLoading(true)
      const response = await fetch(`/api/user/subscriptions?user_id=${userId}`)
      const data = await response.json()
      
      if (data.success) {
        setUserSubscriptions(data.subscriptions || [])
        console.log('üì• User subscriptions loaded:', data.subscriptions)
      } else {
        console.error('‚ùå Error loading subscriptions:', data.error)
      }
    } catch (error) {
      console.error('‚ùå Error loading subscriptions:', error)
    } finally {
      setIsLoading(false)
    }
  }

  // –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
  const grantSubscription = async (modelId) => {
    try {
      setIsLoading(true)
      const response = await fetch(`/api/admin/user/${userId}/subscription/${modelId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          admin_id: 'admin_user_id' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π admin ID
        })
      })
      
      const data = await response.json()
      
      if (data.success) {
        setNotification({
          type: 'success',
          message: `–ü–æ–¥–ø–∏—Å–∫–∞ ${modelId} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`
        })
        await loadUserSubscriptions()
        if (onSubscriptionChange) {
          onSubscriptionChange()
        }
      } else {
        setNotification({
          type: 'error',
          message: `–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: ${data.error}`
        })
      }
    } catch (error) {
      console.error('‚ùå Error granting subscription:', error)
      setNotification({
        type: 'error',
        message: `–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: ${error.message}`
      })
    } finally {
      setIsLoading(false)
    }
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
  const revokeSubscription = async (modelId) => {
    try {
      setIsLoading(true)
      const response = await fetch(`/api/admin/user/${userId}/subscription/${modelId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          admin_id: 'admin_user_id' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π admin ID
        })
      })
      
      const data = await response.json()
      
      if (data.success) {
        setNotification({
          type: 'success',
          message: `–ü–æ–¥–ø–∏—Å–∫–∞ ${modelId} –æ—Ç–º–µ–Ω–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`
        })
        await loadUserSubscriptions()
        if (onSubscriptionChange) {
          onSubscriptionChange()
        }
      } else {
        setNotification({
          type: 'error',
          message: `–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: ${data.error}`
        })
      }
    } catch (error) {
      console.error('‚ùå Error revoking subscription:', error)
      setNotification({
        type: 'error',
        message: `–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: ${error.message}`
      })
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    loadUserSubscriptions()
  }, [userId])

  // –°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  useEffect(() => {
    if (notification) {
      const timer = setTimeout(() => {
        setNotification(null)
      }, 3000)
      return () => clearTimeout(timer)
    }
  }, [notification])

  if (!userId) {
    return (
      <Card className="glass-effect border-slate-700/50 p-6 card-3d shadow-xl">
        <div className="text-center text-slate-400">
          <AlertCircle className="w-8 h-8 mx-auto mb-2" />
          <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</p>
        </div>
      </Card>
    )
  }

  return (
    <div className="space-y-4">
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      {notification && (
        <div className={`p-4 rounded-lg border ${
          notification.type === 'success' 
            ? 'bg-emerald-500/10 border-emerald-500/50 text-emerald-400'
            : 'bg-red-500/10 border-red-500/50 text-red-400'
        }`}>
          {notification.message}
        </div>
      )}

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Card className="glass-effect border-slate-700/50 p-4 card-3d shadow-xl">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 rounded-lg bg-gradient-to-br from-purple-500/20 to-purple-600/10 flex items-center justify-center icon-3d shadow-lg shadow-purple-500/20">
            <Brain className="w-5 h-5 text-purple-400" />
          </div>
          <div>
            <h3 className="text-lg font-bold text-white">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</h3>
            <p className="text-slate-400 text-sm">
              {userData?.first_name} {userData?.last_name} ({userId})
            </p>
          </div>
        </div>
      </Card>

      {/* –°–ø–∏—Å–æ–∫ ML –º–æ–¥–µ–ª–µ–π */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {mlModels.map((model) => {
          const isOwned = userSubscriptions.includes(model.id)
          const isRestricted = model.id === 'sniper-80x' // Sniper 80X –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
          
          return (
            <Card 
              key={model.id}
              className={`glass-effect p-4 backdrop-blur-sm transition-all duration-300 card-3d shadow-xl ${
                isOwned 
                  ? 'border-emerald-500/50 bg-emerald-500/10' 
                  : isRestricted
                  ? 'border-red-500/30 bg-red-500/5 opacity-60'
                  : 'border-slate-700/50'
              }`}
            >
              <div className="flex flex-col gap-4 h-full">
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–µ–ª–∏ */}
                <div className="flex items-start justify-between">
                  <div className="flex items-center gap-3">
                    <div className={`w-12 h-12 rounded-lg bg-gradient-to-br ${model.color} flex items-center justify-center icon-3d shadow-xl`}>
                      <span className="text-2xl">{model.emoji}</span>
                    </div>
                    <div className="flex-1 min-w-0">
                      <h4 className="text-lg font-bold text-white mb-1 truncate">{model.name}</h4>
                      <p className="text-slate-300 text-sm">{model.algorithm}</p>
                    </div>
                  </div>
                  
                  {/* –°—Ç–∞—Ç—É—Å */}
                  <div className="flex flex-col items-end gap-1">
                    {isOwned && (
                      <Badge className="bg-emerald-500/20 text-emerald-400 border-emerald-500/50 text-xs px-2 py-1">
                        <CheckCircle2 className="w-3 h-3 mr-1" />
                        –ê–ö–¢–ò–í–ù–ê
                      </Badge>
                    )}
                    {isRestricted && (
                      <Badge className="bg-red-500/20 text-red-400 border-red-500/50 text-xs px-2 py-1">
                        <Lock className="w-3 h-3 mr-1" />
                        –û–ì–†–ê–ù–ò–ß–ï–ù–ê
                      </Badge>
                    )}
                  </div>
                </div>
                
                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                <div className="flex items-center gap-3 text-sm">
                  <div className="flex items-center gap-2">
                    <Target className="w-4 h-4 text-emerald-400" />
                    <span className="text-emerald-400 font-semibold text-base">{model.winrate}</span>
                  </div>
                </div>
                
                {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                <div className="flex items-center justify-between mt-auto">
                  <div className="flex items-center gap-2">
                    {isOwned ? (
                      <Button
                        onClick={() => revokeSubscription(model.id)}
                        disabled={isLoading || isRestricted}
                        variant="outline"
                        size="sm"
                        className="border-red-500/50 text-red-400 hover:bg-red-500/20 hover:border-red-400/70"
                      >
                        –û—Ç–º–µ–Ω–∏—Ç—å
                      </Button>
                    ) : (
                      <Button
                        onClick={() => grantSubscription(model.id)}
                        disabled={isLoading || isRestricted}
                        variant="outline"
                        size="sm"
                        className="border-emerald-500/50 text-emerald-400 hover:bg-emerald-500/20 hover:border-emerald-400/70"
                      >
                        –ù–∞–∑–Ω–∞—á–∏—Ç—å
                      </Button>
                    )}
                  </div>
                  
                  {/* –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ */}
                  <div className="flex items-center gap-2">
                    {isOwned ? (
                      <div className="w-8 h-8 rounded-full bg-emerald-500/20 flex items-center justify-center">
                        <CheckCircle2 className="w-4 h-4 text-emerald-400" />
                      </div>
                    ) : isRestricted ? (
                      <Lock className="w-5 h-5 text-red-400" />
                    ) : (
                      <div className="w-8 h-8 rounded-full bg-yellow-500/20 flex items-center justify-center">
                        <Crown className="w-4 h-4 text-yellow-400" />
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </Card>
          )
        })}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Card className="glass-effect border-cyan-500/30 p-4 card-3d shadow-xl">
        <div className="flex items-center gap-3">
          <div className="w-8 h-8 rounded-lg bg-cyan-500/20 flex items-center justify-center icon-3d shadow-lg shadow-cyan-500/20">
            <Brain className="w-4 h-4 text-cyan-400" />
          </div>
          <div>
            <h4 className="text-base font-bold text-white mb-1">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
            <p className="text-slate-400 text-sm">
              –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.
            </p>
          </div>
        </div>
      </Card>
    </div>
  )
}

export default UserSubscriptionManager
