#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–æ–∫
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
"""
from functools import wraps
from flask import request, jsonify
import jwt
from datetime import datetime
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('config.env')

JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY', 'default_secret_key')

def extract_token_from_request():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization"""
    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith('Bearer '):
        return None
    return auth_header.split(' ')[1]

def verify_jwt_token(token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞"""
    try:
        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=["HS256"])
        return payload
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None
    except Exception:
        return None

def login_required(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    @wraps(f)
    def decorated(*args, **kwargs):
        token = extract_token_from_request()
        if not token:
            return jsonify({
                "success": False,
                "error": "Authentication required",
                "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            }), 401
        
        token_data = verify_jwt_token(token)
        if not token_data:
            return jsonify({
                "success": False,
                "error": "Invalid or expired token",
                "message": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω"
            }), 401
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ request
        request.user_data = token_data
        return f(*args, **kwargs)
    return decorated

def admin_required(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    @wraps(f)
    def decorated(*args, **kwargs):
        token_data = getattr(request, 'user_data', None)
        if not token_data:
            return jsonify({
                "success": False,
                "error": "Authentication required",
                "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            }), 401
        
        if token_data.get('role') != 'admin':
            return jsonify({
                "success": False,
                "error": "Admin access required",
                "message": "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            }), 403
        
        return f(*args, **kwargs)
    return decorated

def subscription_required_optimized(model_id):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Ä—Å–∏–π –ø–æ–¥–ø–∏—Å–æ–∫"""
    def decorator(f):
        @wraps(f)
        def decorated(*args, **kwargs):
            # 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –∫—Ç–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?
            token_data = getattr(request, 'user_data', None)
            if not token_data or 'user_id' not in token_data:
                return jsonify({
                    "success": False,
                    "error": "Authentication required",
                    "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
                }), 401
            
            user_id = token_data['user_id']
            token_version = token_data.get('sub_version', 1)
            
            # 2. –°–í–ï–†–•–ë–´–°–¢–†–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫
            try:
                from database import SessionLocal
                from models import User
                
                db = SessionLocal()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ SQL
                user = db.query(User).filter(User.telegram_id == int(user_id)).first()
                current_version = user.subscription_version if user else 1
                
                db.close()
                
                # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª
                if token_version != current_version:
                    print(f'[VERSION] Token version {token_version} != DB version {current_version}')
                    return jsonify({
                        "success": False,
                        "error": "Token outdated",
                        "message": "–¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                        "requires_refresh": True
                    }), 401
                
                # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –¥–æ–≤–µ—Ä—è–µ–º JWT (–±—ã—Å—Ç—Ä–æ!)
                user_subs = token_data.get('subscriptions', [])
                if model_id not in user_subs:
                    return jsonify({
                        "success": False,
                        "error": f"Subscription to {model_id} required",
                        "message": f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–æ–¥–µ–ª—å {model_id}",
                        "model_id": model_id
                    }), 403
                
                # 3. –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –ø–µ—Ä–µ–¥–∞–µ–º user_id –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç
                kwargs['current_user_id'] = user_id
                return f(*args, **kwargs)
                
            except Exception as e:
                print(f'[ERROR] Optimized subscription check failed: {e}')
                # Fallback –∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ SQL
                return _full_sql_check(user_id, model_id, f, args, kwargs)
                
        return decorated
    return decorator

def _full_sql_check(user_id, model_id, f, args, kwargs):
    """Fallback –∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ SQL"""
    try:
        from database import SessionLocal
        from models import UserSubscription
        from datetime import datetime
        
        db = SessionLocal()
        
        # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ SQL
        has_subscription = db.query(UserSubscription).filter(
            UserSubscription.user_id == int(user_id),
            UserSubscription.model_id == model_id,
            UserSubscription.is_active == True,
            (UserSubscription.expiry_date == None) | (UserSubscription.expiry_date > datetime.utcnow())
        ).first()
        
        db.close()
        
        if not has_subscription:
            return jsonify({
                "success": False,
                "error": f"Subscription to {model_id} required",
                "message": f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–æ–¥–µ–ª—å {model_id}",
                "model_id": model_id
            }), 403
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        kwargs['current_user_id'] = user_id
        return f(*args, **kwargs)
        
    except Exception as e:
        print(f'[ERROR] Full SQL check failed: {e}')
        return jsonify({
            "success": False,
            "error": "Database error",
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
        }), 500

def get_current_user():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞"""
    token_data = getattr(request, 'user_data', None)
    if not token_data:
        return None
    
    return {
        'user_id': token_data.get('user_id'),
        'role': token_data.get('role'),
        'subscriptions': token_data.get('subscriptions', []),
        'is_premium': token_data.get('is_premium', False),
        'sub_version': token_data.get('sub_version', 1)
    }

def log_api_access(user_id, endpoint, method):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ API"""
    try:
        print(f"üìä API Access: {method} {endpoint} by user {user_id}")
    except Exception as e:
        print(f"‚ùå Error logging API access: {e}")
