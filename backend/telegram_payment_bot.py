
"""
Telegram –±–æ—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ CryptoBot
API –±–æ—Ç–∞: 7812637462:AAEAC-GizoyEczsNeb3IJgo8mCcKbhPnWLg
"""

import os
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

from crypto_bot_payment import CryptoBotPayment, MLModelSubscription

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = "7812637462:AAEAC-GizoyEczsNeb3IJgo8mCcKbhPnWLg"
CRYPTO_BOT_TOKEN = "YOUR_CRYPTO_BOT_TOKEN_HERE"  # –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç @CryptoBot

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ë–î)
USER_SUBSCRIPTIONS = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CryptoBot
crypto_bot = CryptoBotPayment(CRYPTO_BOT_TOKEN)
subscription_manager = MLModelSubscription(crypto_bot)

# –î–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π
ML_MODELS = {
    "shadow-stack": {
        "emoji": "üåë",
        "name": "–¢–ï–ù–ï–í–û–ô –°–¢–ï–ö",
        "description": "Ensemble –º–æ–¥–µ–ª—å - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç 65-70%",
        "monthly": 29.99,
        "lifetime": 299.99
    },
    "forest-necromancer": {
        "emoji": "üå≤",
        "name": "–õ–ï–°–ù–û–ô –ù–ï–ö–†–û–ú–ê–ù–¢",
        "description": "RandomForest - –ø—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –∏–∑ –ª–µ—Å–∞ —Ä–µ—à–µ–Ω–∏–π",
        "monthly": 24.99,
        "lifetime": 249.99
    },
    "grey-cardinal": {
        "emoji": "üé≠",
        "name": "–°–ï–†–´–ô –ö–ê–†–î–ò–ù–ê–õ",
        "description": "XGBoost - –≤—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º, –≤–∏–Ω—Ä–µ–π—Ç ~66%",
        "monthly": 34.99,
        "lifetime": 349.99
    },
    "logistic-spy": {
        "emoji": "üïµÔ∏è",
        "name": "–õ–û–ì–ò–°–¢–ò–ß–ï–°–ö–ò–ô –®–ü–ò–û–ù",
        "description": "LogisticRegression - —Å—Ç–∞—Ä–∞—è —à–∫–æ–ª–∞, –≤–∏–Ω—Ä–µ–π—Ç 60-65%",
        "monthly": 19.99,
        "lifetime": 199.99
    },
    "sniper-80x": {
        "emoji": "üî´",
        "name": "–°–ù–ê–ô–ü–ï–† 80–•",
        "description": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –º–æ–¥–µ–ª—å - –≤–∏–Ω—Ä–µ–π—Ç 80%+",
        "monthly": 99.99,
        "lifetime": 999.99
    }
}


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    user = update.effective_user
    
    welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

üß† –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ ML-–º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
üí∞ –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π —á–µ—Ä–µ–∑ CryptoBot

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/models - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏
/subscribe - –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
/my_subscriptions - –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
/help - –ü–æ–º–æ—â—å

üí≥ –ü—Ä–∏–Ω–∏–º–∞–µ–º: BTC, ETH, USDT, TON
    """
    
    keyboard = [
        [
            InlineKeyboardButton("üß† –ú–æ–¥–µ–ª–∏", callback_data="show_models"),
            InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe")
        ],
        [
            InlineKeyboardButton("üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)


async def show_models_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ ML-–º–æ–¥–µ–ª–∏
    """
    text = "üß† –ö–ê–¢–ê–õ–û–ì –ü–†–ò–í–ê–¢–ù–´–• ML-–ú–û–î–ï–õ–ï–ô\n\n"
    text += "üíÄ –¢–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö. –ö–∞–∂–¥—ã–π –≤—Ö–æ–¥ ‚Äî –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π —Ä–∏—Å–∫.\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    for model_id, model in ML_MODELS.items():
        text += f"{model['emoji']} {model['name']}\n"
        text += f"üìù {model['description']}\n"
        text += f"üí∞ {model['monthly']} USDT/–º–µ—Å –∏–ª–∏ {model['lifetime']} USDT –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ\n"
        text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)


async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    """
    text = "üß† –í—ã–±–µ—Ä–∏—Ç–µ ML-–º–æ–¥–µ–ª—å:\n\n"
    
    keyboard = []
    for model_id, model in ML_MODELS.items():
        keyboard.append([
            InlineKeyboardButton(
                f"{model['emoji']} {model['name']}",
                callback_data=f"select_model:{model_id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)


async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    """
    query = update.callback_query
    await query.answer()
    
    model_id = query.data.split(":")[1]
    model = ML_MODELS.get(model_id)
    
    if not model:
        await query.edit_message_text("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['selected_model'] = model_id
    
    text = f"""
{model['emoji']} {model['name']}

üìù {model['description']}

üí∞ –¶–µ–Ω—ã:
‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω–æ: {model['monthly']} USDT/–º–µ—Å
‚Ä¢ –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ: {model['lifetime']} USDT (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ)

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:
    """
    
    keyboard = [
        [
            InlineKeyboardButton(
                f"‚≠ê –ú–µ—Å—è—á–Ω–∞—è ({model['monthly']} USDT)",
                callback_data=f"payment:monthly:{model_id}"
            )
        ],
        [
            InlineKeyboardButton(
                f"üëë –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è ({model['lifetime']} USDT)",
                callback_data=f"payment:lifetime:{model_id}"
            )
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="subscribe")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)


async def payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: payment:type:model_id
    parts = query.data.split(":")
    subscription_type = parts[1]  # monthly –∏–ª–∏ lifetime
    model_id = parts[2]
    
    user_id = update.effective_user.id
    model = ML_MODELS.get(model_id)
    
    if not model:
        await query.edit_message_text("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
    text = f"""
üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏

{model['emoji']} {model['name']}
{'‚≠ê –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è' if subscription_type == 'monthly' else 'üëë –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è'} –ø–æ–¥–ø–∏—Å–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:
    """
    
    keyboard = [
        [
            InlineKeyboardButton("‚Çø Bitcoin", callback_data=f"crypto:BTC:{subscription_type}:{model_id}"),
            InlineKeyboardButton("Œû Ethereum", callback_data=f"crypto:ETH:{subscription_type}:{model_id}")
        ],
        [
            InlineKeyboardButton("üíµ USDT", callback_data=f"crypto:USDT:{subscription_type}:{model_id}"),
            InlineKeyboardButton("üíé TON", callback_data=f"crypto:TON:{subscription_type}:{model_id}")
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_model:{model_id}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)


async def crypto_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ CryptoBot –∏–Ω–≤–æ–π—Å–∞
    """
    query = update.callback_query
    await query.answer("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞...")
    
    # –ü–∞—Ä—Å–∏–º: crypto:CURRENCY:type:model_id
    parts = query.data.split(":")
    currency = parts[1]
    subscription_type = parts[2]
    model_id = parts[3]
    
    user_id = update.effective_user.id
    model = ML_MODELS.get(model_id)
    
    if not model:
        await query.edit_message_text("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoBot
    invoice = subscription_manager.create_subscription_invoice(
        user_id=user_id,
        model_id=model_id,
        subscription_type=subscription_type,
        currency=currency
    )
    
    if not invoice.get("ok"):
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {invoice.get('error', 'Unknown error')}"
        )
        return
    
    invoice_data = invoice['result']
    amount = model[subscription_type]
    
    text = f"""
‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω!

{model['emoji']} {model['name']}
{'‚≠ê –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è' if subscription_type == 'monthly' else 'üëë –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è'} –ø–æ–¥–ø–∏—Å–∫–∞

üí∞ –°—É–º–º–∞: {amount} {currency}
‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 10 –º–∏–Ω—É—Ç
üîë ID –∏–Ω–≤–æ–π—Å–∞: {invoice_data['invoice_id']}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:
    """
    
    keyboard = [
        [InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {amount} {currency}", url=invoice_data['pay_url'])],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check:{invoice_data['invoice_id']}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="subscribe")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await notify_admin_payment_request(context, user_id, model, subscription_type, currency, amount, invoice_data['invoice_id'])


async def check_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    """
    query = update.callback_query
    await query.answer("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
    
    invoice_id = query.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
    invoice_info = crypto_bot.get_invoice(invoice_id)
    
    if not invoice_info.get("ok"):
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return
    
    invoices = invoice_info.get("result", {}).get("items", [])
    
    if not invoices:
        await query.answer("‚ùå –ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    invoice = invoices[0]
    status = invoice.get("status")
    
    if status == "paid":
        # –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        payload = invoice.get("payload", "")
        result = subscription_manager.process_payment(invoice)
        
        if result.get("ok"):
            await query.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            user_id = result['user_id']
            model_id = result['model_id']
            subscription_type = result['subscription_type']
            
            if user_id not in USER_SUBSCRIPTIONS:
                USER_SUBSCRIPTIONS[user_id] = []
            
            USER_SUBSCRIPTIONS[user_id].append({
                "model_id": model_id,
                "type": subscription_type,
                "activated_at": datetime.now().isoformat(),
                "expires_at": (datetime.now() + timedelta(days=30)).isoformat() if subscription_type == "monthly" else None
            })
            
            model = ML_MODELS[model_id]
            
            text = f"""
‚úÖ –ü–û–î–ü–ò–°–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!

{model['emoji']} {model['name']}
{'‚≠ê –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è' if subscription_type == 'monthly' else 'üëë –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è'} –ø–æ–¥–ø–∏—Å–∫–∞

üéâ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_subscriptions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            """
            
            keyboard = [[InlineKeyboardButton("üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            await notify_admin_payment_success(context, user_id, model, subscription_type, invoice)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
    
    elif status == "active":
        await query.answer("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...", show_alert=True)
    
    elif status == "expired":
        await query.answer("‚è∞ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å.", show_alert=True)
    
    else:
        await query.answer(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: {status}", show_alert=True)


async def my_subscriptions_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    subscriptions = USER_SUBSCRIPTIONS.get(user_id, [])
    
    if not subscriptions:
        text = """
üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.

–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ª—é–±—É—é ML-–º–æ–¥–µ–ª—å!
        """
        keyboard = [[InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")]]
    else:
        text = "üìä –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        
        for sub in subscriptions:
            model = ML_MODELS.get(sub['model_id'])
            if model:
                text += f"{model['emoji']} {model['name']}\n"
                text += f"–¢–∏–ø: {'‚≠ê –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è' if sub['type'] == 'monthly' else 'üëë –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è'}\n"
                text += f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {sub['activated_at'][:10]}\n"
                if sub.get('expires_at'):
                    text += f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {sub['expires_at'][:10]}\n"
                text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)


async def notify_admin_payment_request(
    context: ContextTypes.DEFAULT_TYPE,
    user_id: int,
    model: Dict[str, Any],
    subscription_type: str,
    currency: str,
    amount: float,
    invoice_id: str
) -> None:
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—Ä–æ—Å–µ –æ–ø–ª–∞—Ç—ã
    """
    admin_id = YOUR_ADMIN_TELEGRAM_ID  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
    
    text = f"""
üîî –ù–û–í–´–ô –ó–ê–ü–†–û–° –û–ü–õ–ê–¢–´

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}
üß† –ú–æ–¥–µ–ª—å: {model['name']}
üí≥ –¢–∏–ø: {'–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞' if subscription_type == 'monthly' else '–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞'}
üí∞ –¶–µ–Ω–∞: {amount} {currency}
üîë Invoice ID: {invoice_id}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...
    """
    
    try:
        await context.bot.send_message(chat_id=admin_id, text=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")


async def notify_admin_payment_success(
    context: ContextTypes.DEFAULT_TYPE,
    user_id: int,
    model: Dict[str, Any],
    subscription_type: str,
    invoice: Dict[str, Any]
) -> None:
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    """
    admin_id = YOUR_ADMIN_TELEGRAM_ID  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
    
    text = f"""
‚úÖ –û–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}
üß† –ú–æ–¥–µ–ª—å: {model['name']}
üí≥ –¢–∏–ø: {'–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞' if subscription_type == 'monthly' else '–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞'}
üí∞ –°—É–º–º–∞: {invoice.get('amount')} {invoice.get('asset')}
üîë Invoice ID: {invoice.get('invoice_id')}
‚è∞ –û–ø–ª–∞—á–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
    """
    
    try:
        await context.bot.send_message(chat_id=admin_id, text=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    """
    query = update.callback_query
    
    if query.data == "start":
        await start_command(update, context)
    elif query.data == "show_models":
        await show_models_command(update, context)
    elif query.data == "subscribe":
        await subscribe_command(update, context)
    elif query.data.startswith("select_model:"):
        await select_model_callback(update, context)
    elif query.data.startswith("payment:"):
        await payment_callback(update, context)
    elif query.data.startswith("crypto:"):
        await crypto_payment_callback(update, context)
    elif query.data.startswith("check:"):
        await check_payment_callback(update, context)
    elif query.data == "my_subscriptions":
        await my_subscriptions_callback(update, context)


def main() -> None:
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    """
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("models", show_models_command))
    application.add_handler(CommandHandler("subscribe", subscribe_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    # –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_ADMIN_TELEGRAM_ID –Ω–∞ –≤–∞—à Telegram ID
    YOUR_ADMIN_TELEGRAM_ID = 123456789  # <-- –ó–∞–º–µ–Ω–∏—Ç–µ –∑–¥–µ—Å—å
    
    main()

