#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –∏–Ω–¥–µ–∫—Å—ã –∏ seed –¥–∞–Ω–Ω—ã–µ
"""
import os
import sys
from sqlalchemy import text, create_engine
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('config.env')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
from models import Base, User, SubscriptionModel, UserSubscription, SubscriptionHistory, SubscriptionTemplate
from database import engine, SessionLocal

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    try:
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            print("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
    try:
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def execute_migration_sql():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –º–∏–≥—Ä–∞—Ü–∏–∏"""
    try:
        print("üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        # –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
        migration_file = os.path.join(os.path.dirname(__file__), 'migrations', '001_create_tables.sql')
        
        if not os.path.exists(migration_file):
            print(f"‚ùå –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {migration_file}")
            return False
        
        with open(migration_file, 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL
        with engine.connect() as conn:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            sql_commands = [cmd.strip() for cmd in sql_content.split(';') if cmd.strip()]
            
            for command in sql_commands:
                if command:
                    conn.execute(text(command))
            
            conn.commit()
        
        print("‚úÖ SQL –º–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def seed_data():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ seed –¥–∞–Ω–Ω—ã—Ö...")
        
        db = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        model_count = db.query(SubscriptionModel).count()
        if model_count > 0:
            print("‚úÖ Seed –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            db.close()
            return True
        
        # –°–æ–∑–¥–∞–µ–º ML –º–æ–¥–µ–ª–∏
        models_data = [
            {
                'id': 'logistic-spy',
                'name': 'Logistic Regression Spy',
                'description': '–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤',
                'accuracy_range': '60-65%',
                'is_free': True
            },
            {
                'id': 'shadow-stack',
                'name': 'Shadow Stack',
                'description': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å —Å—Ç–µ–∫–∏–Ω–≥–∞ —Å —Ç–µ–Ω–µ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π',
                'accuracy_range': '70-75%',
                'is_free': False
            },
            {
                'id': 'forest-necromancer',
                'name': 'Forest Necromancer',
                'description': '–ê–Ω—Å–∞–º–±–ª—å —Å–ª—É—á–∞–π–Ω—ã—Ö –ª–µ—Å–æ–≤ —Å –≥–ª—É–±–æ–∫–∏–º –æ–±—É—á–µ–Ω–∏–µ–º',
                'accuracy_range': '65-70%',
                'is_free': False
            },
            {
                'id': 'gray-cardinal',
                'name': 'Gray Cardinal',
                'description': '–°–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º',
                'accuracy_range': '68-72%',
                'is_free': False
            },
            {
                'id': 'sniper-80x',
                'name': 'Sniper 80x',
                'description': '–ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª—å —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é',
                'accuracy_range': '75-80%',
                'is_free': False
            }
        ]
        
        for model_data in models_data:
            model = SubscriptionModel(**model_data)
            db.add(model)
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
        admin_user = User(
            telegram_id=511442168,
            first_name='Admin',
            last_name='',
            username='',
            role='admin',
            is_premium=True
        )
        db.add(admin_user)
        
        db.commit()
        
        # –í—ã–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –∞–¥–º–∏–Ω—É
        admin_subscription = UserSubscription(
            user_id=511442168,
            model_id='logistic-spy',
            granted_by=511442168,
            is_active=True
        )
        db.add(admin_subscription)
        
        db.commit()
        db.close()
        
        print("‚úÖ Seed –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è seed –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def verify_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î...")
        
        db = SessionLocal()
        
        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π
        user_count = db.query(User).count()
        model_count = db.query(SubscriptionModel).count()
        sub_count = db.query(UserSubscription).count()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
        print(f"‚úÖ ML –º–æ–¥–µ–ª–µ–π: {model_count}")
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {sub_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
        admin = db.query(User).filter(User.telegram_id == 511442168).first()
        if admin:
            print(f"‚úÖ –ê–¥–º–∏–Ω –Ω–∞–π–¥–µ–Ω: {admin.first_name} (role: {admin.role})")
        else:
            print("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        db.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("=" * 60)
    print("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not check_database_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    if not create_tables():
        return False
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    if not execute_migration_sql():
        return False
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if not seed_data():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if not verify_database():
        return False
    
    print("=" * 60)
    print("üéâ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("=" * 60)
    return True

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
