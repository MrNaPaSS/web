#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –æ–±—Ö–æ–¥–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = 'http://localhost:5000'
AUTH_URL = 'http://localhost:5001'

class SecurityTester:
    def __init__(self):
        self.test_results = []
        self.passed_tests = 0
        self.failed_tests = 0
    
    def log_test(self, test_name, passed, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        print(f"{status} {test_name}: {message}")
        
        self.test_results.append({
            'test': test_name,
            'passed': passed,
            'message': message,
            'timestamp': datetime.now().isoformat()
        })
        
        if passed:
            self.passed_tests += 1
        else:
            self.failed_tests += 1
    
    def test_no_token_access(self):
        """–¢–µ—Å—Ç: –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"""
        print("\nüîí –¢–µ—Å—Ç 1: –î–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞")
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ VIP —ç–Ω–¥–ø–æ–∏–Ω—Ç—É –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
            response = requests.get(f'{BASE_URL}/api/signal/get-shadow-stack')
            
            if response.status_code == 401:
                self.log_test("No Token Access", True, "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.log_test("No Token Access", False, f"–û–∂–∏–¥–∞–ª—Å—è 401, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                
        except Exception as e:
            self.log_test("No Token Access", False, f"–û—à–∏–±–∫–∞: {e}")
    
    def test_invalid_token_access(self):
        """–¢–µ—Å—Ç: –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
        print("\nüîí –¢–µ—Å—Ç 2: –î–æ—Å—Ç—É–ø —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
        
        try:
            headers = {'Authorization': 'Bearer invalid_token_12345'}
            response = requests.get(f'{BASE_URL}/api/signal/get-shadow-stack', headers=headers)
            
            if response.status_code == 401:
                self.log_test("Invalid Token Access", True, "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.log_test("Invalid Token Access", False, f"–û–∂–∏–¥–∞–ª—Å—è 401, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                
        except Exception as e:
            self.log_test("Invalid Token Access", False, f"–û—à–∏–±–∫–∞: {e}")
    
    def test_user_without_subscription(self):
        """–¢–µ—Å—Ç: –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"""
        print("\nüîí –¢–µ—Å—Ç 3: –î–æ—Å—Ç—É–ø –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
            test_user_data = {
                "id": 999999999,
                "first_name": "Test",
                "last_name": "User",
                "username": "testuser",
                "language_code": "ru",
                "is_premium": False
            }
            
            # –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            login_response = requests.post(f'{AUTH_URL}/api/auth/login', json={
                'userData': test_user_data,
                'initData': ''  # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            })
            
            if login_response.status_code != 200:
                self.log_test("User Without Subscription", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            login_data = login_response.json()
            if not login_data.get('success'):
                self.log_test("User Without Subscription", False, "–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            token = login_data.get('token')
            if not token:
                self.log_test("User Without Subscription", False, "–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                return
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å VIP —Å–∏–≥–Ω–∞–ª
            headers = {'Authorization': f'Bearer {token}'}
            response = requests.get(f'{BASE_URL}/api/signal/get-shadow-stack', headers=headers)
            
            if response.status_code == 403:
                self.log_test("User Without Subscription", True, "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.log_test("User Without Subscription", False, f"–û–∂–∏–¥–∞–ª—Å—è 403, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                
        except Exception as e:
            self.log_test("User Without Subscription", False, f"–û—à–∏–±–∫–∞: {e}")
    
    def test_admin_access_required(self):
        """–¢–µ—Å—Ç: –ø–æ–ø—ã—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –ø—Ä–∞–≤"""
        print("\nüîí –¢–µ—Å—Ç 4: –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –±–µ–∑ –ø—Ä–∞–≤")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user_data = {
                "id": 888888888,
                "first_name": "Regular",
                "last_name": "User",
                "username": "regularuser",
                "language_code": "ru",
                "is_premium": False
            }
            
            # –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            login_response = requests.post(f'{AUTH_URL}/api/auth/login', json={
                'userData': test_user_data,
                'initData': ''
            })
            
            if login_response.status_code != 200:
                self.log_test("Admin Access Required", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            login_data = login_response.json()
            token = login_data.get('token')
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
            headers = {'Authorization': f'Bearer {token}'}
            response = requests.get(f'{AUTH_URL}/api/admin/users', headers=headers)
            
            if response.status_code == 403:
                self.log_test("Admin Access Required", True, "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.log_test("Admin Access Required", False, f"–û–∂–∏–¥–∞–ª—Å—è 403, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                
        except Exception as e:
            self.log_test("Admin Access Required", False, f"–û—à–∏–±–∫–∞: {e}")
    
    def test_subscription_bypass_attempt(self):
        """–¢–µ—Å—Ç: –ø–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤"""
        print("\nüîí –¢–µ—Å—Ç 5: –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–∑–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
            test_user_data = {
                "id": 777777777,
                "first_name": "Basic",
                "last_name": "User",
                "username": "basicuser",
                "language_code": "ru",
                "is_premium": False
            }
            
            # –õ–æ–≥–∏–Ω–∏–º—Å—è
            login_response = requests.post(f'{AUTH_URL}/api/auth/login', json={
                'userData': test_user_data,
                'initData': ''
            })
            
            if login_response.status_code != 200:
                self.log_test("Subscription Bypass", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            login_data = login_response.json()
            token = login_data.get('token')
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Å–∏–≥–Ω–∞–ª (sniper-80x)
            headers = {'Authorization': f'Bearer {token}'}
            response = requests.get(f'{BASE_URL}/api/signal/get-sniper-80x', headers=headers)
            
            if response.status_code == 403:
                self.log_test("Subscription Bypass", True, "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–º–∏—É–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.log_test("Subscription Bypass", False, f"–û–∂–∏–¥–∞–ª—Å—è 403, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                
        except Exception as e:
            self.log_test("Subscription Bypass", False, f"–û—à–∏–±–∫–∞: {e}")
    
    def test_token_expiration(self):
        """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
        print("\nüîí –¢–µ—Å—Ç 6: –ò—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å –∏—Å—Ç—ë–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            import jwt
            from datetime import datetime, timedelta
            
            expired_payload = {
                "user_id": "123456789",
                "role": "user",
                "subscriptions": ["logistic-spy"],
                "exp": datetime.utcnow() - timedelta(days=1)  # –ò—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω
            }
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω (–Ω—É–∂–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á)
            # –î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            expired_token = "expired_token_test"
            
            headers = {'Authorization': f'Bearer {expired_token}'}
            response = requests.get(f'{BASE_URL}/api/signal/get-shadow-stack', headers=headers)
            
            if response.status_code == 401:
                self.log_test("Token Expiration", True, "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç—ë–∫—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.log_test("Token Expiration", False, f"–û–∂–∏–¥–∞–ª—Å—è 401, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                
        except Exception as e:
            self.log_test("Token Expiration", False, f"–û—à–∏–±–∫–∞: {e}")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("=" * 60)
        print("üîí –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´")
        print("=" * 60)
        print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
        try:
            auth_health = requests.get(f'{AUTH_URL}/api/health', timeout=5)
            signal_health = requests.get(f'{BASE_URL}/api/health', timeout=5)
            
            if auth_health.status_code == 200 and signal_health.status_code == 200:
                print("‚úÖ –°–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            else:
                print("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º: {e}")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        self.test_no_token_access()
        self.test_invalid_token_access()
        self.test_user_without_subscription()
        self.test_admin_access_required()
        self.test_subscription_bypass_attempt()
        self.test_token_expiration()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.failed_tests}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(self.passed_tests / (self.passed_tests + self.failed_tests) * 100):.1f}%")
        
        if self.failed_tests == 0:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!")
            print("üîí –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞—Ç–∞–∫")
        else:
            print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò!")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
        
        print("=" * 60)
        return self.failed_tests == 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SecurityTester()
    success = tester.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    try:
        with open('security_test_results.json', 'w', encoding='utf-8') as f:
            json.dump(tester.test_results, f, ensure_ascii=False, indent=2)
        print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ security_test_results.json")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    return success

if __name__ == '__main__':
    import sys
    success = main()
    sys.exit(0 if success else 1)
