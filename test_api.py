#!/usr/bin/env python3 # -*- coding: utf-8 -*- import asyncio import aiohttp import sys async def test_twelvedata_api(): """Тест API Twelvedata""" api_key = "135a5040fb4642d6be0dda33fdf12232" async with aiohttp.ClientSession() as session: # Тест EUR/USD url = f"https://api.twelvedata.com/time_series" params = { 'symbol': 'EUR/USD', 'interval': '1min', 'outputsize': 5, 'apikey': api_key } try: async with session.get(url, params=params) as response: print(f"Twelvedata API Status: {response.status}") if response.status == 200: data = await response.json() print(f"Twelvedata Response: {data}") if 'values' in data: print(f"Twelvedata API работает! Получено {len(data['values'])} записей") else: print(f"Twelvedata API: {data}") else: text = await response.text() print(f"Twelvedata API Error: {text}") except Exception as e: print(f"Twelvedata API Exception: {e}") async def test_finnhub_api(): """Тест API Finnhub""" api_key = "d31clt1r01qsprr0c0lgd31clt1r01qsprr0c0m0" async with aiohttp.ClientSession() as session: # Тест новостей url = f"https://finnhub.io/api/v1/company-news" params = { 'symbol': 'AAPL', 'from': '2024-01-01', 'to': '2024-01-02', 'token': api_key } try: async with session.get(url, params=params) as response: print(f"Finnhub API Status: {response.status}") if response.status == 200: data = await response.json() print(f"Finnhub API работает! Получено {len(data) if isinstance(data, list) else 'данные'}") else: text = await response.text() print(f"Finnhub API Error: {text}") except Exception as e: print(f"Finnhub API Exception: {e}") async def test_exchange_rate_api(): """Тест Exchange Rate API""" async with aiohttp.ClientSession() as session: url = "https://api.exchangerate-api.com/v4/latest/EUR" try: async with session.get(url) as response: print(f"Exchange Rate API Status: {response.status}") if response.status == 200: data = await response.json() print(f"Exchange Rate API работает! Курс EUR/USD: {data.get('rates', {}).get('USD', 'N/A')}") else: text = await response.text() print(f"Exchange Rate API Error: {text}") except Exception as e: print(f"Exchange Rate API Exception: {e}") async def main(): print("Тестирование API для генерации сигналов...") print("=" * 50) await test_twelvedata_api() print("-" * 30) await test_finnhub_api() print("-" * 30) await test_exchange_rate_api() print("-" * 30) print("Тест завершен!") if __name__ == "__main__": asyncio.run(main()) 