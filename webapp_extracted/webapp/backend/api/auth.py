#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Authentication API - Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
"""

from fastapi import APIRouter, HTTPException, Depends, Header
from typing import Optional
import hashlib
import hmac
import time
import logging
import jwt
from datetime import datetime, timedelta

from models.schemas import TelegramAuthData, AuthToken, User, UserCreate
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
from config import BotConfig

logger = logging.getLogger(__name__)

router = APIRouter()

# JWT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SECRET_KEY = "your-secret-key-change-in-production"  # –í–ê–ñ–ù–û: –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 10080  # 7 –¥–Ω–µ–π

def verify_telegram_auth(auth_data: TelegramAuthData) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    # –ü–û–õ–ù–´–ô –û–ë–•–û–î –ü–†–û–í–ï–†–ö–ò - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
    if BotConfig.is_user_authorized(auth_data.id):
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {auth_data.id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ - –ø–æ–ª–Ω—ã–π –æ–±—Ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return True
    
    # –û–±—Ö–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
    if auth_data.hash in ["auto_login_bypass", "bypass_auth"]:
        logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {auth_data.id}")
        return True
    
    # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot_token = BotConfig.BOT_TOKEN
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_hash = auth_data.hash
    data_check_arr = []
    
    auth_dict = auth_data.dict(exclude={'hash'})
    for key, value in sorted(auth_dict.items()):
        if value is not None:
            data_check_arr.append(f"{key}={value}")
    
    data_check_string = '\n'.join(data_check_arr)
    
    # –í—ã—á–∏—Å–ª—è–µ–º hash
    secret_key = hashlib.sha256(bot_token.encode()).digest()
    calculated_hash = hmac.new(
        secret_key,
        data_check_string.encode(),
        hashlib.sha256
    ).hexdigest()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º hash
    if calculated_hash != check_hash:
        logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π hash –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {auth_data.id}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è (–¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 24 —á–∞—Å–∞)
    current_time = int(time.time())
    if current_time - auth_data.auth_date > 86400:
        logger.warning(f"‚è∞ –ò—Å—Ç–µ–∫—à–µ–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {auth_data.id}")
        return False
    
    return True

def create_access_token(user_id: int, telegram_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω"""
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode = {
        "user_id": user_id,
        "telegram_id": telegram_id,
        "exp": expire
    }
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

def verify_token(token: str) -> Optional[dict]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω"""
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        logger.warning("‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
        return None
    except jwt.JWTError as e:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ JWT: {e}")
        return None

async def get_current_user(authorization: str = Header(None)) -> dict:
    """–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    
    token = authorization.replace("Bearer ", "")
    payload = verify_token(token)
    
    if not payload:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
    
    return payload

@router.post("/telegram", response_model=AuthToken)
async def telegram_auth(auth_data: TelegramAuthData):
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Login Widget
    –∏ —Å–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if not verify_telegram_auth(auth_data):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not BotConfig.is_user_authorized(auth_data.id):
        logger.warning(f"‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {auth_data.id}")
        raise HTTPException(
            status_code=403, 
            detail="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @kaktotakxm"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    from main import db_manager
    
    user = await db_manager.get_user_by_telegram_id(auth_data.id)
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = await db_manager.create_user(
            telegram_id=auth_data.id,
            username=auth_data.username,
            first_name=auth_data.first_name,
            last_name=auth_data.last_name,
            language_code='en'
        )
        user = await db_manager.get_user_by_telegram_id(auth_data.id)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {auth_data.id}")
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await db_manager.update_user_activity(auth_data.id)
        logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {auth_data.id}")
    
    # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    access_token = create_access_token(user['id'], auth_data.id)
    
    return AuthToken(
        access_token=access_token,
        user=User(**user)
    )

@router.get("/verify")
async def verify_auth(current_user: dict = Depends(get_current_user)):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞"""
    return {
        "valid": True,
        "user_id": current_user['user_id'],
        "telegram_id": current_user['telegram_id']
    }

@router.post("/logout")
async def logout(current_user: dict = Depends(get_current_user)):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω)"""
    logger.info(f"üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user['telegram_id']} –≤—ã—à–µ–ª")
    return {"success": True, "message": "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥"}

