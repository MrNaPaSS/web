
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Authentication API - Simplified for direct access
"""

from fastapi import APIRouter, HTTPException, Depends, Header
from typing import Optional
import jwt
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

router = APIRouter()

# JWT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SECRET_KEY = "your-secret-key-change-in-production"  # –í–ê–ñ–ù–û: –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 10080  # 7 –¥–Ω–µ–π

def create_access_token(user_id: int, telegram_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω"""
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode = {
        "user_id": user_id,
        "telegram_id": telegram_id,
        "exp": expire
    }
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

def verify_token(token: str) -> Optional[dict]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω"""
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        logger.warning("‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
        return None
    except jwt.JWTError as e:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ JWT: {e}")
        return None

async def get_current_user(authorization: str = Header(None)) -> dict:
    """–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    
    token = authorization.replace("Bearer ", "")
    payload = verify_token(token)
    
    if not payload:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
    
    return payload

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram
@router.post("/create_token")
async def create_token_manual(user_id: int, telegram_id: int):
    """
    –°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é.
    –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –∫–æ–≥–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤–Ω–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    access_token = create_access_token(user_id, telegram_id)
    return {"access_token": access_token, "token_type": "bearer"}

@router.get("/verify")
async def verify_auth(current_user: dict = Depends(get_current_user)):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞"""
    return {
        "valid": True,
        "user_id": current_user['user_id'],
        "telegram_id": current_user['telegram_id']
    }

@router.post("/logout")
async def logout(current_user: dict = Depends(get_current_user)):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω)"""
    logger.info(f"üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user['telegram_id']} –≤—ã—à–µ–ª")
    return {"success": True, "message": "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥"}

