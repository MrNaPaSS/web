"""
TELEGRAM –ë–û–¢ @info_xm_trust_bot
–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏–≥–Ω–∞–ª–∞–º
"""

import asyncio
import logging
import json
import csv
import requests
import threading
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
from i18n import t, get_user_language, set_user_language, get_language_keyboard, LANGUAGES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class InfoBot:
    """–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∏–≥–Ω–∞–ª–∞–º"""
    
    def __init__(self):
        self.bot_token = "8301387899:AAF3iyRTamLwiFxao6nImBeZC-aUm0GbV00"
        self.referral_link = "https://u3.shortink.io/register?utm_campaign=827841&utm_source=affiliate&utm_medium=sr&a=CQQJpdvm2ya9dU&ac=tggg&code=50START"
        self.referral_code = "50START"
        self.min_deposit = 50
        self.admin_chat_id = "511442168"  # –í–∞—à Telegram ID
        
        # –ü—É—Ç—å –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Ñ–æ—Ç–æ
        self.welcome_photo = "welcome.jpg"  # –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ —Å –±–æ—Ç–æ–º
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users_db_file = "info_bot_users.json"
        self.users_db = self._load_users_db()
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø"
        self.access_check_history = {}  # {user_id: [timestamps]}
        self.max_repeated_checks = 3  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        self.check_cooldown = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        
        # –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        self.user_warnings = {}  # {user_id: warning_count}
        self.max_warnings = 2  # –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π (1-–µ, 2-–µ)
        self.blocked_users = set()  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.admin_events = []  # [{timestamp, event_type, user_id, description}]
        self.max_events = 50  # –ú–∞–∫—Å–∏–º—É–º —Å–æ–±—ã—Ç–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
    
    def _add_admin_event(self, event_type: str, user_id: int, description: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        event = {
            'timestamp': datetime.now().isoformat(),
            'event_type': event_type,
            'user_id': user_id,
            'description': description
        }
        self.admin_events.insert(0, event)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.admin_events) > self.max_events:
            self.admin_events = self.admin_events[:self.max_events]
    
    def _load_users_db(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON"""
        try:
            with open(self.users_db_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã")
                return data
        except FileNotFoundError:
            logger.info("üìù –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return {}
    
    def _save_users_db(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON"""
        try:
            with open(self.users_db_file, 'w', encoding='utf-8') as f:
                json.dump(self.users_db, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ({len(self.users_db)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def _export_users_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV —Ñ–∞–π–ª"""
        import csv
        csv_filename = f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        try:
            with open(csv_filename, 'w', newline='', encoding='utf-8-sig') as csvfile:
                fieldnames = ['ID', 'Username', 'Telegram', '–Ø–∑—ã–∫', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'PocketOption ID', '–°—Ç–∞—Ç—É—Å', '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω', '–î–µ–ø–æ–∑–∏—Ç']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                
                writer.writeheader()
                for user_id, user_data in self.users_db.items():
                    writer.writerow({
                        'ID': user_id,
                        'Username': user_data.get('username', 'N/A'),
                        'Telegram': f"@{user_data.get('username', 'N/A')}",
                        '–Ø–∑—ã–∫': user_data.get('language', 'N/A'),
                        '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏': user_data.get('registered_at', 'N/A')[:19] if user_data.get('registered_at') else 'N/A',
                        'PocketOption ID': user_data.get('pocket_option_id', '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'),
                        '–°—Ç–∞—Ç—É—Å': user_data.get('status', 'N/A'),
                        '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω': '‚úÖ –î–∞' if user_data.get('verified') else '‚ùå –ù–µ—Ç',
                        '–î–µ–ø–æ–∑–∏—Ç': '‚úÖ –î–∞' if user_data.get('deposited') else '‚ùå –ù–µ—Ç'
                    })
            
            logger.info(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(self.users_db)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ {csv_filename}")
            return csv_filename
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return None
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "User"
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        if str(user_id) == self.admin_chat_id:
            await self.admin_panel_command(update, context)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_new_user = user_id not in self.users_db
        
        # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        if is_new_user or 'language' not in self.users_db.get(user_id, {}):
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–ï–ó —è–∑—ã–∫–∞
            if user_id not in self.users_db:
                self.users_db[user_id] = {
                    'username': username,
                    'registered_at': datetime.now().isoformat(),
                    'status': 'new',
                    'pocket_option_id': None,
                    'verified': False,
                    'deposited': False
                }
                self._save_users_db()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            keyboard = get_language_keyboard()
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üåê *Welcome! Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫*\n\n"
                "Please select your preferred language:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —è–∑—ã–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        user_lang = get_user_language(
            user_id, 
            self.users_db, 
            update.effective_user.language_code
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = f"""
{t('welcome_title', user_lang).format(username)}

{t('welcome_intro', user_lang)}

{t('welcome_features_title', user_lang)}
{t('welcome_feature_1', user_lang)}
{t('welcome_feature_2', user_lang)}
{t('welcome_feature_3', user_lang)}
{t('welcome_feature_4', user_lang)}

{t('welcome_how_title', user_lang)}

{t('welcome_step_1', user_lang)}
   [–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê –ü–õ–ê–¢–§–û–†–ú–ï]({self.referral_link})

{t('welcome_step_2', user_lang)}
{t('welcome_step_2_bonus', user_lang)}
{t('welcome_step_2_promo', user_lang)}

{t('welcome_step_3', user_lang)}

{t('welcome_step_4', user_lang)}

{t('welcome_traders_only', user_lang)}

{t('welcome_support', user_lang)}
        """.strip()
        
        # –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton(t('btn_instruction', user_lang), callback_data="instruction")],
            [InlineKeyboardButton(t('btn_registration', user_lang), url=self.referral_link)],
            [InlineKeyboardButton(t('btn_check_access', user_lang), callback_data="check_access")],
            [InlineKeyboardButton(t('btn_support', user_lang), url="https://t.me/kaktotakxm")],
            [InlineKeyboardButton(t('btn_language', user_lang), callback_data="choose_language")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        try:
            with open('welcome.jpg', 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=welcome_message, 
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        except FileNotFoundError:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                welcome_message, 
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text(
                welcome_message, 
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
    async def instruction_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–Ω–æ–ø–∫–∞ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        user_lang = get_user_language(user_id, self.users_db)
        
        instruction_text = f"""
{t('instruction_title', user_lang)}

{t('instruction_step1_title', user_lang)}
{t('instruction_step1_1', user_lang)}
{t('instruction_step1_2', user_lang)}
{t('instruction_step1_3', user_lang)}

{t('instruction_step2_title', user_lang)}
{t('instruction_step2_1', user_lang)}
{t('instruction_step2_2', user_lang)}
{t('instruction_step2_3', user_lang)}

{t('instruction_step3_title', user_lang)}
{t('instruction_step3_1', user_lang)}
{t('instruction_step3_2', user_lang)}
{t('instruction_step3_3', user_lang)}

{t('instruction_step4_title', user_lang)}
{t('instruction_step4_1', user_lang)}
{t('instruction_step4_2', user_lang)}
{t('instruction_step4_3', user_lang)}

{t('instruction_time', user_lang)}

{t('instruction_questions', user_lang)}
        """.strip()
        
        keyboard = [
            [InlineKeyboardButton(t('btn_registration', user_lang), url=self.referral_link)],
            [InlineKeyboardButton(t('btn_check_access', user_lang), callback_data="check_access")],
            [InlineKeyboardButton(t('btn_back', user_lang), callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            instruction_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    async def check_access_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–Ω–æ–ø–∫–∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        user_lang = get_user_language(user_id, self.users_db)
        current_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_id in self.blocked_users:
            blocked_text = f"""
{t('blocked_title', user_lang)}

{t('blocked_reason', user_lang)}

{t('blocked_permanent', user_lang)}

{t('blocked_contact', user_lang)}
{t('blocked_user_id', user_lang).format(user_id)}
            """.strip()
            
            await query.edit_message_text(
                blocked_text,
                parse_mode='Markdown'
            )
            return
        
        if user_id not in self.users_db:
            await query.edit_message_text(
                t('error_not_registered', user_lang),
                parse_mode='Markdown'
            )
            return
            
        user_data = self.users_db[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–∫–∏
        if user_id not in self.access_check_history:
            self.access_check_history[user_id] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        self.access_check_history[user_id].append(current_time)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        hour_ago = current_time.timestamp() - 3600
        self.access_check_history[user_id] = [
            ts for ts in self.access_check_history[user_id] 
            if ts.timestamp() > hour_ago
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        recent_checks = len(self.access_check_history[user_id])
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤—ã–ø–æ–ª–Ω–∏–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –¥–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not user_data.get('verified') and recent_checks > 1:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            last_check = self.access_check_history[user_id][-2] if recent_checks > 1 else None
            
            if last_check:
                time_since_last = (current_time - last_check).total_seconds()
                
                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                if time_since_last < self.check_cooldown:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                    if user_id not in self.user_warnings:
                        self.user_warnings[user_id] = 0
                    self.user_warnings[user_id] += 1
                    
                    warning_count = self.user_warnings[user_id]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ 2-–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
                    if warning_count >= self.max_warnings:
                        # –ë–õ–û–ö–ò–†–£–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
                        self.blocked_users.add(user_id)
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                        username_safe = user_data['username'].replace('*', '').replace('_', '').replace('`', '')
                        telegram_username = update.effective_user.username or '–±–µ–∑ username'
                        telegram_username_safe = telegram_username.replace('*', '').replace('_', '').replace('`', '')
                        
                        admin_message = f"""üö® –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username_safe}
üÜî ID: {user_id}
üìß Telegram: @{telegram_username_safe}

‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (2/2 - –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
üîÑ –ü—Ä–æ–≤–µ—Ä–æ–∫: {recent_checks} —Ä–∞–∑ –ø–æ–¥—Ä—è–¥

‚è∞ –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {current_time.strftime('%H:%M:%S %d.%m.%Y')}

üí° –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unblock_user {user_id}"""
                        
                        try:
                            requests.post(
                                f"https://api.telegram.org/bot{self.bot_token}/sendMessage",
                                data={
                                    'chat_id': self.admin_chat_id,
                                    'text': admin_message
                                }
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                        logger.warning(f"üö® –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù: {user_data['username']} (ID: {user_id}) - –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
                        self._add_admin_event('blocked', user_id, f"‚õî @{user_data['username']} –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù –∑–∞ {recent_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥—Ä—è–¥")
                        
                        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ù–ê –ï–ì–û –Ø–ó–´–ö–ï
                        blocked_text = f"""
{t('blocked_title', user_lang)}

{t('blocked_reason', user_lang)}

{t('blocked_permanent', user_lang)}

{t('blocked_contact', user_lang)}
{t('blocked_user_id', user_lang).format(user_id)}
                        """.strip()
                        
                        await query.edit_message_text(
                            blocked_text,
                            parse_mode='Markdown'
                        )
                        return
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å —ç—Å–∫–∞–ª–∞—Ü–∏–µ–π
                    if warning_count == 1:
                        warning_level = t('warning_first_title', user_lang)
                        warning_text = t('warning_block_threat', user_lang)
                    else:  # warning_count == 2 (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
                        warning_level = t('warning_last_title', user_lang)
                        warning_text = t('warning_block_threat', user_lang)
                    
                    # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    warning_message = f"""
{warning_level}

{t('warning_checks_count', user_lang).format(recent_checks)}

{warning_text}

{t('warning_status_wont_change', user_lang)}

{t('warning_steps_required', user_lang).format(self.min_deposit)}

{t('warning_cooldown', user_lang).format(int((self.check_cooldown - time_since_last) / 60))}

{t('warning_advice', user_lang)}
                    """.strip()
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - —É–±—Ä–∞–Ω–æ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
                    # –í—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –≤ warning_message –≤—ã—à–µ
                    
                    keyboard = [
                        [InlineKeyboardButton(t('btn_registration', user_lang), url=self.referral_link)],
                        [InlineKeyboardButton(t('btn_support', user_lang), url="https://t.me/kaktotakxm")],
                        [InlineKeyboardButton(t('btn_back', user_lang), callback_data="back_to_start")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_text(
                        warning_message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                    return
        
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        referral_status = t('access_referral_used', user_lang) if user_data.get('referral_used') else t('access_referral_not_used', user_lang)
        deposit_status = t('access_deposit_confirmed', user_lang) if user_data.get('deposited') else t('access_deposit_not_confirmed', user_lang)
        account_id = user_data.get('pocket_option_id', t('access_id_not_sent', user_lang))
        access_status = t('access_active', user_lang) if user_data.get('verified') else t('access_not_granted', user_lang)
        
        status_message = f"""
{t('access_status_title', user_lang)}

{t('access_user', user_lang).format(user_data['username'])}
{t('access_registration', user_lang).format(user_data['registered_at'][:10])}
{t('access_referral_link', user_lang).format(referral_status)}
{t('access_deposit', user_lang).format(deposit_status)}
{t('access_account_id', user_lang).format(account_id)}
{t('access_status', user_lang).format(access_status)}

        """.strip()
        
        if user_data.get('verified'):
            status_message += t('access_granted_message', user_lang)
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ
            self.access_check_history[user_id] = []
        else:
            status_message += t('access_not_granted_message', user_lang).format(self.min_deposit)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö
            if recent_checks > 1:
                status_message += t('access_checks_info', user_lang).format(recent_checks)
        
        keyboard = [
            [InlineKeyboardButton(t('btn_registration', user_lang), url=self.referral_link)],
            [InlineKeyboardButton(t('btn_support', user_lang), url="https://t.me/kaktotakxm")],
            [InlineKeyboardButton(t('btn_back', user_lang), callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            status_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    async def back_to_start_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        username = query.from_user.username or "User"
        user_lang = get_user_language(user_id, self.users_db)
        
        welcome_message = f"""
{t('welcome_title', user_lang).format(username)}

{t('welcome_intro', user_lang)}

{t('welcome_features_title', user_lang)}
{t('welcome_feature_1', user_lang)}
{t('welcome_feature_2', user_lang)}
{t('welcome_feature_3', user_lang)}
{t('welcome_feature_4', user_lang)}

{t('welcome_how_title', user_lang)}

{t('welcome_step_1', user_lang)}
   [–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê –ü–õ–ê–¢–§–û–†–ú–ï]({self.referral_link})

{t('welcome_step_2', user_lang)}
{t('welcome_step_2_bonus', user_lang)}
{t('welcome_step_2_promo', user_lang)}

{t('welcome_step_3', user_lang)}

{t('welcome_step_4', user_lang)}

{t('welcome_traders_only', user_lang)}

{t('welcome_support', user_lang)}
        """.strip()
        
        # –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton(t('btn_instruction', user_lang), callback_data="instruction")],
            [InlineKeyboardButton(t('btn_registration', user_lang), url=self.referral_link)],
            [InlineKeyboardButton(t('btn_check_access', user_lang), callback_data="check_access")],
            [InlineKeyboardButton(t('btn_support', user_lang), url="https://t.me/kaktotakxm")],
            [InlineKeyboardButton(t('btn_language', user_lang), callback_data="choose_language")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        try:
            with open('welcome.jpg', 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=query.from_user.id,
                    photo=photo,
                    caption=welcome_message, 
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        except FileNotFoundError:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                welcome_message, 
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await query.edit_message_text(
                welcome_message, 
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
    async def language_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /language - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
        user_id = update.effective_user.id
        user_lang = get_user_language(user_id, self.users_db)
        
        keyboard = get_language_keyboard()
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            t('language_select', user_lang),
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def language_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        username = query.from_user.username or "User"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: "lang_ru", "lang_en" –∏ —Ç.–¥.)
        if query.data.startswith("lang_"):
            lang_code = query.data[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "lang_"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            is_first_language_selection = user_id not in self.users_db or 'language' not in self.users_db.get(user_id, {})
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if set_user_language(user_id, self.users_db, lang_code):
                self._save_users_db()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
                confirmation_text = t('language_changed', lang_code)
                await query.edit_message_text(
                    confirmation_text,
                    parse_mode='Markdown'
                )
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ - —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if is_first_language_selection:
                    logger.info(f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —è–∑—ã–∫: {username} (ID: {user_id}) - {lang_code}")
                    self._add_admin_event('new_user', user_id, f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –≤—ã–±—Ä–∞–ª —è–∑—ã–∫: {lang_code}")
                    await self.notify_admin_new_user(user_id, username, update)
                
                # –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
                await asyncio.sleep(2)
                
                welcome_message = f"""
{t('welcome_title', lang_code).format(username)}

{t('welcome_intro', lang_code)}

{t('welcome_features_title', lang_code)}
{t('welcome_feature_1', lang_code)}
{t('welcome_feature_2', lang_code)}
{t('welcome_feature_3', lang_code)}
{t('welcome_feature_4', lang_code)}

{t('welcome_how_title', lang_code)}

{t('welcome_step_1', lang_code)}
   [–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê –ü–õ–ê–¢–§–û–†–ú–ï]({self.referral_link})

{t('welcome_step_2', lang_code)}
{t('welcome_step_2_bonus', lang_code)}
{t('welcome_step_2_promo', lang_code)}

{t('welcome_step_3', lang_code)}

{t('welcome_step_4', lang_code)}

{t('welcome_traders_only', lang_code)}

{t('welcome_support', lang_code)}
                """.strip()
                
                keyboard = [
                    [InlineKeyboardButton(t('btn_instruction', lang_code), callback_data="instruction")],
                    [InlineKeyboardButton(t('btn_registration', lang_code), url=self.referral_link)],
                    [InlineKeyboardButton(t('btn_check_access', lang_code), callback_data="check_access")],
                    [InlineKeyboardButton(t('btn_support', lang_code), url="https://t.me/kaktotakxm")],
                    [InlineKeyboardButton(t('btn_language', lang_code), callback_data="choose_language")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
                try:
                    with open('welcome.jpg', 'rb') as photo:
                        await context.bot.send_photo(
                            chat_id=query.from_user.id,
                            photo=photo,
                            caption=welcome_message,
                            reply_markup=reply_markup,
                            parse_mode='Markdown'
                        )
                except FileNotFoundError:
                    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.edit_message_text(
                        welcome_message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                    await query.edit_message_text(
                        welcome_message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
    
    async def choose_language_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏–∑ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        user_lang = get_user_language(user_id, self.users_db)
        
        keyboard = get_language_keyboard()
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            t('language_select', user_lang),
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not update.effective_user:
            logger.error("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return
            
        user_id = update.effective_user.id
        user_lang = get_user_language(user_id, self.users_db)
        message_text = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ ID –∞–∫–∫–∞—É–Ω—Ç–∞ PocketOption (—Å PO –∏–ª–∏ –±–µ–∑)
        if (message_text.upper().startswith('PO') and len(message_text) >= 5) or \
           (message_text.isdigit() and len(message_text) >= 5):
            await self.handle_pocket_option_id(user_id, message_text, update)
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                t('error_unknown_message', user_lang),
                parse_mode='Markdown'
            )
            
    async def handle_pocket_option_id(self, user_id: int, po_id: str, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∞–∫–∫–∞—É–Ω—Ç–∞ PocketOption"""
        
        logger.info(f"üÜî –ü–æ–ª—É—á–µ–Ω ID –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {po_id}")
        user_lang = get_user_language(user_id, self.users_db)
        
        if user_id not in self.users_db:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await update.message.reply_text(
                t('error_use_start', user_lang),
                parse_mode='Markdown'
            )
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º ID (–¥–æ–±–∞–≤–ª—è–µ–º PO –µ—Å–ª–∏ –Ω–µ—Ç)
        if po_id.upper().startswith('PO'):
            formatted_id = po_id.upper()
        else:
            formatted_id = f"PO{po_id}"
            
        logger.info(f"üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID: {formatted_id}")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
        self.users_db[user_id]['pocket_option_id'] = formatted_id
        self._save_users_db()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ID
        if user_id in self.access_check_history:
            self.access_check_history[user_id] = []
            logger.info(f"üîÑ –°–±—Ä–æ—à–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ID
        if user_id in self.user_warnings:
            self.user_warnings[user_id] = 0
            logger.info(f"üîÑ –°–±—Ä–æ—à–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ ID
        logger.info(f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª ID: {formatted_id}")
        username = self.users_db[user_id].get('username', 'Unknown')
        self._add_admin_event('id_sent', user_id, f"@{username} –æ—Ç–ø—Ä–∞–≤–∏–ª PocketOption ID: {formatted_id}")
        await self.notify_admin_id_sent(user_id, formatted_id, update)
        
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
        response_text = f"""
{t('id_received_title', user_lang).format(formatted_id)}

{t('id_checking', user_lang)}

{t('id_processing_time', user_lang)}

{t('id_what_checked', user_lang)}

{t('id_after_verification', user_lang)}

{t('id_questions', user_lang)}
        """.strip()
        
        await update.message.reply_text(
            response_text,
            parse_mode='Markdown'
        )
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        user_id = update.effective_user.id
        user_lang = get_user_language(user_id, self.users_db)
        
        help_text = f"""
{t('help_title', user_lang)}

{t('help_commands', user_lang)}

{t('help_send_id', user_lang)}

üîó *{t('btn_registration', user_lang)}:*
{self.referral_link}

{t('help_min_deposit', user_lang).format(self.min_deposit)}

üìû *{t('btn_support', user_lang)}:* @kaktotakxm

{t('help_response_time', user_lang)}
        """.strip()
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
        
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        user_id = update.effective_user.id
        user_lang = get_user_language(user_id, self.users_db)
        
        if user_id not in self.users_db:
            await update.message.reply_text(
                t('error_not_registered', user_lang),
                parse_mode='Markdown'
            )
            return
            
        user_data = self.users_db[user_id]
        
        status_text = f"""
{t('status_title', user_lang)}

{t('access_user', user_lang).format(user_data['username'])}
{t('access_registration', user_lang).format(user_data['registered_at'][:10])}
{t('access_account_id', user_lang).format(user_data.get('pocket_option_id', t('access_id_not_sent', user_lang)))}
{t('access_status', user_lang).format(t('access_active', user_lang) if user_data.get('verified') else t('access_not_granted', user_lang))}

        """.strip()
        
        if not user_data.get('verified'):
            status_text += t('status_not_verified', user_lang).format(self.min_deposit)
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def notify_admin_new_user(self, user_id: int, username: str, update: Update):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ username
        telegram_username = "–±–µ–∑ username"
        if update.effective_user and update.effective_user.username:
            telegram_username = f"@{update.effective_user.username}"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ Markdown –ø—Ä–æ–±–ª–µ–º
        admin_message = f"""üÜï –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–õ–°–Ø!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
üÜî ID: {user_id}
üìß Telegram: {telegram_username}
üìÖ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.users_db)}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {len([u for u in self.users_db.values() if u['registered_at'][:10] == datetime.now().strftime('%Y-%m-%d')])}

üí° –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π requests.post –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            
            def send_notification():
                try:
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {self.admin_chat_id})")
                    logger.info(f"üìù –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(admin_message)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    response = requests.post(
                        f"https://api.telegram.org/bot{self.bot_token}/sendMessage",
                        data={
                            'chat_id': self.admin_chat_id,
                            'text': admin_message
                        },
                        timeout=10
                    )
                    
                    logger.info(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: HTTP {response.status_code}")
                    
                    if response.status_code == 200:
                        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {username} (ID: {user_id})")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: HTTP {response.status_code}")
                        logger.error(f"‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=send_notification)
            thread.daemon = True
            thread.start()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def notify_admin_id_sent(self, user_id: int, formatted_id: str, update: Update):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞"""
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ username
        telegram_username = "–±–µ–∑ username"
        if update.effective_user and update.effective_user.username:
            telegram_username = f"@{update.effective_user.username}"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ Markdown –ø—Ä–æ–±–ª–µ–º
        admin_message = f"""üîî –ù–û–í–´–ô –ó–ê–ü–†–û–° –î–û–°–¢–£–ü–ê

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.users_db[user_id]['username']}
üÜî ID: {user_id}
üìß Telegram: {telegram_username}
üÜî PocketOption ID: {formatted_id}

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}

üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {self.referral_link}

‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
2. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º ${self.min_deposit}
3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø –µ—Å–ª–∏ –≤—Å–µ –û–ö"""
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π requests.post –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            
            def send_notification():
                try:
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {self.admin_chat_id})")
                    logger.info(f"üìù –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(admin_message)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    response = requests.post(
                        f"https://api.telegram.org/bot{self.bot_token}/sendMessage",
                        data={
                            'chat_id': self.admin_chat_id,
                            'text': admin_message
                        },
                        timeout=10
                    )
                    
                    logger.info(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: HTTP {response.status_code}")
                    
                    if response.status_code == 200:
                        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {self.users_db[user_id]['username']} (ID: {user_id})")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± ID: HTTP {response.status_code}")
                        logger.error(f"‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=send_notification)
            thread.daemon = True
            thread.start()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± ID: {e}")
    
    async def admin_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /admin_stats - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if str(user_id) != self.admin_chat_id:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                parse_mode='Markdown'
            )
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞
        total_users = len(self.users_db)
        users_with_checks = len(self.access_check_history)
        total_checks = sum(len(checks) for checks in self.access_check_history.values())
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–≤–µ—Ä–æ–∫
        top_checkers = []
        for uid, checks in self.access_check_history.items():
            if len(checks) > 1:  # –¢–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–ª –±–æ–ª–µ–µ 1 —Ä–∞–∑–∞
                username = self.users_db.get(uid, {}).get('username', 'Unknown')
                top_checkers.append((username, len(checks)))
        
        top_checkers.sort(key=lambda x: x[1], reverse=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        blocked_count = len(self.blocked_users)
        warned_users = len([uid for uid, count in self.user_warnings.items() if count > 0])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        today = datetime.now().strftime('%Y-%m-%d')
        new_today = len([u for u in self.users_db.values() if u['registered_at'][:10] == today])
        week_ago = (datetime.now().replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=7)).strftime('%Y-%m-%d')
        new_week = len([u for u in self.users_db.values() if u['registered_at'][:10] >= week_ago])
        
        stats_text = f"""
üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–í–ï–†–û–ö –î–û–°–¢–£–ü–ê*

üë• *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_today}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_week}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏: {users_with_checks}
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {warned_users}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {blocked_count}

üîÑ *–¢–æ–ø –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫:*
        """.strip()
        
        if top_checkers:
            for i, (username, count) in enumerate(top_checkers[:5], 1):
                stats_text += f"\n{i}. @{username}: {count} –ø—Ä–æ–≤–µ—Ä–æ–∫"
        else:
            stats_text += "\n‚Ä¢ –ù–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"
        
        stats_text += f"""

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–æ–∫: {self.max_repeated_checks}
‚Ä¢ –ö—É–ª–¥–∞—É–Ω: {self.check_cooldown // 60} –º–∏–Ω.
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {self.max_warnings} (1-–µ, 2-–µ = –±–∞–Ω)

üí° *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*
‚Ä¢ /reset_checks - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ /blocked_users - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
‚Ä¢ /unblock_user <ID> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """.strip()
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')
    
    async def reset_checks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /reset_checks - —Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if str(user_id) != self.admin_chat_id:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                parse_mode='Markdown'
            )
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.access_check_history = {}
        self.user_warnings = {}
        
        await update.message.reply_text(
            "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω–∞",
            parse_mode='Markdown'
        )
    
    async def unblock_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /unblock_user <user_id> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if str(user_id) != self.admin_chat_id:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                parse_mode='Markdown'
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n"
                "–ü—Ä–∏–º–µ—Ä: /unblock_user 123456789",
                parse_mode='Markdown'
            )
            return
        
        try:
            target_user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                parse_mode='Markdown'
            )
            return
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target_user_id in self.blocked_users:
            self.blocked_users.remove(target_user_id)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if target_user_id in self.user_warnings:
                self.user_warnings[target_user_id] = 0
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫
            if target_user_id in self.access_check_history:
                self.access_check_history[target_user_id] = []
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
                f"‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã\n"
                f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ—á–∏—â–µ–Ω–∞\n\n"
                f"üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞",
                parse_mode='Markdown'
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–∫–ª—é—á–µ–Ω–æ
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        else:
            await update.message.reply_text(
                f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                parse_mode='Markdown'
            )
    
    async def blocked_users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /blocked_users - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if str(user_id) != self.admin_chat_id:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                parse_mode='Markdown'
            )
            return
        
        if not self.blocked_users:
            await update.message.reply_text(
                "‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç",
                parse_mode='Markdown'
            )
            return
        
        blocked_list = "üö´ *–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:*\n\n"
        
        for blocked_id in self.blocked_users:
            username = self.users_db.get(blocked_id, {}).get('username', 'Unknown')
            warnings = self.user_warnings.get(blocked_id, 0)
            blocked_list += f"‚Ä¢ ID: {blocked_id}\n"
            blocked_list += f"  Username: @{username}\n"
            blocked_list += f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}\n\n"
        
        blocked_list += f"üí° *–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:* /unblock_user <ID>"
        
        await update.message.reply_text(blocked_list, parse_mode='Markdown')
    
    async def admin_panel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /admin_panel - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if str(user_id) != self.admin_chat_id:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                parse_mode='Markdown'
            )
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = len(self.users_db)
        verified_users = len([u for u in self.users_db.values() if u.get('verified')])
        with_id = len([u for u in self.users_db.values() if u.get('pocket_option_id')])
        with_deposit = len([u for u in self.users_db.values() if u.get('deposited')])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º
        today = datetime.now().strftime('%Y-%m-%d')
        new_today = len([u for u in self.users_db.values() if u.get('registered_at', '')[:10] == today])
        week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        new_week = len([u for u in self.users_db.values() if u.get('registered_at', '')[:10] >= week_ago])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º
        languages = {}
        for user_data in self.users_db.values():
            lang = user_data.get('language', '–ù–µ –≤—ã–±—Ä–∞–Ω')
            languages[lang] = languages.get(lang, 0) + 1
        
        lang_stats = '\n'.join([f"  ‚Ä¢ {lang}: {count}" for lang, count in sorted(languages.items(), key=lambda x: x[1], reverse=True)])
        
        panel_text = f"""
üëë *–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê*

üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:*

üë• *–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {verified_users}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ ID: {with_id}
‚Ä¢ –° –¥–µ–ø–æ–∑–∏—Ç–æ–º: {with_deposit}

üìÖ *–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {new_today}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {new_week}

üåê *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫–∞–º:*
{lang_stats}

‚ö†Ô∏è *–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:*
‚Ä¢ –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {len([uid for uid, count in self.user_warnings.items() if count > 0])}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(self.blocked_users)}

üíæ *–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:* `{self.users_db_file}`
        """.strip()
        
        keyboard = [
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_export_users")],
            [InlineKeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è", callback_data="admin_events")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_refresh")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_clear_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            panel_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def admin_export_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if str(user_id) != self.admin_chat_id:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                parse_mode='Markdown'
            )
            return
        
        await query.edit_message_text(
            "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            parse_mode='Markdown'
        )
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        csv_file = self._export_users_csv()
        
        if csv_file:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(csv_file, 'rb') as f:
                    await context.bot.send_document(
                        chat_id=self.admin_chat_id,
                        document=f,
                        filename=csv_file,
                        caption=f"üìä *–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(self.users_db)}\n–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
                        parse_mode='Markdown'
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                import os
                os.remove(csv_file)
                
                await query.edit_message_text(
                    "‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}",
                    parse_mode='Markdown'
                )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞",
                parse_mode='Markdown'
            )
    
    async def admin_refresh_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        query = update.callback_query
        await query.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if str(user_id) != self.admin_chat_id:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                parse_mode='Markdown'
            )
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = len(self.users_db)
        verified_users = len([u for u in self.users_db.values() if u.get('verified')])
        with_id = len([u for u in self.users_db.values() if u.get('pocket_option_id')])
        with_deposit = len([u for u in self.users_db.values() if u.get('deposited')])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º
        today = datetime.now().strftime('%Y-%m-%d')
        new_today = len([u for u in self.users_db.values() if u.get('registered_at', '')[:10] == today])
        week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        new_week = len([u for u in self.users_db.values() if u.get('registered_at', '')[:10] >= week_ago])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º
        languages = {}
        for user_data in self.users_db.values():
            lang = user_data.get('language', '–ù–µ –≤—ã–±—Ä–∞–Ω')
            languages[lang] = languages.get(lang, 0) + 1
        
        lang_stats = '\n'.join([f"  ‚Ä¢ {lang}: {count}" for lang, count in sorted(languages.items(), key=lambda x: x[1], reverse=True)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏)
        update_time = datetime.now().strftime('%H:%M:%S.%f')[:-3]  # –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        
        panel_text = f"""üëë –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:

üë• –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {verified_users}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ ID: {with_id}
‚Ä¢ –° –¥–µ–ø–æ–∑–∏—Ç–æ–º: {with_deposit}

üìÖ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {new_today}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {new_week}

üåê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫–∞–º:
{lang_stats}

‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
‚Ä¢ –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {len([uid for uid, count in self.user_warnings.items() if count > 0])}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(self.blocked_users)}

üíæ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {self.users_db_file}

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}"""
        
        keyboard = [
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_export_users")],
            [InlineKeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è", callback_data="admin_events")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_refresh")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_clear_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            panel_text,
            reply_markup=reply_markup
        )
    
    async def admin_stats_detailed_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if str(user_id) != self.admin_chat_id:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                parse_mode='Markdown'
            )
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞
        total_users = len(self.users_db)
        users_with_checks = len(self.access_check_history)
        total_checks = sum(len(checks) for checks in self.access_check_history.values())
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–≤–µ—Ä–æ–∫
        top_checkers = []
        for uid, checks in self.access_check_history.items():
            if len(checks) > 1:  # –¢–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–ª –±–æ–ª–µ–µ 1 —Ä–∞–∑–∞
                username = self.users_db.get(uid, {}).get('username', 'Unknown')
                top_checkers.append((username, len(checks)))
        
        top_checkers.sort(key=lambda x: x[1], reverse=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        blocked_count = len(self.blocked_users)
        warned_users = len([uid for uid, count in self.user_warnings.items() if count > 0])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        today = datetime.now().strftime('%Y-%m-%d')
        new_today = len([u for u in self.users_db.values() if u['registered_at'][:10] == today])
        week_ago = (datetime.now().replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=7)).strftime('%Y-%m-%d')
        new_week = len([u for u in self.users_db.values() if u['registered_at'][:10] >= week_ago])
        
        stats_text = f"""üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–í–ï–†–û–ö –î–û–°–¢–£–ü–ê

üë• –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_today}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_week}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏: {users_with_checks}
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {warned_users}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {blocked_count}

üîÑ –¢–æ–ø –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫:"""
        
        if top_checkers:
            for i, (username, count) in enumerate(top_checkers[:5], 1):
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                safe_username = username.replace('*', '').replace('_', '').replace('`', '') if username else 'Unknown'
                stats_text += f"\n{i}. @{safe_username}: {count} –ø—Ä–æ–≤–µ—Ä–æ–∫"
        else:
            stats_text += "\n‚Ä¢ –ù–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"
        
        stats_text += f"""

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–æ–∫: {self.max_repeated_checks}
‚Ä¢ –ö—É–ª–¥–∞—É–Ω: {self.check_cooldown // 60} –º–∏–Ω.
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {self.max_warnings} (1-–µ, 2-–µ = –±–∞–Ω)

üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
‚Ä¢ /reset_checks - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ /blocked_users - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
‚Ä¢ /unblock_user <ID> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="back_to_admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup
        )
    
    async def admin_events_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
        query = update.callback_query
        await query.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–æ–±—ã—Ç–∏—è...")
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if str(user_id) != self.admin_chat_id:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                parse_mode='Markdown'
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        update_time = datetime.now().strftime('%H:%M:%S.%f')[:-3]  # –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        
        if not self.admin_events:
            events_text = f"""üìã –ü–û–°–õ–ï–î–ù–ò–ï –°–û–ë–´–¢–ò–Ø

‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

–°–æ–±—ã—Ç–∏—è –ø–æ—è–≤—è—Ç—Å—è –∫–æ–≥–¥–∞:
‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤—è—Ç PocketOption ID
‚Ä¢ –ü—Ä–æ–∏–∑–æ–π–¥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}"""
        else:
            events_text = f"üìã –ü–û–°–õ–ï–î–ù–ò–ï –°–û–ë–´–¢–ò–Ø\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–±—ã—Ç–∏–π
            for i, event in enumerate(self.admin_events[:20], 1):
                timestamp = datetime.fromisoformat(event['timestamp'])
                time_str = timestamp.strftime('%H:%M:%S %d.%m')
                
                # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
                icons = {
                    'new_user': 'üÜï',
                    'id_sent': 'üÜî',
                    'blocked': '‚õî',
                    'unblocked': '‚úÖ',
                    'verified': '‚úÖ'
                }
                icon = icons.get(event['event_type'], 'üìå')
                
                events_text += f"{i}. {icon} {time_str} - {event['description']}\n"
            
            if len(self.admin_events) > 20:
                events_text += f"\n...–∏ –µ—â–µ {len(self.admin_events) - 20} —Å–æ–±—ã—Ç–∏–π"
            
            events_text += f"\n\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_events")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="back_to_admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            events_text,
            reply_markup=reply_markup
        )
    
    async def back_to_admin_panel_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏'"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if str(user_id) != self.admin_chat_id:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                parse_mode='Markdown'
            )
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = len(self.users_db)
        verified_users = len([u for u in self.users_db.values() if u.get('verified')])
        with_id = len([u for u in self.users_db.values() if u.get('pocket_option_id')])
        with_deposit = len([u for u in self.users_db.values() if u.get('deposited')])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º
        today = datetime.now().strftime('%Y-%m-%d')
        new_today = len([u for u in self.users_db.values() if u.get('registered_at', '')[:10] == today])
        week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        new_week = len([u for u in self.users_db.values() if u.get('registered_at', '')[:10] >= week_ago])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º
        languages = {}
        for user_data in self.users_db.values():
            lang = user_data.get('language', '–ù–µ –≤—ã–±—Ä–∞–Ω')
            languages[lang] = languages.get(lang, 0) + 1
        
        lang_stats = '\n'.join([f"  ‚Ä¢ {lang}: {count}" for lang, count in sorted(languages.items(), key=lambda x: x[1], reverse=True)])
        
        panel_text = f"""
üëë *–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê*

üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:*

üë• *–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {verified_users}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ ID: {with_id}
‚Ä¢ –° –¥–µ–ø–æ–∑–∏—Ç–æ–º: {with_deposit}

üìÖ *–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {new_today}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {new_week}

üåê *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫–∞–º:*
{lang_stats}

‚ö†Ô∏è *–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:*
‚Ä¢ –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {len([uid for uid, count in self.user_warnings.items() if count > 0])}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(self.blocked_users)}

üíæ *–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:* `{self.users_db_file}`
        """.strip()
        
        keyboard = [
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_export_users")],
            [InlineKeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è", callback_data="admin_events")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_refresh")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_clear_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            panel_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def admin_clear_stats_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if str(user_id) != self.admin_chat_id:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                parse_mode='Markdown'
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        confirm_text = """‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –û–ß–ò–°–¢–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò
    
    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—á–∏—Å—Ç–∫–∏:
    
    üîÑ –°–ë–†–û–° –°–¢–ê–¢–£–°–û–í:
    ‚Ä¢ –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –¥–µ–ø–æ–∑–∏—Ç—ã
    ‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫
    ‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    
    üóëÔ∏è –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê:
    ‚Ä¢ –£–¥–∞–ª–∏—Ç—å –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    ‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    ‚Ä¢ –ù–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞"""
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã", callback_data="admin_clear_confirm")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_clear_full")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            confirm_text,
            reply_markup=reply_markup
        )
    
    async def admin_clear_confirm_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        query = update.callback_query
        await query.answer("üóëÔ∏è –û—á–∏—â–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if str(user_id) != self.admin_chat_id:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã"
            )
            return
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cleared_items = []
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞
        checks_count = len(self.access_check_history)
        self.access_check_history = {}
        if checks_count > 0:
            cleared_items.append(f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫: {checks_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings_count = len(self.user_warnings)
        self.user_warnings = {}
        if warnings_count > 0:
            cleared_items.append(f"‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        blocked_count = len(self.blocked_users)
        self.blocked_users = set()
        if blocked_count > 0:
            cleared_items.append(f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {blocked_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –û—á–∏—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        events_count = len(self.admin_events)
        self.admin_events = []
        if events_count > 0:
            cleared_items.append(f"‚Ä¢ –°–æ–±—ã—Ç–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {events_count} —Å–æ–±—ã—Ç–∏–π")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏)
        users_reset = 0
        for user_id_key, user_data in self.users_db.items():
            if user_data.get('verified') or user_data.get('deposited'):
                user_data['verified'] = False
                user_data['deposited'] = False
                user_data['pocket_option_id'] = None
                users_reset += 1
        
        if users_reset > 0:
            cleared_items.append(f"‚Ä¢ –°–±—Ä–æ—à–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã: {users_reset} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            self._save_users_db()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if cleared_items:
            result_text = f"""‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ß–ò–©–ï–ù–ê

–û—á–∏—â–µ–Ω–æ:
{chr(10).join(cleared_items)}

‚è∞ –í—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}

üíæ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞
–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.users_db)}
–°—Ç–∞—Ç—É—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã: {users_reset}"""
        else:
            result_text = """‚ÑπÔ∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–ñ–ï –ü–£–°–¢–ê

–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏."""
        
        logger.info(f"üóëÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—á–∏—Å—Ç–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {len(cleared_items)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Å–±—Ä–æ—à–µ–Ω–æ {users_reset} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="back_to_admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            result_text,
            reply_markup=reply_markup
        )

    async def admin_clear_full_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        query = update.callback_query
        await query.answer("üóëÔ∏è –í—ã–ø–æ–ª–Ω—è—é –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É...")
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if str(user_id) != self.admin_chat_id:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã"
            )
            return
        
        # –û—á–∏—â–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ
        users_count = len(self.users_db)
        checks_count = len(self.access_check_history)
        warnings_count = len(self.user_warnings)
        blocked_count = len(self.blocked_users)
        events_count = len(self.admin_events)
        
        # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        self.users_db = {}
        self.access_check_history = {}
        self.user_warnings = {}
        self.blocked_users = set()
        self.admin_events = []
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—É—é –±–∞–∑—É
        self._save_users_db()
        
        result_text = f"""‚úÖ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê

–£–¥–∞–ª–µ–Ω–æ:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫: {checks_count}
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings_count}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {blocked_count}
‚Ä¢ –°–æ–±—ã—Ç–∏—è: {events_count}

‚è∞ –í—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}

üéØ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞
–ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!"""
        
        logger.info(f"üóëÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–∏–ª –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω–æ")
        
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="back_to_admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            result_text,
            reply_markup=reply_markup
        )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
async def grant_access_to_user(bot_token: str, user_id: int, admin_chat_id: str, bot_instance=None):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º)"""
    
    success_message = """
üéâ *–î–û–°–¢–£–ü –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù!*

‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!*

üìä *–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:*
‚Ä¢ –í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ –¢–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫—É 24/7

üöÄ *–ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!*

üíé *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ñ–∏!*

üë®‚Äçüíª *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @kaktotakxm
    """.strip()
    
    try:
        response = requests.post(
            f"https://api.telegram.org/bot{bot_token}/sendMessage",
            data={
                'chat_id': user_id,
                'text': success_message,
                'parse_mode': 'Markdown'
            }
        )
        
        if response.status_code == 200:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if bot_instance:
                if hasattr(bot_instance, 'access_check_history') and user_id in bot_instance.access_check_history:
                    bot_instance.access_check_history[user_id] = []
                if hasattr(bot_instance, 'user_warnings') and user_id in bot_instance.user_warnings:
                    bot_instance.user_warnings[user_id] = 0
                if hasattr(bot_instance, '_save_users_db'):
                    bot_instance._save_users_db()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            requests.post(
                f"https://api.telegram.org/bot{bot_token}/sendMessage",
                data={
                    'chat_id': admin_chat_id,
                    'text': f"‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
                }
            )
            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: {e}")
        
    return False

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if update and update.effective_user:
        try:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = InfoBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(bot.bot_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("status", bot.status_command))
    application.add_handler(CommandHandler("language", bot.language_command))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    application.add_handler(CommandHandler("admin_stats", bot.admin_stats_command))
    application.add_handler(CommandHandler("reset_checks", bot.reset_checks_command))
    application.add_handler(CommandHandler("unblock_user", bot.unblock_user_command))
    application.add_handler(CommandHandler("blocked_users", bot.blocked_users_command))
    application.add_handler(CommandHandler("admin_panel", bot.admin_panel_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(bot.instruction_callback, pattern="instruction"))
    application.add_handler(CallbackQueryHandler(bot.check_access_callback, pattern="check_access"))
    application.add_handler(CallbackQueryHandler(bot.back_to_start_callback, pattern="back_to_start"))
    application.add_handler(CallbackQueryHandler(bot.choose_language_callback, pattern="choose_language"))  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(CallbackQueryHandler(bot.language_callback, pattern="^lang_"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    application.add_handler(CallbackQueryHandler(bot.admin_export_callback, pattern="admin_export_users"))
    application.add_handler(CallbackQueryHandler(bot.admin_refresh_callback, pattern="admin_refresh"))
    application.add_handler(CallbackQueryHandler(bot.admin_stats_detailed_callback, pattern="admin_stats"))
    application.add_handler(CallbackQueryHandler(bot.admin_events_callback, pattern="admin_events"))
    application.add_handler(CallbackQueryHandler(bot.admin_clear_stats_callback, pattern="admin_clear_stats"))
    application.add_handler(CallbackQueryHandler(bot.admin_clear_confirm_callback, pattern="admin_clear_confirm"))
    application.add_handler(CallbackQueryHandler(bot.admin_clear_full_callback, pattern="admin_clear_full"))
    application.add_handler(CallbackQueryHandler(bot.back_to_admin_panel_callback, pattern="back_to_admin_panel"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
    import sys
    import io
    if sys.platform == 'win32':
        sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    
    print("ü§ñ –ë–æ—Ç @info_xm_trust_bot –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏!")
    print("üåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: –†—É—Å—Å–∫–∏–π, English, ‡πÑ‡∏ó‡∏¢, Espa√±ol, ÿßŸÑÿπÿ±ÿ®Ÿäÿ©")
    application.run_polling()

if __name__ == "__main__":
    main()